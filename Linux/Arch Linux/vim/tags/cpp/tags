!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lttzz/.vim/tags/cpp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
Init	./ios_base.h	/^      Init();$/;"	kind:prototype	language:C++	class:std::ios_base::Init	access:public	signature:()
Init	./ios_base.h	/^    class Init$/;"	kind:class	language:C++	class:std::ios_base	access:public
_ALGOBASE_H	./stl_algobase.h	/^#define _ALGOBASE_H /;"	kind:macro	language:C++
_ALGO_H	./stl_algo.h	/^#define _ALGO_H /;"	kind:macro	language:C++
_ALLOCATOR_H	./allocator.h	/^#define _ALLOCATOR_H /;"	kind:macro	language:C++
_Alloc_hider	./basic_string.h	/^	_Alloc_hider(_CharT* __dat, const _Alloc& __a)$/;"	kind:function	language:C++	struct:std::basic_string::_Alloc_hider	access:public	signature:(_CharT * __dat,const _Alloc & __a)
_Alloc_hider	./basic_string.h	/^      struct _Alloc_hider : _Alloc$/;"	kind:struct	language:C++	class:std::basic_string	inherits:_Alloc	access:private
_Alloc_value_type	./stl_deque.h	/^      typedef typename _Alloc::value_type        _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_list.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_map.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_multimap.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_multiset.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_set.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc::value_type	access:private
_Alloc_value_type	./stl_vector.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc::value_type	access:private
_Arg	./valarray_before.h	/^      typedef _Dom _Arg;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_Dom	access:public
_Arg	./valarray_before.h	/^      typedef valarray<_Tp> _Arg;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:valarray<_Tp>	access:public
_Arg1_type	./stl_function.h	/^      typedef typename _Operation::first_argument_type _Arg1_type;$/;"	kind:typedef	language:C++	function:std::bind1st	typeref:typename:_Operation::first_argument_type
_Arg2_type	./stl_function.h	/^      typedef typename _Operation::second_argument_type _Arg2_type;$/;"	kind:typedef	language:C++	function:std::bind2nd	typeref:typename:_Operation::second_argument_type
_Array	./valarray_array.h	/^      _Array(const _Tp* __restrict__, size_t);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(const _Tp * __restrict__,size_t)
_Array	./valarray_array.h	/^      explicit _Array(_Tp* const __restrict__);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(_Tp * const __restrict__)
_Array	./valarray_array.h	/^      explicit _Array(const valarray<_Tp>&);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(const valarray<_Tp> &)
_Array	./valarray_array.h	/^      explicit _Array(size_t);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(size_t)
_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(_Tp* const __restrict__ __p)$/;"	kind:function	language:C++	class:std::_Array	signature:(_Tp * const __restrict__ __p)
_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(const _Tp* __restrict__ __b, size_t __s)$/;"	kind:function	language:C++	class:std::_Array	signature:(const _Tp * __restrict__ __b,size_t __s)
_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(const valarray<_Tp>& __v)$/;"	kind:function	language:C++	class:std::_Array	signature:(const valarray<_Tp> & __v)
_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(size_t __n)$/;"	kind:function	language:C++	class:std::_Array	signature:(size_t __n)
_Array	./valarray_array.h	/^    struct _Array$/;"	kind:struct	language:C++	namespace:std
_Array_copier	./valarray_array.h	/^    struct _Array_copier$/;"	kind:struct	language:C++	namespace:std
_Array_copier	./valarray_array.h	/^    struct _Array_copier<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
_Array_copy_ctor	./valarray_array.h	/^    struct _Array_copy_ctor$/;"	kind:struct	language:C++	namespace:std
_Array_copy_ctor	./valarray_array.h	/^    struct _Array_copy_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
_Array_default_ctor	./valarray_array.h	/^    struct _Array_default_ctor$/;"	kind:struct	language:C++	namespace:std
_Array_default_ctor	./valarray_array.h	/^    struct _Array_default_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
_Array_init_ctor	./valarray_array.h	/^    struct _Array_init_ctor$/;"	kind:struct	language:C++	namespace:std
_Array_init_ctor	./valarray_array.h	/^    struct _Array_init_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
_AssignableConcept	./boost_concept_check.h	/^  struct _AssignableConcept$/;"	kind:struct	language:C++
_AssignableConcept::__a	./boost_concept_check.h	/^    _Tp __a;$/;"	kind:member	language:C++	struct:_AssignableConcept	typeref:typename:_Tp	access:public
_AssignableConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	kind:function	language:C++	struct:_AssignableConcept	typeref:typename:void	access:public	signature:(const _Tp & __b)
_AssignableConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_AssignableConcept	typeref:typename:void	access:public	signature:()
_AssociativeContainerConcept	./boost_concept_check.h	/^  struct _AssociativeContainerConcept$/;"	kind:struct	language:C++
_AssociativeContainerConcept::_Const_iterator	./boost_concept_check.h	/^    typedef typename _AssociativeContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::const_iterator	access:public
_AssociativeContainerConcept::_Iterator	./boost_concept_check.h	/^    typedef typename _AssociativeContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::iterator	access:public
_AssociativeContainerConcept::__c	./boost_concept_check.h	/^    _AssociativeContainer __c;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer	access:public
_AssociativeContainerConcept::__ci	./boost_concept_check.h	/^    _Const_iterator __ci;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_Const_iterator	access:public
_AssociativeContainerConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _AssociativeContainer& __c) {$/;"	kind:function	language:C++	struct:_AssociativeContainerConcept	typeref:typename:void	access:public	signature:(const _AssociativeContainer & __c)
_AssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_AssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_AssociativeContainerConcept::__cr	./boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:std::pair<_Const_iterator,_Const_iterator>	access:public
_AssociativeContainerConcept::__i	./boost_concept_check.h	/^    _Iterator __i;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_Iterator	access:public
_AssociativeContainerConcept::__k	./boost_concept_check.h	/^    typename _AssociativeContainer::key_type __k;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::key_type	access:public
_AssociativeContainerConcept::__n	./boost_concept_check.h	/^    typename _AssociativeContainer::size_type __n;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::size_type	access:public
_AssociativeContainerConcept::__r	./boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:std::pair<_Iterator,_Iterator>	access:public
_Aux_require_same	./boost_concept_check.h	/^struct _Aux_require_same { };$/;"	kind:struct	language:C++
_Aux_require_same	./boost_concept_check.h	/^struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };$/;"	kind:struct	language:C++
_Aux_require_same::_Type	./boost_concept_check.h	/^struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };$/;"	kind:typedef	language:C++	struct:_Aux_require_same	typeref:typename:_Tp	access:public
_BASIC_IOS_H	./basic_ios.h	/^#define _BASIC_IOS_H /;"	kind:macro	language:C++
_BASIC_STRING_H	./basic_string.h	/^#define _BASIC_STRING_H /;"	kind:macro	language:C++
_BOOST_CONCEPT_CHECK_H	./boost_concept_check.h	/^#define _BOOST_CONCEPT_CHECK_H /;"	kind:macro	language:C++
_BVECTOR_H	./stl_bvector.h	/^#define _BVECTOR_H /;"	kind:macro	language:C++
_BackInsertionSequenceConcept	./boost_concept_check.h	/^  struct _BackInsertionSequenceConcept$/;"	kind:struct	language:C++
_BackInsertionSequenceConcept::_Const_reference	./boost_concept_check.h	/^    typedef typename _BackInsertionSequence::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::const_reference	access:public
_BackInsertionSequenceConcept::_Reference	./boost_concept_check.h	/^    typedef typename _BackInsertionSequence::reference _Reference;$/;"	kind:typedef	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::reference	access:public
_BackInsertionSequenceConcept::__c	./boost_concept_check.h	/^    _BackInsertionSequence __c;$/;"	kind:member	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence	access:public
_BackInsertionSequenceConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _BackInsertionSequence& __c) {$/;"	kind:function	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:void	access:public	signature:(const _BackInsertionSequence & __c)
_BackInsertionSequenceConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:void	access:public	signature:()
_BackInsertionSequenceConcept::__t	./boost_concept_check.h	/^    typename _BackInsertionSequence::value_type __t;$/;"	kind:member	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::value_type	access:public
_Base	./stl_bvector.h	/^    typedef _Bvector_base<_Alloc>			 _Base;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bvector_base<_Alloc>	access:private
_Base	./stl_deque.h	/^      typedef _Deque_base<_Tp, _Alloc>           _Base;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Deque_base<_Tp,_Alloc>	access:private
_Base	./stl_list.h	/^      typedef _List_base<_Tp, _Alloc>                    _Base;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_base<_Tp,_Alloc>	access:private
_Base	./stl_vector.h	/^      typedef _Vector_base<_Tp, _Alloc>			 _Base;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Vector_base<_Tp,_Alloc>	access:private
_Base	./valarray_after.h	/^      typedef _GBase<_Array<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_GBase<_Array<_Tp>>	access:public
_Base	./valarray_after.h	/^      typedef _GBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_GBase<_Dom>	access:public
_Base	./valarray_after.h	/^      typedef _IBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_IBase<_Dom>	access:public
_Base	./valarray_after.h	/^      typedef _IBase<valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_IBase<valarray<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef  _SBase<_Array<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_SBase<_Array<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase1<_Oper, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase1<_Oper,_Dom>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase1<_Oper, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase1<_Oper,valarray<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase2<_Oper,_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase2<_Oper,_Dom>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase2<_Oper,valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase2<_Oper,valarray<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, _Dom1, _Dom2> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,_Dom1,_Dom2>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,valarray<_Tp>,_Dom>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,valarray<_Tp>,valarray<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef _BinBase<_Oper,_Dom,valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,_Dom,valarray<_Tp>>	access:public
_Base	./valarray_before.h	/^      typedef _FunBase<_Dom, const typename _Dom::value_type&> _Base;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_FunBase<_Dom,const typename _Dom::value_type &>	access:public
_Base	./valarray_before.h	/^      typedef _FunBase<_Dom, typename _Dom::value_type> _Base;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_FunBase<_Dom,typename _Dom::value_type>	access:public
_Base	./valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, _Tp> _Base;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_FunBase<valarray<_Tp>,_Tp>	access:public
_Base	./valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, const _Tp&> _Base;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_FunBase<valarray<_Tp>,const _Tp &>	access:public
_Base	./valarray_before.h	/^      typedef _SBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_SBase<_Dom>	access:public
_Base	./valarray_before.h	/^      typedef _UnBase<_Oper, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_UnBase<_Oper,_Dom>	access:public
_Base	./valarray_before.h	/^      typedef _UnBase<_Oper, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_UnBase<_Oper,valarray<_Tp>>	access:public
_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base* _Base_ptr;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node_base *	access:protected
_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_node_base::_Base_ptr	access:public
_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_node_base::_Const_Base_ptr	access:public
_Base_ptr	./stl_tree.h	/^    typedef _Rb_tree_node_base* _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Rb_tree_node_base *	access:public
_BidirectionalIteratorConcept	./boost_concept_check.h	/^  struct _BidirectionalIteratorConcept$/;"	kind:struct	language:C++
_BidirectionalIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BidirectionalIteratorConcept	typeref:typename:void	access:public	signature:()
_BidirectionalIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_BidirectionalIteratorConcept	typeref:typename:_Tp	access:public
_BinBase	./valarray_before.h	/^      _BinBase(const _FirstArg& __e1, const _SecondArg& __e2)$/;"	kind:function	language:C++	class:std::_BinBase	access:public	signature:(const _FirstArg & __e1,const _SecondArg & __e2)
_BinBase	./valarray_before.h	/^    class _BinBase$/;"	kind:class	language:C++	namespace:std
_BinBase1	./valarray_before.h	/^      _BinBase1(const _Vt& __t, const _Clos& __e)$/;"	kind:function	language:C++	class:std::_BinBase1	access:public	signature:(const _Vt & __t,const _Clos & __e)
_BinBase1	./valarray_before.h	/^    class _BinBase1$/;"	kind:class	language:C++	namespace:std
_BinBase2	./valarray_before.h	/^      _BinBase2(const _Clos& __e, const _Vt& __t)$/;"	kind:function	language:C++	class:std::_BinBase2	access:public	signature:(const _Clos & __e,const _Vt & __t)
_BinBase2	./valarray_before.h	/^    class _BinBase2$/;"	kind:class	language:C++	namespace:std
_BinClos	./valarray_before.h	/^      _BinClos(const _Dom& __e1, const _Tp& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom & __e1,const _Tp & __e2)
_BinClos	./valarray_before.h	/^      _BinClos(const _Dom& __e1, const valarray<_Tp>& __e2)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom & __e1,const valarray<_Tp> & __e2)
_BinClos	./valarray_before.h	/^      _BinClos(const _Dom1& __e1, const _Dom2& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom1 & __e1,const _Dom2 & __e2)
_BinClos	./valarray_before.h	/^      _BinClos(const _Tp& __e1, const _Dom& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Tp & __e1,const _Dom & __e2)
_BinClos	./valarray_before.h	/^      _BinClos(const _Tp& __t, const valarray<_Tp>& __v) : _Base(__t, __v) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Tp & __t,const valarray<_Tp> & __v)
_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __e1, const _Dom& __e2)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __e1,const _Dom & __e2)
_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const _Tp& __t) : _Base(__v, __t) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __v,const _Tp & __t)
_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const valarray<_Tp>& __w)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __v,const valarray<_Tp> & __w)
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _Expr, typename _Dom::value_type, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase1<_Oper,_Dom>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _ValArray, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase1<_Oper,valarray<_Tp>>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Constant, _Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase2<_Oper,_Dom>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Expr, _Dom1, _Dom2>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,_Dom1,_Dom2>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _ValArray, _Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,_Dom,valarray<typename_Dom::value_type>>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Constant, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase2<_Oper,valarray<_Tp>>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Expr, typename _Dom::value_type, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,valarray<typename_Dom::value_type>,_Dom>
_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper,_ValArray, _ValArray, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,valarray<_Tp>,valarray<_Tp>>
_BinaryFunctionConcept	./boost_concept_check.h	/^  struct _BinaryFunctionConcept$/;"	kind:struct	language:C++
_BinaryFunctionConcept	./boost_concept_check.h	/^  struct _BinaryFunctionConcept<_Func, void, _First, _Second>$/;"	kind:struct	language:C++
_BinaryFunctionConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BinaryFunctionConcept	typeref:typename:void	access:public	signature:()
_BinaryFunctionConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Func	access:public
_BinaryFunctionConcept::__first	./boost_concept_check.h	/^    _First __first;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_First	access:public
_BinaryFunctionConcept::__r	./boost_concept_check.h	/^    _Return __r;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Return	access:public
_BinaryFunctionConcept::__second	./boost_concept_check.h	/^    _Second __second;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Second	access:public
_BinaryPredicateConcept	./boost_concept_check.h	/^  struct _BinaryPredicateConcept$/;"	kind:struct	language:C++
_BinaryPredicateConcept::__a	./boost_concept_check.h	/^    _First __a;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_First	access:public
_BinaryPredicateConcept::__b	./boost_concept_check.h	/^    _Second __b;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_Second	access:public
_BinaryPredicateConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BinaryPredicateConcept	typeref:typename:void	access:public	signature:()
_BinaryPredicateConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_Func	access:public
_Bit_alloc_type	./stl_bvector.h	/^        _Bit_alloc_type;$/;"	kind:typedef	language:C++	struct:std::_Bvector_base	typeref:typename:_Alloc::template rebind<_Bit_type>::other	access:public
_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:()
_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:(_Bit_type * __x,unsigned int __y)
_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator(const _Bit_iterator& __x)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator & __x)
_Bit_const_iterator	./stl_bvector.h	/^  struct _Bit_const_iterator : public _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator	./stl_bvector.h	/^    _Bit_iterator() : _Bit_iterator_base(0, 0) { }$/;"	kind:function	language:C++	struct:std::_Bit_iterator	access:public	signature:()
_Bit_iterator	./stl_bvector.h	/^    _Bit_iterator(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	access:public	signature:(_Bit_type * __x,unsigned int __y)
_Bit_iterator	./stl_bvector.h	/^  struct _Bit_iterator : public _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Bit_iterator_base
_Bit_iterator_base	./stl_bvector.h	/^    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	access:public	signature:(_Bit_type * __x,unsigned int __y)
_Bit_iterator_base	./stl_bvector.h	/^  struct _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:std::iterator<std::random_access_iterator_tag,bool>
_Bit_reference	./stl_bvector.h	/^    _Bit_reference() : _M_p(0), _M_mask(0) { }$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:()
_Bit_reference	./stl_bvector.h	/^    _Bit_reference(_Bit_type * __x, _Bit_type __y)$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:(_Bit_type * __x,_Bit_type __y)
_Bit_reference	./stl_bvector.h	/^  struct _Bit_reference$/;"	kind:struct	language:C++	namespace:std
_Bit_type	./stl_bvector.h	/^  typedef unsigned long _Bit_type;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:unsigned long
_Bvector_base	./stl_bvector.h	/^      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }$/;"	kind:function	language:C++	struct:std::_Bvector_base	access:public	signature:(const allocator_type & __a)
_Bvector_base	./stl_bvector.h	/^    struct _Bvector_base$/;"	kind:struct	language:C++	namespace:std
_Bvector_impl	./stl_bvector.h	/^	_Bvector_impl(const _Bit_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_Bvector_base::_Bvector_impl	access:public	signature:(const _Bit_alloc_type & __a)
_Bvector_impl	./stl_bvector.h	/^      struct _Bvector_impl$/;"	kind:struct	language:C++	struct:std::_Bvector_base	inherits:_Bit_alloc_type	access:public
_CHAR_TRAITS_H	./char_traits.h	/^#define _CHAR_TRAITS_H /;"	kind:macro	language:C++
_CODECVT_H	./codecvt.h	/^#define _CODECVT_H /;"	kind:macro	language:C++
_CONCEPT_CHECK_H	./concept_check.h	/^#define _CONCEPT_CHECK_H /;"	kind:macro	language:C++
_CPP_TYPE_TRAITS_H	./cpp_type_traits.h	/^#define _CPP_TYPE_TRAITS_H /;"	kind:macro	language:C++
_Callback_list	./ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
_Callback_list	./ios_base.h	/^    struct _Callback_list$/;"	kind:struct	language:C++	class:std::ios_base	access:protected
_Cat	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::iterator_category _Cat;$/;"	kind:typedef	language:C++	function:_InputIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::iterator_category
_Category	./stl_algobase.h	/^      typedef typename iterator_traits<_BI1>::iterator_category _Category;$/;"	kind:typedef	language:C++	function:std::__copy_backward_aux	typeref:typename:iterator_traits<_BI1>::iterator_category
_Category	./stl_algobase.h	/^      typedef typename iterator_traits<_II>::iterator_category _Category;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:iterator_traits<_II>::iterator_category
_CharT_alloc_type	./basic_string.h	/^      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Alloc::template rebind<_CharT>::other	access:private
_Char_types	./char_traits.h	/^    struct _Char_types$/;"	kind:struct	language:C++
_Char_types::int_type	./char_traits.h	/^      typedef unsigned long   int_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:unsigned long	access:public
_Char_types::off_type	./char_traits.h	/^      typedef std::streamoff  off_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::streamoff	access:public
_Char_types::pos_type	./char_traits.h	/^      typedef std::streampos  pos_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::streampos	access:public
_Char_types::state_type	./char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::mbstate_t	access:public
_Closure	./valarray_after.h	/^      typedef _UnClos<__logical_not, std::_Expr, _Dom> _Closure;$/;"	kind:typedef	language:C++	function:std::_Expr::operator !	typeref:typename:_UnClos<__logical_not,std::_Expr,_Dom>
_ComparableConcept	./boost_concept_check.h	/^  struct _ComparableConcept$/;"	kind:struct	language:C++
_ComparableConcept::__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_ComparableConcept	typeref:typename:_Tp	access:public
_ComparableConcept::__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_ComparableConcept	typeref:typename:_Tp	access:public
_ComparableConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ComparableConcept	typeref:typename:void	access:public	signature:()
_Const_Base_ptr	./stl_tree.h	/^      typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const _Rb_tree_node_base *	access:protected
_Const_Base_ptr	./stl_tree.h	/^    typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:const _Rb_tree_node_base *	access:public
_Const_BinaryPredicateConcept	./boost_concept_check.h	/^  struct _Const_BinaryPredicateConcept {$/;"	kind:struct	language:C++
_Const_BinaryPredicateConcept::__a	./boost_concept_check.h	/^    _First __a;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_First	access:public
_Const_BinaryPredicateConcept::__b	./boost_concept_check.h	/^    _Second __b;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_Second	access:public
_Const_BinaryPredicateConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Func& __fun) {$/;"	kind:function	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:void	access:public	signature:(const _Func & __fun)
_Const_BinaryPredicateConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:void	access:public	signature:()
_Const_BinaryPredicateConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_Func	access:public
_Const_Link_type	./stl_tree.h	/^      typedef const _Rb_tree_node* _Const_Link_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const _Rb_tree_node *	access:public
_Const_iterator	./boost_concept_check.h	/^      _Const_iterator;$/;"	kind:typedef	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::const_iterator	access:public
_Const_iterator	./boost_concept_check.h	/^      typedef typename _ForwardContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	function:_ForwardContainerConcept::__constraints	typeref:typename:_ForwardContainer::const_iterator
_Const_iterator	./boost_concept_check.h	/^    typedef typename _AssociativeContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::const_iterator	access:public
_Const_iterator	./boost_concept_check.h	/^    typedef typename _Container::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_iterator	access:public
_Const_iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_iterator	access:public
_Const_iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::const_iterator	access:public
_Const_pointer	./boost_concept_check.h	/^    typedef typename _Container::const_pointer _Const_pointer;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_pointer	access:public
_Const_reference	./boost_concept_check.h	/^    typedef typename _BackInsertionSequence::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::const_reference	access:public
_Const_reference	./boost_concept_check.h	/^    typedef typename _Container::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_reference	access:public
_Const_reference	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_reference	access:public
_Const_reference	./boost_concept_check.h	/^    typedef typename _Sequence::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::const_reference	access:public
_Const_reverse_iterator	./boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_reverse_iterator	access:public
_Const_reverse_iterator	./boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	kind:typedef	language:C++	struct:_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::const_reverse_iterator	access:public
_Construct	./stl_construct.h	/^    _Construct(_T1* __p)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_T1 * __p)
_Construct	./stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
_ContainerConcept	./boost_concept_check.h	/^  struct _ContainerConcept$/;"	kind:struct	language:C++
_ContainerConcept::_Const_iterator	./boost_concept_check.h	/^    typedef typename _Container::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_iterator	access:public
_ContainerConcept::_Const_pointer	./boost_concept_check.h	/^    typedef typename _Container::const_pointer _Const_pointer;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_pointer	access:public
_ContainerConcept::_Const_reference	./boost_concept_check.h	/^    typedef typename _Container::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::const_reference	access:public
_ContainerConcept::_Difference_type	./boost_concept_check.h	/^    typedef typename _Container::difference_type _Difference_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::difference_type	access:public
_ContainerConcept::_Size_type	./boost_concept_check.h	/^    typedef typename _Container::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::size_type	access:public
_ContainerConcept::_Value_type	./boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::value_type	access:public
_ContainerConcept::__b	./boost_concept_check.h	/^    bool __b;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:bool	access:public
_ContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ContainerConcept	typeref:typename:void	access:public	signature:()
_ContainerConcept::__i	./boost_concept_check.h	/^    _Const_iterator __i;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:_Const_iterator	access:public
_ContainerConcept::__n	./boost_concept_check.h	/^    _Size_type __n;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:_Size_type	access:public
_ConvertibleConcept	./boost_concept_check.h	/^  struct _ConvertibleConcept$/;"	kind:struct	language:C++
_ConvertibleConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ConvertibleConcept	typeref:typename:void	access:public	signature:()
_ConvertibleConcept::__x	./boost_concept_check.h	/^    _From __x;$/;"	kind:member	language:C++	struct:_ConvertibleConcept	typeref:typename:_From	access:public
_CopyConstructibleConcept	./boost_concept_check.h	/^  struct _CopyConstructibleConcept$/;"	kind:struct	language:C++
_CopyConstructibleConcept::__b	./boost_concept_check.h	/^    _Tp __b;$/;"	kind:member	language:C++	struct:_CopyConstructibleConcept	typeref:typename:_Tp	access:public
_CopyConstructibleConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __a) {$/;"	kind:function	language:C++	struct:_CopyConstructibleConcept	typeref:typename:void	access:public	signature:(const _Tp & __a)
_CopyConstructibleConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_CopyConstructibleConcept	typeref:typename:void	access:public	signature:()
_DEFINE_ARRAY_FUNCTION	./valarray_array.h	/^#define _DEFINE_ARRAY_FUNCTION(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_EXPR_BINARY_FUNCTION	./valarray_after.h	/^#define _DEFINE_EXPR_BINARY_FUNCTION(/;"	kind:macro	language:C++	signature:(_Fun)
_DEFINE_EXPR_BINARY_OPERATOR	./valarray_after.h	/^#define _DEFINE_EXPR_BINARY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_EXPR_UNARY_FUNCTION	./valarray_after.h	/^#define _DEFINE_EXPR_UNARY_FUNCTION(/;"	kind:macro	language:C++	signature:(_Name)
_DEFINE_EXPR_UNARY_OPERATOR	./valarray_after.h	/^#define _DEFINE_EXPR_UNARY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_VALARRAY_OPERATOR	./gslice_array.h	/^#define _DEFINE_VALARRAY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_VALARRAY_OPERATOR	./indirect_array.h	/^#define _DEFINE_VALARRAY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_VALARRAY_OPERATOR	./mask_array.h	/^#define _DEFINE_VALARRAY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEFINE_VALARRAY_OPERATOR	./slice_array.h	/^#define _DEFINE_VALARRAY_OPERATOR(/;"	kind:macro	language:C++	signature:(_Op,_Name)
_DEQUE_H	./stl_deque.h	/^#define _DEQUE_H /;"	kind:macro	language:C++
_DefaultConstructibleConcept	./boost_concept_check.h	/^  struct _DefaultConstructibleConcept$/;"	kind:struct	language:C++
_DefaultConstructibleConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_DefaultConstructibleConcept	typeref:typename:void	access:public	signature:()
_Deque_base	./stl_deque.h	/^      _Deque_base(const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_Deque_base	access:public	signature:(const allocator_type & __a)
_Deque_base	./stl_deque.h	/^      _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	kind:function	language:C++	class:std::_Deque_base	access:public	signature:(const allocator_type & __a,size_t __num_elements)
_Deque_base	./stl_deque.h	/^    class _Deque_base$/;"	kind:class	language:C++	namespace:std
_Deque_impl	./stl_deque.h	/^	_Deque_impl(const _Tp_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_Deque_base::_Deque_impl	access:public	signature:(const _Tp_alloc_type & __a)
_Deque_impl	./stl_deque.h	/^      struct _Deque_impl$/;"	kind:struct	language:C++	class:std::_Deque_base	inherits:_Tp_alloc_type	access:protected
_Deque_iterator	./stl_deque.h	/^      _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:()
_Deque_iterator	./stl_deque.h	/^      _Deque_iterator(_Tp* __x, _Map_pointer __y)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:(_Tp * __x,_Map_pointer __y)
_Deque_iterator	./stl_deque.h	/^      _Deque_iterator(const iterator& __x)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:(const iterator & __x)
_Deque_iterator	./stl_deque.h	/^    struct _Deque_iterator$/;"	kind:struct	language:C++	namespace:std
_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator __alloc)
_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp>)
_Destroy	./stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __pointer)
_Diff	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::difference_type _Diff;$/;"	kind:typedef	language:C++	function:_InputIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::difference_type
_Difference_type	./boost_concept_check.h	/^    typedef typename _Container::difference_type _Difference_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::difference_type	access:public
_Distance	./stl_algo.h	/^	_Distance;$/;"	kind:typedef	language:C++	function:std::__merge_sort_with_buffer	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_Distance	./stl_algo.h	/^	_Distance;$/;"	kind:typedef	language:C++	function:std::__rotate	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_Distance	./stl_algobase.h	/^	  typedef typename iterator_traits<_II>::difference_type _Distance;$/;"	kind:typedef	language:C++	function:std::__copy::copy	typeref:typename:iterator_traits<_II>::difference_type
_Distance	./stl_heap.h	/^	_Distance;$/;"	kind:typedef	language:C++	function:std::__pop_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_DistanceType	./stl_algo.h	/^	    _DistanceType;$/;"	kind:typedef	language:C++	function:std::stable_partition	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::__search_n	typeref:typename:std::iterator_traits<_RandomAccessIter>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::equal_range	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::lower_bound	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::partial_sort_copy	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::stable_sort	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_DistanceType	./stl_algo.h	/^	_DistanceType;$/;"	kind:typedef	language:C++	function:std::upper_bound	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_DistanceType	./stl_algo.h	/^          _DistanceType;$/;"	kind:typedef	language:C++	function:std::inplace_merge	typeref:typename:iterator_traits<_BidirectionalIterator>::difference_type
_DistanceType	./stl_heap.h	/^	  _DistanceType;$/;"	kind:typedef	language:C++	function:std::make_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_DistanceType	./stl_heap.h	/^	  _DistanceType;$/;"	kind:typedef	language:C++	function:std::push_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type
_EXCEPTION_DEFINES_H	./exception_defines.h	/^#define _EXCEPTION_DEFINES_H /;"	kind:macro	language:C++
_EqualityComparableConcept	./boost_concept_check.h	/^  struct _EqualityComparableConcept$/;"	kind:struct	language:C++
_EqualityComparableConcept::__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_EqualityComparableConcept	typeref:typename:_Tp	access:public
_EqualityComparableConcept::__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_EqualityComparableConcept	typeref:typename:_Tp	access:public
_EqualityComparableConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_EqualityComparableConcept	typeref:typename:void	access:public	signature:()
_Expr	./valarray_after.h	/^      _Expr(const _Clos&);$/;"	kind:prototype	language:C++	class:std::_Expr	access:public	signature:(const _Clos &)
_Expr	./valarray_after.h	/^    _Expr<_Clos, _Tp>::_Expr(const _Clos& __c) : _M_closure(__c) {}$/;"	kind:function	language:C++	class:std::_Expr	signature:(const _Clos & __c)
_Expr	./valarray_after.h	/^    class _Expr$/;"	kind:class	language:C++	namespace:std
_FUNCTEXCEPT_H	./functexcept.h	/^#define _FUNCTEXCEPT_H /;"	kind:macro	language:C++
_FUNCTION_H	./stl_function.h	/^#define _FUNCTION_H /;"	kind:macro	language:C++
_ForwardContainerConcept	./boost_concept_check.h	/^  struct _ForwardContainerConcept$/;"	kind:struct	language:C++
_ForwardContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ForwardContainerConcept	typeref:typename:void	access:public	signature:()
_ForwardIteratorConcept	./boost_concept_check.h	/^  struct _ForwardIteratorConcept$/;"	kind:struct	language:C++
_ForwardIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ForwardIteratorConcept	typeref:typename:void	access:public	signature:()
_ForwardIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_ForwardIteratorConcept	typeref:typename:_Tp	access:public
_FrontInsertionSequenceConcept	./boost_concept_check.h	/^  struct _FrontInsertionSequenceConcept$/;"	kind:struct	language:C++
_FrontInsertionSequenceConcept::__c	./boost_concept_check.h	/^    _FrontInsertionSequence __c;$/;"	kind:member	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:_FrontInsertionSequence	access:public
_FrontInsertionSequenceConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:void	access:public	signature:()
_FrontInsertionSequenceConcept::__t	./boost_concept_check.h	/^    typename _FrontInsertionSequence::value_type __t;$/;"	kind:member	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:_FrontInsertionSequence::value_type	access:public
_FunBase	./valarray_before.h	/^      _FunBase(const _Dom& __e, value_type __f(_Arg))$/;"	kind:function	language:C++	class:std::_FunBase	access:public	signature:(const _Dom & __e,value_type __f (_Arg))
_FunBase	./valarray_before.h	/^    class _FunBase$/;"	kind:class	language:C++	namespace:std
_GBase	./valarray_after.h	/^      _GBase (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_GBase	access:public	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
_GBase	./valarray_after.h	/^      _GBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_GBase	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
_GBase	./valarray_after.h	/^    class _GBase$/;"	kind:class	language:C++	namespace:std
_GBase	./valarray_after.h	/^    class _GBase<_Array<_Tp> >$/;"	kind:class	language:C++	namespace:std
_GClos	./valarray_after.h	/^      _GClos (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_GClos	access:public	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
_GClos	./valarray_after.h	/^      _GClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_GClos	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
_GClos	./valarray_after.h	/^    struct _GClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_GBase<_Dom>
_GClos	./valarray_after.h	/^    struct _GClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_GBase<_Array<_Tp>>
_GLIBCXX_BEGIN_NAMESPACE	./boost_concept_check.h	/^_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)$/;"	kind:function	language:C++	signature:(__gnu_cxx)
_GLIBCXX_CLASS_REQUIRES	./boost_concept_check.h	/^#define _GLIBCXX_CLASS_REQUIRES(/;"	kind:macro	language:C++	signature:(_type_var,_ns,_concept)
_GLIBCXX_CLASS_REQUIRES2	./boost_concept_check.h	/^#define _GLIBCXX_CLASS_REQUIRES2(/;"	kind:macro	language:C++	signature:(_type_var1,_type_var2,_ns,_concept)
_GLIBCXX_CLASS_REQUIRES3	./boost_concept_check.h	/^#define _GLIBCXX_CLASS_REQUIRES3(/;"	kind:macro	language:C++	signature:(_type_var1,_type_var2,_type_var3,_ns,_concept)
_GLIBCXX_CLASS_REQUIRES4	./boost_concept_check.h	/^#define _GLIBCXX_CLASS_REQUIRES4(/;"	kind:macro	language:C++	signature:(_type_var1,_type_var2,_type_var3,_type_var4,_ns,_concept)
_GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT	./boost_concept_check.h	/^#define _GLIBCXX_DEFINE_BINARY_OPERATOR_CONSTRAINT(/;"	kind:macro	language:C++	signature:(_OP,_NAME)
_GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT	./boost_concept_check.h	/^#define _GLIBCXX_DEFINE_BINARY_PREDICATE_OP_CONSTRAINT(/;"	kind:macro	language:C++	signature:(_OP,_NAME)
_GLIBCXX_NUM_FACETS	./locale_facets.h	/^# define  _GLIBCXX_NUM_FACETS /;"	kind:macro	language:C++
_GLIBCXX_POSTYPES_H	./postypes.h	/^#define _GLIBCXX_POSTYPES_H /;"	kind:macro	language:C++
_GSLICE_ARRAY_H	./gslice_array.h	/^#define _GSLICE_ARRAY_H /;"	kind:macro	language:C++
_GSLICE_H	./gslice.h	/^#define _GSLICE_H /;"	kind:macro	language:C++
_GeneratorConcept	./boost_concept_check.h	/^  struct _GeneratorConcept$/;"	kind:struct	language:C++
_GeneratorConcept	./boost_concept_check.h	/^  struct _GeneratorConcept<_Func,void>$/;"	kind:struct	language:C++
_GeneratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_GeneratorConcept	typeref:typename:void	access:public	signature:()
_GeneratorConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_GeneratorConcept	typeref:typename:_Func	access:public
_Has_trivial_destructor	./stl_construct.h	/^	               _Has_trivial_destructor;$/;"	kind:typedef	language:C++	function:std::_Destroy	typeref:typename:std::__is_scalar<_Value_type>::__type
_Has_trivial_destructor	./stl_deque.h	/^	  _Has_trivial_destructor;$/;"	kind:typedef	language:C++	function:std::deque::_M_destroy_data	typeref:typename:std::__is_scalar<value_type>::__type
_IBase	./valarray_after.h	/^      _IBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_IBase	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
_IBase	./valarray_after.h	/^    class _IBase$/;"	kind:class	language:C++	namespace:std
_IClos	./valarray_after.h	/^      _IClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_IClos	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
_IClos	./valarray_after.h	/^      _IClos (const valarray<_Tp>& __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_IClos	access:public	signature:(const valarray<_Tp> & __a,const valarray<size_t> & __i)
_IClos	./valarray_after.h	/^    struct _IClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_IBase<_Dom>
_IClos	./valarray_after.h	/^    struct _IClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_IBase<valarray<_Tp>>
_INDIRECT_ARRAY_H	./indirect_array.h	/^#define _INDIRECT_ARRAY_H /;"	kind:macro	language:C++
_IOS_BASE_H	./ios_base.h	/^#define _IOS_BASE_H /;"	kind:macro	language:C++
_ITERATOR_BASE_FUNCS_H	./stl_iterator_base_funcs.h	/^#define _ITERATOR_BASE_FUNCS_H /;"	kind:macro	language:C++
_ITERATOR_BASE_TYPES_H	./stl_iterator_base_types.h	/^#define _ITERATOR_BASE_TYPES_H /;"	kind:macro	language:C++
_ITERATOR_H	./stl_iterator.h	/^#define _ITERATOR_H /;"	kind:macro	language:C++
_Identity	./stl_function.h	/^    struct _Identity : public unary_function<_Tp,_Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,_Tp>
_Impl	./locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const _Impl &)
_Impl	./locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
_Impl	./locale_classes.h	/^    _Impl(const char*, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
_Impl	./locale_classes.h	/^    _Impl(size_t) throw();$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(size_t)
_Impl	./locale_classes.h	/^  class locale::_Impl$/;"	kind:class	language:C++	class:std::locale
_Indexer	./gslice.h	/^      _Indexer(size_t, const valarray<size_t>&,$/;"	kind:prototype	language:C++	struct:std::gslice::_Indexer	access:public	signature:(size_t,const valarray<size_t> &,const valarray<size_t> &)
_Indexer	./gslice.h	/^    struct _Indexer$/;"	kind:struct	language:C++	class:std::gslice	access:private
_InputIteratorConcept	./boost_concept_check.h	/^  struct _InputIteratorConcept$/;"	kind:struct	language:C++
_InputIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_InputIteratorConcept	typeref:typename:void	access:public	signature:()
_InputIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_InputIteratorConcept	typeref:typename:_Tp	access:public
_InputValueType	./stl_algo.h	/^	_InputValueType;$/;"	kind:typedef	language:C++	function:std::partial_sort_copy	typeref:typename:iterator_traits<_InputIterator>::value_type
_IntegerConcept	./boost_concept_check.h	/^  struct _IntegerConcept {$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<int> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long long> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<short> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long long>$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };$/;"	kind:struct	language:C++
_IntegerConcept	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned short> { void __constraints(){} };$/;"	kind:struct	language:C++
_IntegerConcept::__constraints	./boost_concept_check.h	/^                                                { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<short> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_IntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned short> { void __constraints(){} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
_Integral	./basic_string.h	/^	  typedef typename std::__is_integer<_InIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::basic_string::_S_construct	typeref:typename:std::__is_integer<_InIterator>::__type
_Integral	./basic_string.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::basic_string::replace	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_bvector.h	/^	typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::assign	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_bvector.h	/^	typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::insert	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_bvector.h	/^	typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::vector	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_deque.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::deque::assign	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_deque.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::deque::deque	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_deque.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::deque::insert	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_list.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::list::assign	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_list.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::list::list	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_vector.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::assign	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_vector.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::insert	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	./stl_vector.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	kind:typedef	language:C++	function:std::vector::vector	typeref:typename:std::__is_integer<_InputIterator>::__type
_Ios_Fmtflags	./ios_base.h	/^  enum _Ios_Fmtflags $/;"	kind:enum	language:C++	namespace:std
_Ios_Iostate	./ios_base.h	/^  enum _Ios_Iostate$/;"	kind:enum	language:C++	namespace:std
_Ios_Openmode	./ios_base.h	/^  enum _Ios_Openmode $/;"	kind:enum	language:C++	namespace:std
_Ios_Seekdir	./ios_base.h	/^  enum _Ios_Seekdir $/;"	kind:enum	language:C++	namespace:std
_IsUnused	./boost_concept_check.h	/^	__c _IsUnused(__n, __t),$/;"	kind:local	language:C++	function:_SequenceConcept::__constraints	typeref:typename:_Sequence __c	file:
_IsUnused	./boost_concept_check.h	/^        __c _IsUnused(__kc),$/;"	kind:local	language:C++	function:_SortedAssociativeContainerConcept::__constraints	typeref:typename:_SortedAssociativeContainer __c	file:
_IsUnused	./boost_concept_check.h	/^        __c2 _IsUnused(__first, __last),$/;"	kind:local	language:C++	function:_SortedAssociativeContainerConcept::__constraints	typeref:typename:_SortedAssociativeContainer __c __c2	file:
_IsUnused	./boost_concept_check.h	/^        __c2 _IsUnused(__first, __last);$/;"	kind:local	language:C++	function:_SequenceConcept::__constraints	typeref:typename:_Sequence __c __c2	file:
_IsUnused	./boost_concept_check.h	/^        __c3 _IsUnused(__first, __last, __kc);$/;"	kind:local	language:C++	function:_SortedAssociativeContainerConcept::__constraints	typeref:typename:_SortedAssociativeContainer __c __c2 __c3	file:
_IsUnused	./boost_concept_check.h	/^      _Const_reference __r _IsUnused = __c.back();$/;"	kind:local	language:C++	function:_BackInsertionSequenceConcept::__const_constraints	typeref:typename:_Const_reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _Const_reference __r _IsUnused = __c.front();$/;"	kind:local	language:C++	function:_SequenceConcept::__const_constraints	typeref:typename:_Const_reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _Const_reference __r _IsUnused = __c[__n];$/;"	kind:local	language:C++	function:_RandomAccessContainerConcept::__constraints	typeref:typename:_Const_reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _Ref __r _IsUnused = *__i;$/;"	kind:local	language:C++	function:_ForwardIteratorConcept::__constraints	typeref:typename:_Ref __r	file:
_IsUnused	./boost_concept_check.h	/^      _Reference __r _IsUnused = __c.back();$/;"	kind:local	language:C++	function:_BackInsertionSequenceConcept::__constraints	typeref:typename:_Reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _Reference __r _IsUnused = __c.front();$/;"	kind:local	language:C++	function:_SequenceConcept::__constraints	typeref:typename:_Reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _Reference __r _IsUnused = __c[__i];$/;"	kind:local	language:C++	function:_Mutable_RandomAccessContainerConcept::__constraints	typeref:typename:_Reference __r	file:
_IsUnused	./boost_concept_check.h	/^      _To __y _IsUnused = __x;$/;"	kind:local	language:C++	function:_ConvertibleConcept::__constraints	typeref:typename:_To __y	file:
_IsUnused	./boost_concept_check.h	/^      _Tp __a _IsUnused;                \/\/ require default constructor$/;"	kind:local	language:C++	function:_DefaultConstructibleConcept::__constraints	typeref:typename:_Tp __a	file:
_IsUnused	./boost_concept_check.h	/^      _Tp __b _IsUnused(__a);$/;"	kind:local	language:C++	function:_SGIAssignableConcept::__constraints	typeref:typename:_Tp __b	file:
_IsUnused	./boost_concept_check.h	/^      _Tp __c _IsUnused(__a);           \/\/ require const copy constructor$/;"	kind:local	language:C++	function:_CopyConstructibleConcept::__const_constraints	typeref:typename:_Tp __c	file:
_IsUnused	./boost_concept_check.h	/^      _Tp __c _IsUnused(__b);$/;"	kind:local	language:C++	function:_SGIAssignableConcept::__const_constraints	typeref:typename:_Tp __c	file:
_IsUnused	./boost_concept_check.h	/^      _Tp* __ptr _IsUnused = &__a;      \/\/ require address of operator$/;"	kind:local	language:C++	function:_CopyConstructibleConcept::__constraints	typeref:typename:_Tp * __ptr	file:
_IsUnused	./boost_concept_check.h	/^      const _Return& __r _IsUnused = __f();\/\/ require operator() member function$/;"	kind:local	language:C++	function:_GeneratorConcept::__constraints	typeref:typename:const _Return & __r	file:
_IsUnused	./boost_concept_check.h	/^      const _Tp* __ptr _IsUnused = &__a; \/\/ require const address of operator$/;"	kind:local	language:C++	function:_CopyConstructibleConcept::__const_constraints	typeref:typename:const _Tp * __ptr	file:
_IsUnused	./boost_concept_check.h	/^    bool __x _IsUnused = __t;$/;"	kind:local	language:C++	function:__aux_require_boolean_expr	typeref:typename:bool __x	file:
_IsUnused	./boost_concept_check.h	/^#define _IsUnused /;"	kind:macro	language:C++
_Is_POD	./stl_uninitialized.h	/^      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;$/;"	kind:typedef	language:C++	function:std::uninitialized_copy	typeref:typename:std::__is_scalar<_ValueType>::__type
_Is_POD	./stl_uninitialized.h	/^      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;$/;"	kind:typedef	language:C++	function:std::uninitialized_fill	typeref:typename:std::__is_scalar<_ValueType>::__type
_Is_POD	./stl_uninitialized.h	/^      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;$/;"	kind:typedef	language:C++	function:std::uninitialized_fill_n	typeref:typename:std::__is_scalar<_ValueType>::__type
_IterCategory	./stl_deque.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::deque::_M_assign_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterCategory	./stl_deque.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::deque::_M_initialize_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterCategory	./stl_deque.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::deque::_M_insert_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterCategory	./stl_vector.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::vector::_M_assign_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterCategory	./stl_vector.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::vector::_M_initialize_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterCategory	./stl_vector.h	/^	    iterator_category _IterCategory;$/;"	kind:typedef	language:C++	function:std::vector::_M_insert_dispatch	typeref:typename:std::iterator_traits<_InputIterator>::iterator_category
_IterType	./stl_algo.h	/^	_IterType;$/;"	kind:typedef	language:C++	function:std::rotate	typeref:typename:iterator_traits<_ForwardIterator>::iterator_category
_Iterator	./boost_concept_check.h	/^      typedef typename _ForwardContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	function:_Mutable_ForwardContainerConcept::__constraints	typeref:typename:_ForwardContainer::iterator
_Iterator	./boost_concept_check.h	/^    typedef typename _AssociativeContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::iterator	access:public
_Iterator	./boost_concept_check.h	/^    typedef typename _Container::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::iterator	access:public
_Iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::iterator	access:public
_Iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::iterator	access:public
_Iterator	./boost_concept_check.h	/^    typedef typename _SortedAssociativeContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::iterator	access:public
_Key_alloc_type	./stl_multiset.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc::template rebind<_Key>::other	access:private
_Key_alloc_type	./stl_set.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc::template rebind<_Key>::other	access:private
_Key_type	./boost_concept_check.h	/^      typedef typename _SimpleAssociativeContainer::key_type _Key_type;$/;"	kind:typedef	language:C++	function:_PairAssociativeContainerConcept::__constraints	typeref:typename:_SimpleAssociativeContainer::key_type
_Key_type	./boost_concept_check.h	/^      typedef typename _SimpleAssociativeContainer::key_type _Key_type;$/;"	kind:typedef	language:C++	function:_SimpleAssociativeContainerConcept::__constraints	typeref:typename:_SimpleAssociativeContainer::key_type
_LIST_H	./stl_list.h	/^#define _LIST_H /;"	kind:macro	language:C++
_LOCALE_CLASSES_H	./locale_classes.h	/^#define _LOCALE_CLASSES_H /;"	kind:macro	language:C++
_LOCALE_FACETS_H	./locale_facets.h	/^#define _LOCALE_FACETS_H /;"	kind:macro	language:C++
_LOCALE_FWD_H	./localefwd.h	/^#define _LOCALE_FWD_H /;"	kind:macro	language:C++
_LessThanComparableConcept	./boost_concept_check.h	/^  struct _LessThanComparableConcept$/;"	kind:struct	language:C++
_LessThanComparableConcept::__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_LessThanComparableConcept	typeref:typename:_Tp	access:public
_LessThanComparableConcept::__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_LessThanComparableConcept	typeref:typename:_Tp	access:public
_LessThanComparableConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_LessThanComparableConcept	typeref:typename:void	access:public	signature:()
_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node* _Link_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node *	access:public
_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node<_Tp>*           _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_node<_Tp> *	access:public
_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node<_Val>* _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node	typeref:typename:_Rb_tree_node<_Val> *	access:public
_Link_type	./stl_tree.h	/^      typedef const _Rb_tree_node<_Tp>*           _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Rb_tree_node<_Tp> *	access:public
_List_base	./stl_list.h	/^      _List_base(const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_List_base	access:public	signature:(const allocator_type & __a)
_List_base	./stl_list.h	/^    class _List_base$/;"	kind:class	language:C++	namespace:std
_List_const_iterator	./stl_list.h	/^      _List_const_iterator()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:()
_List_const_iterator	./stl_list.h	/^      _List_const_iterator(const _List_node_base* __x)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:(const _List_node_base * __x)
_List_const_iterator	./stl_list.h	/^      _List_const_iterator(const iterator& __x)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:(const iterator & __x)
_List_const_iterator	./stl_list.h	/^    struct _List_const_iterator$/;"	kind:struct	language:C++	namespace:std
_List_impl	./stl_list.h	/^	_List_impl(const _Node_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_List_base::_List_impl	access:public	signature:(const _Node_alloc_type & __a)
_List_impl	./stl_list.h	/^      struct _List_impl $/;"	kind:struct	language:C++	class:std::_List_base	inherits:_Node_alloc_type	access:protected
_List_iterator	./stl_list.h	/^      _List_iterator()$/;"	kind:function	language:C++	struct:std::_List_iterator	access:public	signature:()
_List_iterator	./stl_list.h	/^      _List_iterator(_List_node_base* __x)$/;"	kind:function	language:C++	struct:std::_List_iterator	access:public	signature:(_List_node_base * __x)
_List_iterator	./stl_list.h	/^    struct _List_iterator$/;"	kind:struct	language:C++	namespace:std
_List_node	./stl_list.h	/^    struct _List_node : public _List_node_base$/;"	kind:struct	language:C++	namespace:std	inherits:_List_node_base
_List_node_base	./stl_list.h	/^  struct _List_node_base$/;"	kind:struct	language:C++	namespace:std
_MAP_H	./stl_map.h	/^#define _MAP_H /;"	kind:macro	language:C++
_MASK_ARRAY_H	./mask_array.h	/^#define _MASK_ARRAY_H /;"	kind:macro	language:C++
_MULTIMAP_H	./stl_multimap.h	/^#define _MULTIMAP_H /;"	kind:macro	language:C++
_MULTISET_H	./stl_multiset.h	/^#define _MULTISET_H /;"	kind:macro	language:C++
_M_aday1	./locale_facets.h	/^      const _CharT*			_M_aday1;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday2	./locale_facets.h	/^      const _CharT*			_M_aday2;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday3	./locale_facets.h	/^      const _CharT*			_M_aday3;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday4	./locale_facets.h	/^      const _CharT*			_M_aday4;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday5	./locale_facets.h	/^      const _CharT*			_M_aday5;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday6	./locale_facets.h	/^      const _CharT*			_M_aday6;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_aday7	./locale_facets.h	/^      const _CharT*			_M_aday7;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_add_reference	./ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
_M_add_reference	./locale_classes.h	/^    _M_add_reference() const throw()$/;"	kind:function	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_add_reference	./locale_classes.h	/^    _M_add_reference() throw()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_allocate	./stl_bvector.h	/^      _M_allocate(size_t __n)$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:_Bit_type *	access:protected	signature:(size_t __n)
_M_allocate	./stl_vector.h	/^      _M_allocate(size_t __n)$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:_Tp *	access:public	signature:(size_t __n)
_M_allocate_and_copy	./stl_vector.h	/^        _M_allocate_and_copy(size_type __n,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:pointer	access:protected	signature:(size_type __n,_ForwardIterator __first,_ForwardIterator __last)
_M_allocate_map	./stl_deque.h	/^      _M_allocate_map(size_t __n)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp **	access:protected	signature:(size_t __n)
_M_allocate_node	./stl_deque.h	/^      _M_allocate_node()$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp *	access:protected	signature:()
_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:bool	access:public
_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:bool	access:public
_M_am	./locale_facets.h	/^      const _CharT*			_M_am;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_am_pm	./locale_facets.h	/^      _M_am_pm(const _CharT** __ampm) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __ampm) const
_M_am_pm_format	./locale_facets.h	/^      _M_am_pm_format(const _CharT* __ampm) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT * __ampm) const
_M_am_pm_format	./locale_facets.h	/^      const _CharT*			_M_am_pm_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth01	./locale_facets.h	/^      const _CharT*			_M_amonth01;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth02	./locale_facets.h	/^      const _CharT*			_M_amonth02;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth03	./locale_facets.h	/^      const _CharT*			_M_amonth03;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth04	./locale_facets.h	/^      const _CharT*			_M_amonth04;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth05	./locale_facets.h	/^      const _CharT*			_M_amonth05;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth06	./locale_facets.h	/^      const _CharT*			_M_amonth06;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth07	./locale_facets.h	/^      const _CharT*			_M_amonth07;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth08	./locale_facets.h	/^      const _CharT*			_M_amonth08;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth09	./locale_facets.h	/^      const _CharT*			_M_amonth09;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth10	./locale_facets.h	/^      const _CharT*			_M_amonth10;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth11	./locale_facets.h	/^      const _CharT*			_M_amonth11;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_amonth12	./locale_facets.h	/^      const _CharT*			_M_amonth12;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_array	./gslice_array.h	/^      _Array<_Tp>    _M_array;$/;"	kind:member	language:C++	class:std::gslice_array	typeref:typename:_Array<_Tp>	access:private
_M_array	./indirect_array.h	/^      const _Array<_Tp>	 _M_array;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const _Array<_Tp>	access:private
_M_array	./mask_array.h	/^      const _Array<_Tp>  _M_array;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const _Array<_Tp>	access:private
_M_array	./slice_array.h	/^      const _Array<_Tp> _M_array;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const _Array<_Tp>	access:private
_M_array	./valarray_after.h	/^      const _Array<_Tp>       _M_array;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const _Array<_Tp>	access:private
_M_array	./valarray_before.h	/^      const _Array<_Tp> _M_array;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const _Array<_Tp>	access:private
_M_assign	./basic_string.h	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
_M_assign_aux	./stl_bvector.h	/^      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_assign_aux	./stl_bvector.h	/^      _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_assign_aux	./stl_deque.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_assign_aux	./stl_deque.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_assign_aux	./stl_vector.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_assign_aux	./stl_vector.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_assign_dispatch	./stl_bvector.h	/^      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_assign_dispatch	./stl_bvector.h	/^      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
_M_assign_dispatch	./stl_deque.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_assign_dispatch	./stl_deque.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
_M_assign_dispatch	./stl_list.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_assign_dispatch	./stl_list.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
_M_assign_dispatch	./stl_vector.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_assign_dispatch	./stl_vector.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
_M_at_eof	./streambuf_iterator.h	/^      _M_at_eof() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
_M_atoms	./locale_facets.h	/^      _CharT				_M_atoms[money_base::_S_end];$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT[]	access:public
_M_atoms_in	./locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_atoms_out	./locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_begin	./stl_tree.h	/^      _M_begin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:() const
_M_begin	./stl_tree.h	/^      _M_begin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:()
_M_bit	./locale_facets.h	/^      mask                      _M_bit[16];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:mask[16]	access:protected
_M_buffer	./stl_tempbuf.h	/^      pointer    _M_buffer;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:pointer	access:protected
_M_bump_down	./stl_bvector.h	/^    _M_bump_down()$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:()
_M_bump_up	./stl_bvector.h	/^    _M_bump_up()$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:()
_M_c	./streambuf_iterator.h	/^      mutable int_type		_M_c;$/;"	kind:member	language:C++	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
_M_c_locale_codecvt	./codecvt.h	/^      __c_locale			_M_c_locale_codecvt;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:__c_locale	access:protected
_M_c_locale_collate	./locale_facets.h	/^      __c_locale			_M_c_locale_collate;$/;"	kind:member	language:C++	class:std::collate	typeref:typename:__c_locale	access:protected
_M_c_locale_ctype	./locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__c_locale	access:protected
_M_c_locale_messages	./locale_facets.h	/^      __c_locale			_M_c_locale_messages;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:__c_locale	access:protected
_M_c_locale_timepunct	./locale_facets.h	/^      __c_locale			_M_c_locale_timepunct;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:__c_locale	access:protected
_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
_M_cache_locale	./basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
_M_caches	./locale_classes.h	/^    const facet**			_M_caches;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_call_callbacks	./ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
_M_callbacks	./ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
_M_capacity	./basic_string.h	/^	size_type		_M_capacity;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
_M_check	./basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
_M_check_equal_allocators	./stl_list.h	/^      _M_check_equal_allocators(list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(list & __x)
_M_check_length	./basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
_M_check_same_name	./locale_classes.h	/^    _M_check_same_name()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
_M_clear	./stl_list.h	/^      _M_clear();$/;"	kind:prototype	language:C++	class:std::_List_base	typeref:typename:void	access:public	signature:()
_M_clone	./basic_string.h	/^	_M_clone(const _Alloc&, size_type __res = 0);$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc &,size_type __res=0)
_M_clone_node	./stl_tree.h	/^      _M_clone_node(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Const_Link_type __x)
_M_closure	./valarray_after.h	/^      const _Clos _M_closure;$/;"	kind:member	language:C++	class:std::_Expr	typeref:typename:const _Clos	access:private
_M_coalesce	./locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
_M_color	./stl_tree.h	/^    _Rb_tree_color	_M_color;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Rb_tree_color	access:public
_M_compare	./locale_facets.h	/^      _M_compare(const _CharT*, const _CharT*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
_M_compare	./locale_facets.h	/^    collate<char>::_M_compare(const char*, const char*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
_M_compare	./locale_facets.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
_M_convert_from_char	./locale_facets.h	/^      _M_convert_from_char(char*) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:string_type	access:protected	signature:(char *) const
_M_convert_to_char	./locale_facets.h	/^      _M_convert_to_char(const string_type& __msg) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:char *	access:protected	signature:(const string_type & __msg) const
_M_convert_to_wmask	./locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
_M_copy	./basic_string.h	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_M_copy	./stl_tree.h	/^      _M_copy(_Const_Link_type __x, _Link_type __p);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:private	signature:(_Const_Link_type __x,_Link_type __p)
_M_copy	./stl_tree.h	/^    _M_copy(_Const_Link_type __x, _Link_type __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KoV,_Compare,_Alloc>::_Link_type	signature:(_Const_Link_type __x,_Link_type __p)
_M_copy_aligned	./stl_bvector.h	/^    _M_copy_aligned(const_iterator __first, const_iterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:protected	signature:(const_iterator __first,const_iterator __last,iterator __result)
_M_count	./gslice.h	/^      size_t _M_count;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public
_M_create_node	./stl_list.h	/^      _M_create_node(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:_Node *	access:protected	signature:(const value_type & __x)
_M_create_node	./stl_tree.h	/^      _M_create_node(const value_type& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(const value_type & __x)
_M_create_nodes	./stl_deque.h	/^      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __nstart,_Tp ** __nfinish)
_M_create_nodes	./stl_deque.h	/^    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(_Tp ** __nstart,_Tp ** __nfinish)
_M_ctype	./basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
_M_cur	./stl_deque.h	/^      _Tp* _M_cur;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
_M_curr_symbol	./locale_facets.h	/^      const _CharT*			_M_curr_symbol;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
_M_curr_symbol_size	./locale_facets.h	/^      size_t                            _M_curr_symbol_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
_M_current	./stl_iterator.h	/^      _Iterator _M_current;$/;"	kind:member	language:C++	class:__normal_iterator	typeref:typename:_Iterator	access:protected
_M_data	./basic_string.h	/^      _M_data() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:() const
_M_data	./basic_string.h	/^      _M_data(_CharT* __p)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_CharT * __p)
_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:__cache_type *	access:protected
_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:__cache_type *	access:private
_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::numpunct	typeref:typename:__cache_type *	access:protected
_M_data	./stl_list.h	/^      _Tp _M_data;                \/\/\/< User's data.$/;"	kind:member	language:C++	struct:std::_List_node	typeref:typename:_Tp	access:public
_M_data	./valarray_array.h	/^      _Tp* const __restrict__ _M_data;$/;"	kind:member	language:C++	struct:std::_Array	typeref:typename:_Tp * const 	access:public
_M_dataplus	./basic_string.h	/^      mutable _Alloc_hider	_M_dataplus;$/;"	kind:member	language:C++	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
_M_date_era_format	./locale_facets.h	/^      const _CharT*			_M_date_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_date_format	./locale_facets.h	/^      const _CharT*			_M_date_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_date_formats	./locale_facets.h	/^      _M_date_formats(const _CharT** __date) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __date) const
_M_date_time_era_format	./locale_facets.h	/^      const _CharT*			_M_date_time_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_date_time_format	./locale_facets.h	/^      const _CharT*			_M_date_time_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_date_time_formats	./locale_facets.h	/^      _M_date_time_formats(const _CharT** __dt) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __dt) const
_M_day1	./locale_facets.h	/^      const _CharT*			_M_day1;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day2	./locale_facets.h	/^      const _CharT*			_M_day2;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day3	./locale_facets.h	/^      const _CharT*			_M_day3;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day4	./locale_facets.h	/^      const _CharT*			_M_day4;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day5	./locale_facets.h	/^      const _CharT*			_M_day5;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day6	./locale_facets.h	/^      const _CharT*			_M_day6;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_day7	./locale_facets.h	/^      const _CharT*			_M_day7;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_days	./locale_facets.h	/^      _M_days(const _CharT** __days) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __days) const
_M_days_abbreviated	./locale_facets.h	/^      _M_days_abbreviated(const _CharT** __days) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __days) const
_M_deallocate	./stl_bvector.h	/^      _M_deallocate()$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:void	access:protected	signature:()
_M_deallocate	./stl_vector.h	/^      _M_deallocate(_Tp* __p, size_t __n)$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
_M_deallocate_map	./stl_deque.h	/^      _M_deallocate_map(_Tp** __p, size_t __n)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __p,size_t __n)
_M_deallocate_node	./stl_deque.h	/^      _M_deallocate_node(_Tp* __p)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp * __p)
_M_decimal_point	./locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT	access:public
_M_decimal_point	./locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_decrement_use	./gslice.h	/^      _M_decrement_use()$/;"	kind:function	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public	signature:()
_M_del	./locale_facets.h	/^      bool			_M_del;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:bool	access:protected
_M_destroy	./basic_string.h	/^	_M_destroy(const _Alloc&) throw();$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc &)
_M_destroy_data	./stl_deque.h	/^        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,const _Alloc1 &)
_M_destroy_data	./stl_deque.h	/^      _M_destroy_data(iterator __first, iterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,const std::allocator<_Tp> &)
_M_destroy_data_aux	./stl_deque.h	/^      _M_destroy_data_aux(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last)
_M_destroy_data_dispatch	./stl_deque.h	/^      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,__false_type)
_M_destroy_data_dispatch	./stl_deque.h	/^      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator,iterator,__true_type)
_M_destroy_node	./stl_tree.h	/^      _M_destroy_node(_Link_type __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:protected	signature:(_Link_type __p)
_M_destroy_nodes	./stl_deque.h	/^      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __nstart,_Tp ** __nfinish)
_M_destroy_nodes	./stl_deque.h	/^    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(_Tp ** __nstart,_Tp ** __nfinish)
_M_disjunct	./basic_string.h	/^      _M_disjunct(const _CharT* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
_M_dispose	./basic_string.h	/^	_M_dispose(const _Alloc& __a)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc & __a)
_M_dispose_callbacks	./ios_base.h	/^    _M_dispose_callbacks(void);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
_M_end	./stl_tree.h	/^      _M_end() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:() const
_M_end	./stl_tree.h	/^      _M_end()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:()
_M_end_of_storage	./stl_bvector.h	/^	_Bit_type* 	_M_end_of_storage;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_type *	access:public
_M_end_of_storage	./stl_vector.h	/^	_Tp*           _M_end_of_storage;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
_M_equal	./stream_iterator.h	/^      _M_equal(const istream_iterator& __x) const$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:bool	access:public	signature:(const istream_iterator & __x) const
_M_erase	./stl_list.h	/^      _M_erase(iterator __position)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position)
_M_erase	./stl_tree.h	/^      _M_erase(_Link_type __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:private	signature:(_Link_type __x)
_M_erase	./stl_tree.h	/^    _M_erase(_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_Link_type __x)
_M_erase_at_begin	./stl_deque.h	/^      _M_erase_at_begin(iterator __pos)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos)
_M_erase_at_end	./stl_bvector.h	/^    _M_erase_at_end(iterator __pos)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos)
_M_erase_at_end	./stl_deque.h	/^      _M_erase_at_end(iterator __pos)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos)
_M_erase_at_end	./stl_vector.h	/^      _M_erase_at_end(pointer __pos)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(pointer __pos)
_M_exception	./ios_base.h	/^    iostate		_M_exception;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:iostate	access:protected
_M_expr	./valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const _Dom &	access:private
_M_expr	./valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	kind:member	language:C++	class:std::_IBase	typeref:typename:const _Dom &	access:private
_M_expr	./valarray_before.h	/^      const _Arg& _M_expr;$/;"	kind:member	language:C++	class:std::_UnBase	typeref:typename:const _Arg &	access:private
_M_expr	./valarray_before.h	/^      const _Dom& _M_expr;$/;"	kind:member	language:C++	class:std::_FunBase	typeref:typename:const _Dom &	access:private
_M_expr	./valarray_before.h	/^      const _Dom& _M_expr;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const _Dom &	access:private
_M_expr1	./valarray_before.h	/^      const _Clos& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase2	typeref:typename:const _Clos &	access:private
_M_expr1	./valarray_before.h	/^      const _FirstArg& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase	typeref:typename:const _FirstArg &	access:private
_M_expr1	./valarray_before.h	/^      const _Vt& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase1	typeref:typename:const _Vt &	access:private
_M_expr2	./valarray_before.h	/^      const _Clos& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase1	typeref:typename:const _Clos &	access:private
_M_expr2	./valarray_before.h	/^      const _SecondArg& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase	typeref:typename:const _SecondArg &	access:private
_M_expr2	./valarray_before.h	/^      const _Vt& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase2	typeref:typename:const _Vt &	access:private
_M_extract	./locale_facets.h	/^        _M_extract(iter_type __s, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,ios_base & __io,ios_base::iostate & __err,string & __digits) const
_M_extract_float	./locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string & __xtrc) const
_M_extract_int	./locale_facets.h	/^        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT & __v) const
_M_extract_name	./locale_facets.h	/^      _M_extract_name(iter_type __beg, iter_type __end, int& __member,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,int & __member,const _CharT ** __names,size_t __indexlen,ios_base & __io,ios_base::iostate & __err) const
_M_extract_num	./locale_facets.h	/^      _M_extract_num(iter_type __beg, iter_type __end, int& __member,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,int & __member,int __min,int __max,size_t __len,ios_base & __io,ios_base::iostate & __err) const
_M_extract_via_format	./locale_facets.h	/^      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm,const _CharT * __format) const
_M_facets	./locale_classes.h	/^    const facet**			_M_facets;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_facets_size	./locale_classes.h	/^    size_t				_M_facets_size;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:size_t	access:private
_M_failed	./streambuf_iterator.h	/^      bool		_M_failed;$/;"	kind:member	language:C++	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
_M_falsename	./locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_falsename_size	./locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_fill	./basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:char_type	access:protected
_M_fill_assign	./stl_bvector.h	/^    _M_fill_assign(size_t __n, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_t __n,bool __x)
_M_fill_assign	./stl_deque.h	/^      _M_fill_assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
_M_fill_assign	./stl_list.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
_M_fill_assign	./stl_vector.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
_M_fill_init	./basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:bool	access:protected
_M_fill_initialize	./stl_deque.h	/^      _M_fill_initialize(const value_type& __value);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type & __value)
_M_fill_initialize	./stl_list.h	/^      _M_fill_initialize(size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __x)
_M_fill_insert	./stl_bvector.h	/^    _M_fill_insert(iterator __position, size_type __n, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,size_type __n,bool __x)
_M_fill_insert	./stl_deque.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
_M_fill_insert	./stl_vector.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
_M_find	./locale_facets.h	/^        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 * __zero,size_t __len,_CharT2 __c) const
_M_find	./locale_facets.h	/^        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
_M_finish	./stl_bvector.h	/^	_Bit_iterator 	_M_finish;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_iterator	access:public
_M_finish	./stl_deque.h	/^	iterator _M_finish;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:iterator	access:public
_M_finish	./stl_vector.h	/^	_Tp*           _M_finish;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
_M_first	./stl_deque.h	/^      _Tp* _M_first;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
_M_flags	./ios_base.h	/^    fmtflags		_M_flags;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:protected
_M_fn	./ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
_M_frac_digits	./locale_facets.h	/^      int				_M_frac_digits;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:int	access:public
_M_func	./valarray_before.h	/^      value_type (*_M_func)(_Arg);$/;"	kind:member	language:C++	class:std::_FunBase	typeref:typename:value_type (*)(_Arg)	access:private
_M_get	./streambuf_iterator.h	/^      _M_get() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
_M_get_Bit_allocator	./stl_bvector.h	/^      _M_get_Bit_allocator() const$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:const _Bit_alloc_type &	access:public	signature:() const
_M_get_Bit_allocator	./stl_bvector.h	/^      _M_get_Bit_allocator()$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:_Bit_alloc_type &	access:public	signature:()
_M_get_Node_allocator	./stl_list.h	/^      _M_get_Node_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:const _Node_alloc_type &	access:public	signature:() const
_M_get_Node_allocator	./stl_list.h	/^      _M_get_Node_allocator()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_Node_alloc_type &	access:public	signature:()
_M_get_Node_allocator	./stl_tree.h	/^      _M_get_Node_allocator() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Node_allocator &	access:public	signature:() const
_M_get_Node_allocator	./stl_tree.h	/^      _M_get_Node_allocator()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Node_allocator &	access:public	signature:()
_M_get_Tp_allocator	./stl_deque.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:const _Tp_alloc_type &	access:protected	signature:() const
_M_get_Tp_allocator	./stl_deque.h	/^      _M_get_Tp_allocator()$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp_alloc_type &	access:protected	signature:()
_M_get_Tp_allocator	./stl_list.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_Tp_alloc_type	access:public	signature:() const
_M_get_Tp_allocator	./stl_vector.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:const _Tp_alloc_type &	access:public	signature:() const
_M_get_Tp_allocator	./stl_vector.h	/^      _M_get_Tp_allocator()$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:_Tp_alloc_type &	access:public	signature:()
_M_get_map_allocator	./stl_deque.h	/^      _M_get_map_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Map_alloc_type	access:protected	signature:() const
_M_get_node	./stl_list.h	/^      _M_get_node()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_List_node<_Tp> *	access:protected	signature:()
_M_get_node	./stl_tree.h	/^      _M_get_node()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node *	access:protected	signature:()
_M_getloc	./ios_base.h	/^    _M_getloc() const { return _M_ios_locale; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
_M_grab	./basic_string.h	/^	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc & __alloc1,const _Alloc & __alloc2)
_M_group_float	./locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
_M_group_int	./locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
_M_grouping	./locale_facets.h	/^      const char*			_M_grouping;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const char *	access:public
_M_grouping	./locale_facets.h	/^      const char*			_M_grouping;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
_M_grouping_size	./locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
_M_grouping_size	./locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_grow_words	./ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
_M_header	./stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Rb_tree_node_base	access:public
_M_ibegin	./basic_string.h	/^      _M_ibegin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
_M_id	./locale_classes.h	/^    _M_id() const;$/;"	kind:prototype	language:C++	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
_M_iend	./basic_string.h	/^      _M_iend() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
_M_impl	./locale_classes.h	/^    _Impl*		_M_impl;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
_M_impl	./stl_bvector.h	/^      _Bvector_impl _M_impl;$/;"	kind:member	language:C++	struct:std::_Bvector_base	typeref:typename:_Bvector_impl	access:protected
_M_impl	./stl_deque.h	/^      _Deque_impl _M_impl;$/;"	kind:member	language:C++	class:std::_Deque_base	typeref:typename:_Deque_impl	access:protected
_M_impl	./stl_list.h	/^      _List_impl _M_impl;$/;"	kind:member	language:C++	class:std::_List_base	typeref:typename:_List_impl	access:protected
_M_impl	./stl_tree.h	/^      _Rb_tree_impl<_Compare> _M_impl;$/;"	kind:member	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_impl<_Compare>	access:protected
_M_impl	./stl_vector.h	/^      _Vector_impl _M_impl;$/;"	kind:member	language:C++	struct:std::_Vector_base	typeref:typename:_Vector_impl	access:public
_M_incr	./stl_bvector.h	/^    _M_incr(ptrdiff_t __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:(ptrdiff_t __i)
_M_increment_use	./gslice.h	/^      _M_increment_use()$/;"	kind:function	language:C++	struct:std::gslice::_Indexer	typeref:typename:void	access:public	signature:()
_M_index	./gslice.h	/^      valarray<size_t> _M_index; \/\/ Linear array of referenced indices$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
_M_index	./gslice.h	/^    _Indexer* _M_index;$/;"	kind:member	language:C++	class:std::gslice	typeref:typename:_Indexer *	access:private
_M_index	./gslice_array.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::gslice_array	typeref:typename:const valarray<size_t> &	access:private
_M_index	./indirect_array.h	/^      const _Array<size_t> _M_index;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const _Array<size_t>	access:private
_M_index	./ios_base.h	/^      int			_M_index;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
_M_index	./locale_classes.h	/^    mutable size_t		_M_index;$/;"	kind:member	language:C++	class:std::locale::id	typeref:typename:size_t	access:private
_M_index	./valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const valarray<size_t> &	access:private
_M_index	./valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::_IBase	typeref:typename:const valarray<size_t> &	access:private
_M_init	./ios_base.h	/^    _M_init();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:()
_M_init	./stl_list.h	/^      _M_init()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:void	access:public	signature:()
_M_init_facet	./locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
_M_initialize	./stl_bvector.h	/^    _M_initialize(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n)
_M_initialize_buffer	./stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp& __val, __false_type)$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:protected	signature:(const _Tp & __val,__false_type)
_M_initialize_buffer	./stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp&, __true_type) { }$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:protected	signature:(const _Tp &,__true_type)
_M_initialize_ctype	./locale_facets.h	/^      _M_initialize_ctype();$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:void	access:protected	signature:()
_M_initialize_dispatch	./stl_bvector.h	/^      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_initialize_dispatch	./stl_bvector.h	/^      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
_M_initialize_dispatch	./stl_deque.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_initialize_dispatch	./stl_deque.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
_M_initialize_dispatch	./stl_list.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_initialize_dispatch	./stl_list.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
_M_initialize_dispatch	./stl_vector.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
_M_initialize_dispatch	./stl_vector.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __value,__true_type)
_M_initialize_map	./stl_deque.h	/^      void _M_initialize_map(size_t);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(size_t)
_M_initialize_map	./stl_deque.h	/^    _M_initialize_map(size_t __num_elements)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(size_t __num_elements)
_M_initialize_moneypunct	./locale_facets.h	/^       _M_initialize_moneypunct(__c_locale __cloc = NULL,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL,const char * __name=NULL)
_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
_M_initialize_numpunct	./locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = NULL);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL)
_M_initialize_numpunct	./locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_initialize_numpunct	./locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_initialize_range	./stl_bvector.h	/^      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_initialize_range	./stl_bvector.h	/^      _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_initialize_timepunct	./locale_facets.h	/^      _M_initialize_timepunct(__c_locale __cloc = NULL);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL)
_M_initialize_timepunct	./locale_facets.h	/^    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_initialize_timepunct	./locale_facets.h	/^    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_insert	./locale_facets.h	/^        _M_insert(iter_type __s, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,const string_type & __digits) const
_M_insert	./stl_list.h	/^      _M_insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position,const value_type & __x)
_M_insert	./stl_tree.h	/^      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:private	signature:(_Base_ptr __x,_Base_ptr __y,const value_type & __v)
_M_insert	./stl_tree.h	/^      _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:private	signature:(_Const_Base_ptr __x,_Const_Base_ptr __y,const value_type & __v)
_M_insert	./stl_tree.h	/^    _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(_Base_ptr __x,_Base_ptr __p,const _Val & __v)
_M_insert	./stl_tree.h	/^    _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(_Const_Base_ptr __x,_Const_Base_ptr __p,const _Val & __v)
_M_insert_aux	./stl_bvector.h	/^    _M_insert_aux(iterator __position, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,bool __x)
_M_insert_aux	./stl_deque.h	/^        _M_insert_aux(iterator __pos,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,size_type __n)
_M_insert_aux	./stl_deque.h	/^      _M_insert_aux(iterator __pos, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(iterator __pos,const value_type & __x)
_M_insert_aux	./stl_deque.h	/^      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
_M_insert_aux	./stl_vector.h	/^      _M_insert_aux(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,const value_type & __x)
_M_insert_dispatch	./stl_bvector.h	/^      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __x,__true_type)
_M_insert_dispatch	./stl_bvector.h	/^      _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
_M_insert_dispatch	./stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
_M_insert_dispatch	./stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __x,__true_type)
_M_insert_dispatch	./stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
_M_insert_dispatch	./stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __val,__true_type)
_M_insert_equal	./stl_tree.h	/^        _M_insert_equal(_InputIterator __first, _InputIterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(_II __first, _II __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_II __first,_II __last)
_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const value_type & __x)
_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(const_iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const_iterator __position,const value_type & __x)
_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Val & __v)
_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(const_iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const_iterator __position,const _Val & __v)
_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(iterator __position,const _Val & __v)
_M_insert_equal_lower	./stl_tree.h	/^      _M_insert_equal_lower(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const value_type & __x)
_M_insert_equal_lower	./stl_tree.h	/^    _M_insert_equal_lower(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Val & __v)
_M_insert_float	./locale_facets.h	/^        _M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
_M_insert_int	./locale_facets.h	/^        _M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
_M_insert_lower	./stl_tree.h	/^      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:private	signature:(_Base_ptr __x,_Base_ptr __y,const value_type & __v)
_M_insert_lower	./stl_tree.h	/^    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(_Base_ptr __x,_Base_ptr __p,const _Val & __v)
_M_insert_range	./stl_bvector.h	/^      _M_insert_range(iterator __pos, _InputIterator __first, $/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_insert_range	./stl_bvector.h	/^      _M_insert_range(iterator __position, _ForwardIterator __first, $/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_insert_unique	./stl_tree.h	/^        _M_insert_unique(_InputIterator __first, _InputIterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(_II __first, _II __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_II __first,_II __last)
_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<iterator,bool>	access:public	signature:(const value_type & __x)
_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(const_iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const_iterator __position,const value_type & __x)
_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:pair<typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator,bool>	signature:(const _Val & __v)
_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(const_iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const_iterator __position,const _Val & __v)
_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(iterator __position,const _Val & __v)
_M_install_cache	./locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
_M_install_facet	./locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
_M_ios_locale	./ios_base.h	/^    locale		_M_ios_locale;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:locale	access:protected
_M_is_leaked	./basic_string.h	/^	_M_is_leaked() const$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
_M_is_shared	./basic_string.h	/^	_M_is_shared() const$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
_M_iter	./stl_raw_storage_iter.h	/^      _ForwardIterator _M_iter;$/;"	kind:member	language:C++	class:std::raw_storage_iterator	typeref:typename:_ForwardIterator	access:protected
_M_iword	./ios_base.h	/^      long	_M_iword;$/;"	kind:member	language:C++	struct:std::ios_base::_Words	typeref:typename:long	access:public
_M_key_compare	./stl_tree.h	/^	  _Key_compare		_M_key_compare;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Key_compare	access:public
_M_key_compare	./stl_tree.h	/^	  _Key_compare 		_M_key_compare;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Key_compare	access:public
_M_last	./stl_deque.h	/^      _Tp* _M_last;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
_M_leak	./basic_string.h	/^      _M_leak()    \/\/ for use in begin() & non-const op[]$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:()
_M_leak_hard	./basic_string.h	/^      _M_leak_hard();$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:()
_M_left	./stl_tree.h	/^    _Base_ptr		_M_left;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
_M_leftmost	./stl_tree.h	/^      _M_leftmost() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
_M_leftmost	./stl_tree.h	/^      _M_leftmost()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
_M_len	./stl_tempbuf.h	/^      size_type  _M_len;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
_M_length	./basic_string.h	/^	size_type		_M_length;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
_M_limit	./basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
_M_local_word	./ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words[]	access:protected
_M_map	./stl_deque.h	/^	_Tp** _M_map;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:_Tp **	access:public
_M_map_size	./stl_deque.h	/^	size_t _M_map_size;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:size_t	access:public
_M_mask	./mask_array.h	/^      const _Array<bool> _M_mask;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const _Array<bool>	access:private
_M_mask	./stl_bvector.h	/^    _Bit_type _M_mask;$/;"	kind:member	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_type	access:public
_M_month01	./locale_facets.h	/^      const _CharT*			_M_month01;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month02	./locale_facets.h	/^      const _CharT*			_M_month02;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month03	./locale_facets.h	/^      const _CharT*			_M_month03;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month04	./locale_facets.h	/^      const _CharT*			_M_month04;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month05	./locale_facets.h	/^      const _CharT*			_M_month05;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month06	./locale_facets.h	/^      const _CharT*			_M_month06;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month07	./locale_facets.h	/^      const _CharT*			_M_month07;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month08	./locale_facets.h	/^      const _CharT*			_M_month08;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month09	./locale_facets.h	/^      const _CharT*			_M_month09;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month10	./locale_facets.h	/^      const _CharT*			_M_month10;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month11	./locale_facets.h	/^      const _CharT*			_M_month11;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_month12	./locale_facets.h	/^      const _CharT*			_M_month12;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_months	./locale_facets.h	/^      _M_months(const _CharT** __months) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __months) const
_M_months_abbreviated	./locale_facets.h	/^      _M_months_abbreviated(const _CharT** __months) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __months) const
_M_move	./basic_string.h	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_M_msg	./ios_base.h	/^      string _M_msg;$/;"	kind:member	language:C++	class:std::ios_base::failure	typeref:typename:string	access:private
_M_mutate	./basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,size_type __len2)
_M_name_messages	./locale_facets.h	/^      const char*			_M_name_messages;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:const char *	access:protected
_M_name_timepunct	./locale_facets.h	/^      const char*			_M_name_timepunct;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:const char *	access:protected
_M_names	./locale_classes.h	/^    char**				_M_names;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:char **	access:private
_M_narrow	./locale_facets.h	/^      char                      _M_narrow[128];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[128]	access:protected
_M_narrow	./locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[]	access:protected
_M_narrow_init	./locale_facets.h	/^      void _M_narrow_init() const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_narrow_ok	./locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:bool	access:protected
_M_narrow_ok	./locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char	access:protected
_M_neg_format	./locale_facets.h	/^      money_base::pattern	        _M_neg_format;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:money_base::pattern	access:public
_M_negative_sign	./locale_facets.h	/^      const _CharT*			_M_negative_sign;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
_M_negative_sign_size	./locale_facets.h	/^      size_t                            _M_negative_sign_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
_M_new_elements_at_back	./stl_deque.h	/^      _M_new_elements_at_back(size_type __new_elements);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __new_elements)
_M_new_elements_at_front	./stl_deque.h	/^      _M_new_elements_at_front(size_type __new_elements);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __new_elements)
_M_next	./ios_base.h	/^      _Callback_list*		_M_next;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
_M_next	./stl_list.h	/^    _List_node_base* _M_next;   \/\/\/< Self-explanatory$/;"	kind:member	language:C++	struct:std::_List_node_base	typeref:typename:_List_node_base *	access:public
_M_node	./stl_deque.h	/^      _Map_pointer _M_node;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Map_pointer	access:public
_M_node	./stl_list.h	/^	_List_node_base _M_node;$/;"	kind:member	language:C++	struct:std::_List_base::_List_impl	typeref:typename:_List_node_base	access:public
_M_node	./stl_list.h	/^      _List_node_base* _M_node;$/;"	kind:member	language:C++	struct:std::_List_iterator	typeref:typename:_List_node_base *	access:public
_M_node	./stl_list.h	/^      const _List_node_base* _M_node;$/;"	kind:member	language:C++	struct:std::_List_const_iterator	typeref:typename:const _List_node_base *	access:public
_M_node	./stl_tree.h	/^      _Base_ptr _M_node;$/;"	kind:member	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Base_ptr	access:public
_M_node	./stl_tree.h	/^      _Base_ptr _M_node;$/;"	kind:member	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Base_ptr	access:public
_M_node_count	./stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:size_type	access:public
_M_num_get	./basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
_M_num_put	./basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
_M_off	./postypes.h	/^      streamoff	                _M_off;$/;"	kind:member	language:C++	class:std::fpos	typeref:typename:streamoff	access:private
_M_off	./slice_array.h	/^    size_t _M_off;                      \/\/ offset$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
_M_offset	./stl_bvector.h	/^    unsigned int _M_offset;$/;"	kind:member	language:C++	struct:std::_Bit_iterator_base	typeref:typename:unsigned int	access:public
_M_ok	./stream_iterator.h	/^      bool		_M_ok;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:bool	access:private
_M_original_len	./stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
_M_p	./basic_string.h	/^	_CharT* _M_p; \/\/ The actual data.$/;"	kind:member	language:C++	struct:std::basic_string::_Alloc_hider	typeref:typename:_CharT *	access:public
_M_p	./stl_bvector.h	/^    _Bit_type * _M_p;$/;"	kind:member	language:C++	struct:std::_Bit_iterator_base	typeref:typename:_Bit_type *	access:public
_M_p	./stl_bvector.h	/^    _Bit_type * _M_p;$/;"	kind:member	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_type *	access:public
_M_pad	./locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
_M_parent	./stl_tree.h	/^    _Base_ptr		_M_parent;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
_M_pm	./locale_facets.h	/^      const _CharT*			_M_pm;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_pop_back_aux	./stl_deque.h	/^      void _M_pop_back_aux();$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:()
_M_pop_front_aux	./stl_deque.h	/^      void _M_pop_front_aux();$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:()
_M_pos_format	./locale_facets.h	/^      money_base::pattern		_M_pos_format;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:money_base::pattern	access:public
_M_positive_sign	./locale_facets.h	/^      const _CharT*			_M_positive_sign;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
_M_positive_sign_size	./locale_facets.h	/^      size_t                            _M_positive_sign_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
_M_precision	./ios_base.h	/^    streamsize		_M_precision;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_pred	./stl_function.h	/^      _Predicate _M_pred;$/;"	kind:member	language:C++	class:std::binary_negate	typeref:typename:_Predicate	access:protected
_M_pred	./stl_function.h	/^      _Predicate _M_pred;$/;"	kind:member	language:C++	class:std::unary_negate	typeref:typename:_Predicate	access:protected
_M_prev	./stl_list.h	/^    _List_node_base* _M_prev;   \/\/\/< Self-explanatory$/;"	kind:member	language:C++	struct:std::_List_node_base	typeref:typename:_List_node_base *	access:public
_M_ptr	./stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	kind:member	language:C++	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
_M_ptr	./stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	kind:member	language:C++	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
_M_push_back_aux	./stl_deque.h	/^      void _M_push_back_aux(const value_type&);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type &)
_M_push_front_aux	./stl_deque.h	/^      void _M_push_front_aux(const value_type&);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type &)
_M_put	./locale_facets.h	/^      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(_CharT * __s,size_t __maxlen,const _CharT * __format,const tm * __tm) const
_M_put	./locale_facets.h	/^    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(char *,size_t,const char *,const tm *) const
_M_put	./locale_facets.h	/^    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(wchar_t *,size_t,const wchar_t *,const tm *) const
_M_put	./streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
_M_put_node	./stl_list.h	/^      _M_put_node(_List_node<_Tp>* __p)$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:void	access:protected	signature:(_List_node<_Tp> * __p)
_M_put_node	./stl_tree.h	/^      _M_put_node(_Rb_tree_node* __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:protected	signature:(_Rb_tree_node * __p)
_M_pword	./ios_base.h	/^      void*	_M_pword;$/;"	kind:member	language:C++	struct:std::ios_base::_Words	typeref:typename:void *	access:public
_M_range_check	./stl_bvector.h	/^    _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n) const
_M_range_check	./stl_deque.h	/^      _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __n) const
_M_range_check	./stl_vector.h	/^      _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n) const
_M_range_initialize	./stl_deque.h	/^        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_range_initialize	./stl_deque.h	/^        _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_range_initialize	./stl_vector.h	/^        _M_range_initialize(_ForwardIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_range_initialize	./stl_vector.h	/^        _M_range_initialize(_InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_range_insert	./stl_vector.h	/^        _M_range_insert(iterator __pos, _ForwardIterator __first,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_range_insert	./stl_vector.h	/^        _M_range_insert(iterator __pos, _InputIterator __first,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_range_insert_aux	./stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
_M_range_insert_aux	./stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _InputIterator __first,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
_M_read	./stream_iterator.h	/^      _M_read()$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:void	access:private	signature:()
_M_reallocate_map	./stl_deque.h	/^      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add,bool __add_at_front)
_M_refcopy	./basic_string.h	/^	_M_refcopy() throw()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
_M_refcount	./basic_string.h	/^	_Atomic_word		_M_refcount;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:_Atomic_word	access:public
_M_refcount	./ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
_M_refcount	./locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
_M_refcount	./locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
_M_refdata	./basic_string.h	/^	_M_refdata() throw()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
_M_remove_reference	./ios_base.h	/^      _M_remove_reference() $/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
_M_remove_reference	./locale_classes.h	/^    _M_remove_reference() const throw()$/;"	kind:function	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_remove_reference	./locale_classes.h	/^    _M_remove_reference() throw()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_rep	./basic_string.h	/^      _M_rep() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_Rep *	access:private	signature:() const
_M_replace_aux	./basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
_M_replace_categories	./locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
_M_replace_category	./locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
_M_replace_dispatch	./basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
_M_replace_dispatch	./basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_Integer __n,_Integer __val,__true_type)
_M_replace_facet	./locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
_M_replace_safe	./basic_string.h	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
_M_reserve_elements_at_back	./stl_deque.h	/^      _M_reserve_elements_at_back(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(size_type __n)
_M_reserve_elements_at_front	./stl_deque.h	/^      _M_reserve_elements_at_front(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(size_type __n)
_M_reserve_map_at_back	./stl_deque.h	/^      _M_reserve_map_at_back(size_type __nodes_to_add = 1)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add=1)
_M_reserve_map_at_front	./stl_deque.h	/^      _M_reserve_map_at_front(size_type __nodes_to_add = 1)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add=1)
_M_right	./stl_tree.h	/^    _Base_ptr		_M_right;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
_M_rightmost	./stl_tree.h	/^      _M_rightmost() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
_M_rightmost	./stl_tree.h	/^      _M_rightmost()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
_M_root	./stl_tree.h	/^      _M_root() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
_M_root	./stl_tree.h	/^      _M_root()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
_M_sbuf	./streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	kind:member	language:C++	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_sbuf	./streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	kind:member	language:C++	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_set_leaked	./basic_string.h	/^	_M_set_leaked()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
_M_set_length_and_sharable	./basic_string.h	/^	_M_set_length_and_sharable(size_type __n)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(size_type __n)
_M_set_node	./stl_deque.h	/^      _M_set_node(_Map_pointer __new_node)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:void	access:public	signature:(_Map_pointer __new_node)
_M_set_sharable	./basic_string.h	/^	_M_set_sharable()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
_M_setstate	./basic_ios.h	/^      _M_setstate(iostate __state)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
_M_size	./gslice.h	/^      valarray<size_t> _M_size;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
_M_size	./valarray_before.h	/^      const size_t _M_size;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const size_t	access:private
_M_slice	./valarray_before.h	/^      const slice& _M_slice;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const slice &	access:private
_M_st	./slice_array.h	/^    size_t _M_st;			\/\/ stride unit$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
_M_start	./gslice.h	/^      size_t _M_start;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public
_M_start	./stl_bvector.h	/^	_Bit_iterator 	_M_start;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_iterator	access:public
_M_start	./stl_deque.h	/^	iterator _M_start;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:iterator	access:public
_M_start	./stl_vector.h	/^	_Tp*           _M_start;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
_M_state	./postypes.h	/^      _StateT			_M_state;$/;"	kind:member	language:C++	class:std::fpos	typeref:typename:_StateT	access:private
_M_stream	./stream_iterator.h	/^      istream_type*	_M_stream;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:istream_type *	access:private
_M_stream	./stream_iterator.h	/^      ostream_type*	_M_stream;$/;"	kind:member	language:C++	class:std::ostream_iterator	typeref:typename:ostream_type *	access:private
_M_streambuf	./basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
_M_streambuf_state	./ios_base.h	/^    iostate		_M_streambuf_state;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:iostate	access:protected
_M_stride	./gslice.h	/^      valarray<size_t> _M_stride;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
_M_stride	./slice_array.h	/^      const size_t      _M_stride;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const size_t	access:private
_M_stride	./valarray_before.h	/^      const size_t _M_stride;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const size_t	access:private
_M_string	./stream_iterator.h	/^      const _CharT*	_M_string;$/;"	kind:member	language:C++	class:std::ostream_iterator	typeref:typename:const _CharT *	access:private
_M_sz	./indirect_array.h	/^      const size_t	 _M_sz;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const size_t	access:private
_M_sz	./mask_array.h	/^      const size_t       _M_sz;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const size_t	access:private
_M_sz	./slice_array.h	/^      const size_t      _M_sz;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const size_t	access:private
_M_sz	./slice_array.h	/^    size_t _M_sz;			\/\/ size$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
_M_t	./stl_map.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::map	typeref:typename:_Rep_type	access:private
_M_t	./stl_multimap.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::multimap	typeref:typename:_Rep_type	access:private
_M_t	./stl_multiset.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::multiset	typeref:typename:_Rep_type	access:private
_M_t	./stl_set.h	/^      _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	kind:member	language:C++	class:std::set	typeref:typename:_Rep_type	access:private
_M_table	./locale_facets.h	/^      const mask*		_M_table;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected
_M_thousands_sep	./locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT	access:public
_M_thousands_sep	./locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_tie	./basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
_M_time_era_format	./locale_facets.h	/^      const _CharT*			_M_time_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_time_format	./locale_facets.h	/^      const _CharT*			_M_time_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
_M_time_formats	./locale_facets.h	/^      _M_time_formats(const _CharT** __time) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __time) const
_M_tolower	./locale_facets.h	/^      __to_type			_M_tolower;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__to_type	access:protected
_M_toupper	./locale_facets.h	/^      __to_type			_M_toupper;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__to_type	access:protected
_M_transfer	./stl_list.h	/^      _M_transfer(iterator __position, iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position,iterator __first,iterator __last)
_M_transform	./locale_facets.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
_M_transform	./locale_facets.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
_M_transform	./locale_facets.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
_M_truename	./locale_facets.h	/^      const _CharT*			_M_truename;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_truename_size	./locale_facets.h	/^      size_t                            _M_truename_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_use_grouping	./locale_facets.h	/^      bool				_M_use_grouping;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:bool	access:public
_M_use_grouping	./locale_facets.h	/^      bool				_M_use_grouping;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_value	./stream_iterator.h	/^      _Tp		_M_value;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:_Tp	access:private
_M_value_field	./stl_tree.h	/^      _Val _M_value_field;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node	typeref:typename:_Val	access:public
_M_widen	./locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[]	access:protected
_M_widen	./locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:wint_t[]	access:protected
_M_widen_init	./locale_facets.h	/^      void _M_widen_init() const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_widen_ok	./locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char	access:protected
_M_width	./ios_base.h	/^    streamsize		_M_width;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_wmask	./locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
_M_word	./ios_base.h	/^    _Words*		_M_word;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words *	access:protected
_M_word_size	./ios_base.h	/^    int			_M_word_size;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:int	access:protected
_M_word_zero	./ios_base.h	/^    _Words		_M_word_zero;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words	access:protected
_Map_alloc_type	./stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc::template rebind<_Tp * >::other	access:protected
_Map_pointer	./stl_deque.h	/^      typedef _Tp**                           _Map_pointer;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp **	access:public
_Map_pointer	./stl_deque.h	/^      typedef pointer*                           _Map_pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:pointer *	access:protected
_Mapped_type	./boost_concept_check.h	/^      typedef typename _SimpleAssociativeContainer::mapped_type _Mapped_type;$/;"	kind:typedef	language:C++	function:_PairAssociativeContainerConcept::__constraints	typeref:typename:_SimpleAssociativeContainer::mapped_type
_MultipleAssociativeContainerConcept	./boost_concept_check.h	/^  struct _MultipleAssociativeContainerConcept$/;"	kind:struct	language:C++
_MultipleAssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_MultipleAssociativeContainerConcept::__first	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type *	access:public
_MultipleAssociativeContainerConcept::__last	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type *	access:public
_MultipleAssociativeContainerConcept::__pos	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::iterator __pos;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::iterator	access:public
_MultipleAssociativeContainerConcept::__t	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type	access:public
_Mutable_BidirectionalIteratorConcept	./boost_concept_check.h	/^  struct _Mutable_BidirectionalIteratorConcept$/;"	kind:struct	language:C++
_Mutable_BidirectionalIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_BidirectionalIteratorConcept	typeref:typename:void	access:public	signature:()
_Mutable_BidirectionalIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_BidirectionalIteratorConcept	typeref:typename:_Tp	access:public
_Mutable_ContainerConcept	./boost_concept_check.h	/^  struct _Mutable_ContainerConcept$/;"	kind:struct	language:C++
_Mutable_ContainerConcept::_Iterator	./boost_concept_check.h	/^    typedef typename _Container::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::iterator	access:public
_Mutable_ContainerConcept::_Pointer	./boost_concept_check.h	/^    typedef typename _Container::pointer _Pointer;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::pointer	access:public
_Mutable_ContainerConcept::_Reference	./boost_concept_check.h	/^    typedef typename _Container::reference _Reference;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::reference	access:public
_Mutable_ContainerConcept::_Value_type	./boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::value_type	access:public
_Mutable_ContainerConcept::__c	./boost_concept_check.h	/^    _Container __c, __c2;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container	access:public
_Mutable_ContainerConcept::__c2	./boost_concept_check.h	/^    _Container __c, __c2;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container	access:public
_Mutable_ContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:void	access:public	signature:()
_Mutable_ContainerConcept::__i	./boost_concept_check.h	/^    _Iterator __i;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Iterator	access:public
_Mutable_ForwardContainerConcept	./boost_concept_check.h	/^  struct _Mutable_ForwardContainerConcept$/;"	kind:struct	language:C++
_Mutable_ForwardContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ForwardContainerConcept	typeref:typename:void	access:public	signature:()
_Mutable_ForwardIteratorConcept	./boost_concept_check.h	/^  struct _Mutable_ForwardIteratorConcept$/;"	kind:struct	language:C++
_Mutable_ForwardIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ForwardIteratorConcept	typeref:typename:void	access:public	signature:()
_Mutable_ForwardIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_ForwardIteratorConcept	typeref:typename:_Tp	access:public
_Mutable_RandomAccessContainerConcept	./boost_concept_check.h	/^  struct _Mutable_RandomAccessContainerConcept$/;"	kind:struct	language:C++
_Mutable_RandomAccessContainerConcept::_Iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::iterator	access:public
_Mutable_RandomAccessContainerConcept::_Reference	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reference _Reference;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::reference	access:public
_Mutable_RandomAccessContainerConcept::_Reverse_iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reverse_iterator _Reverse_iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::reverse_iterator	access:public
_Mutable_RandomAccessContainerConcept::_Size_type	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::size_type	access:public
_Mutable_RandomAccessContainerConcept::__c	./boost_concept_check.h	/^    _RandomAccessContainer __c;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer	access:public
_Mutable_RandomAccessContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:void	access:public	signature:()
_Mutable_RandomAccessContainerConcept::__i	./boost_concept_check.h	/^    _Size_type __i;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_Size_type	access:public
_Mutable_RandomAccessIteratorConcept	./boost_concept_check.h	/^  struct _Mutable_RandomAccessIteratorConcept$/;"	kind:struct	language:C++
_Mutable_RandomAccessIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:void	access:public	signature:()
_Mutable_RandomAccessIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
_Mutable_RandomAccessIteratorConcept::__n	./boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:std::iterator_traits<_Tp>::difference_type	access:public
_Mutable_ReversibleContainerConcept	./boost_concept_check.h	/^  struct _Mutable_ReversibleContainerConcept$/;"	kind:struct	language:C++
_Mutable_ReversibleContainerConcept::_Iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::iterator	access:public
_Mutable_ReversibleContainerConcept::_Reverse_iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::reverse_iterator _Reverse_iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::reverse_iterator	access:public
_Mutable_ReversibleContainerConcept::__c	./boost_concept_check.h	/^    _ReversibleContainer __c;$/;"	kind:member	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer	access:public
_Mutable_ReversibleContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:void	access:public	signature:()
_Mutable_TrivialIteratorConcept	./boost_concept_check.h	/^  struct _Mutable_TrivialIteratorConcept$/;"	kind:struct	language:C++
_Mutable_TrivialIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:void	access:public	signature:()
_Mutable_TrivialIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:_Tp	access:public
_Mutable_TrivialIteratorConcept::__j	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:_Tp	access:public
_Node	./stl_list.h	/^      typedef _List_node<_Tp>				 _Node;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_node<_Tp>	access:protected
_Node	./stl_list.h	/^      typedef _List_node<_Tp>                    _Node;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_List_node<_Tp>	access:public
_Node	./stl_list.h	/^      typedef const _List_node<_Tp>              _Node;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _List_node<_Tp>	access:public
_Node_alloc_type	./stl_list.h	/^        _Node_alloc_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc::template rebind<_List_node<_Tp>>::other	access:protected
_Node_allocator	./stl_tree.h	/^              _Node_allocator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Alloc::template rebind<_Rb_tree_node<_Val>>::other	access:private
_Num	./stl_algobase.h	/^	  const ptrdiff_t _Num = __last - __first;$/;"	kind:local	language:C++	function:std::__copy_backward::__copy_b	typeref:typename:const ptrdiff_t	file:
_OSTREAM_INSERT_H	./ostream_insert.h	/^#define _OSTREAM_INSERT_H /;"	kind:macro	language:C++
_OutputIteratorConcept	./boost_concept_check.h	/^  struct _OutputIteratorConcept$/;"	kind:struct	language:C++
_OutputIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_OutputIteratorConcept	typeref:typename:void	access:public	signature:()
_OutputIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_OutputIteratorConcept	typeref:typename:_Tp	access:public
_OutputIteratorConcept::__t	./boost_concept_check.h	/^    _ValueT __t;$/;"	kind:member	language:C++	struct:_OutputIteratorConcept	typeref:typename:_ValueT	access:public
_OutputValueType	./stl_algo.h	/^	_OutputValueType;$/;"	kind:typedef	language:C++	function:std::partial_sort_copy	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_PAIR_H	./stl_pair.h	/^#define _PAIR_H /;"	kind:macro	language:C++
_PairAssociativeContainerConcept	./boost_concept_check.h	/^  struct _PairAssociativeContainerConcept$/;"	kind:struct	language:C++
_PairAssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_PairAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_Pair_alloc_type	./stl_map.h	/^        _Pair_alloc_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc::template rebind<value_type>::other	access:private
_Pair_alloc_type	./stl_multimap.h	/^        _Pair_alloc_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc::template rebind<value_type>::other	access:private
_Pointer	./boost_concept_check.h	/^    typedef typename _Container::pointer _Pointer;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::pointer	access:public
_Pt	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::pointer _Pt;$/;"	kind:typedef	language:C++	function:_InputIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::pointer
_QUEUE_H	./stl_queue.h	/^#define _QUEUE_H /;"	kind:macro	language:C++
_RandomAccessContainerConcept	./boost_concept_check.h	/^  struct _RandomAccessContainerConcept$/;"	kind:struct	language:C++
_RandomAccessContainerConcept::_Const_iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_iterator	access:public
_RandomAccessContainerConcept::_Const_reference	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_reference	access:public
_RandomAccessContainerConcept::_Const_reverse_iterator	./boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::const_reverse_iterator	access:public
_RandomAccessContainerConcept::_Size_type	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::size_type	access:public
_RandomAccessContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:void	access:public	signature:()
_RandomAccessContainerConcept::__n	./boost_concept_check.h	/^    _Size_type __n;$/;"	kind:member	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_Size_type	access:public
_RandomAccessIteratorConcept	./boost_concept_check.h	/^  struct _RandomAccessIteratorConcept$/;"	kind:struct	language:C++
_RandomAccessIteratorConcept::__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
_RandomAccessIteratorConcept::__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
_RandomAccessIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:void	access:public	signature:()
_RandomAccessIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
_RandomAccessIteratorConcept::__j	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
_RandomAccessIteratorConcept::__n	./boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:std::iterator_traits<_Tp>::difference_type	access:public
_Raw_bytes_alloc	./basic_string.h	/^	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;$/;"	kind:typedef	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Alloc::template rebind<char>::other	access:public
_Rb_tree	./stl_tree.h	/^      _Rb_tree()$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:()
_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Compare& __comp)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Compare & __comp)
_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Compare & __comp,const allocator_type & __a)
_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
_Rb_tree	./stl_tree.h	/^    class _Rb_tree$/;"	kind:class	language:C++	namespace:std
_Rb_tree_black_count	./stl_tree.h	/^  _Rb_tree_black_count(const _Rb_tree_node_base* __node,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:unsigned int	signature:(const _Rb_tree_node_base * __node,const _Rb_tree_node_base * __root)
_Rb_tree_color	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enum	language:C++	namespace:std
_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:()
_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator(_Link_type __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator(const iterator& __it)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:(const iterator & __it)
_Rb_tree_const_iterator	./stl_tree.h	/^    struct _Rb_tree_const_iterator$/;"	kind:struct	language:C++	namespace:std
_Rb_tree_decrement	./stl_tree.h	/^  _Rb_tree_decrement(_Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * __x)
_Rb_tree_decrement	./stl_tree.h	/^  _Rb_tree_decrement(const _Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Rb_tree_node_base *	signature:(const _Rb_tree_node_base * __x)
_Rb_tree_impl	./stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	kind:function	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator & __a=_Node_allocator (),const _Key_compare & __comp=_Key_compare ())
_Rb_tree_impl	./stl_tree.h	/^        struct _Rb_tree_impl : public _Node_allocator$/;"	kind:struct	language:C++	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_Rb_tree_impl	./stl_tree.h	/^        struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator $/;"	kind:struct	language:C++	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
_Rb_tree_increment	./stl_tree.h	/^  _Rb_tree_increment(_Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * __x)
_Rb_tree_increment	./stl_tree.h	/^  _Rb_tree_increment(const _Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Rb_tree_node_base *	signature:(const _Rb_tree_node_base * __x)
_Rb_tree_insert_and_rebalance	./stl_tree.h	/^  _Rb_tree_insert_and_rebalance(const bool __insert_left,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const bool __insert_left,_Rb_tree_node_base * __x,_Rb_tree_node_base * __p,_Rb_tree_node_base & __header)
_Rb_tree_iterator	./stl_tree.h	/^      _Rb_tree_iterator()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	access:public	signature:()
_Rb_tree_iterator	./stl_tree.h	/^      _Rb_tree_iterator(_Link_type __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
_Rb_tree_iterator	./stl_tree.h	/^    struct _Rb_tree_iterator$/;"	kind:struct	language:C++	namespace:std
_Rb_tree_node	./stl_tree.h	/^      typedef _Rb_tree_node<_Val> _Rb_tree_node;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node<_Val>	access:protected
_Rb_tree_node	./stl_tree.h	/^    struct _Rb_tree_node : public _Rb_tree_node_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Rb_tree_node_base
_Rb_tree_node_base	./stl_tree.h	/^  struct _Rb_tree_node_base$/;"	kind:struct	language:C++	namespace:std
_Rb_tree_rebalance_for_erase	./stl_tree.h	/^  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * const __z,_Rb_tree_node_base & __header)
_Rb_tree_rotate_left	./stl_tree.h	/^  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree_node_base * const __x,_Rb_tree_node_base * & __root)
_Rb_tree_rotate_right	./stl_tree.h	/^  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree_node_base * const __x,_Rb_tree_node_base * & __root)
_Ref	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::reference _Ref;$/;"	kind:typedef	language:C++	function:_ForwardIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::reference
_Ref	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::reference _Ref;$/;"	kind:typedef	language:C++	function:_InputIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::reference
_Ref	./boost_concept_check.h	/^      typedef typename std::iterator_traits<_Tp>::reference _Ref;$/;"	kind:typedef	language:C++	function:_RandomAccessIteratorConcept::__constraints	typeref:typename:std::iterator_traits<_Tp>::reference
_RefFunClos	./valarray_before.h	/^      _RefFunClos(const _Dom& __e, _Tp __f(const _Tp&))$/;"	kind:function	language:C++	struct:std::_RefFunClos	access:public	signature:(const _Dom & __e,_Tp __f (const _Tp &))
_RefFunClos	./valarray_before.h	/^      _RefFunClos(const valarray<_Tp>& __v, _Tp __f(const _Tp&))$/;"	kind:function	language:C++	struct:std::_RefFunClos	access:public	signature:(const valarray<_Tp> & __v,_Tp __f (const _Tp &))
_RefFunClos	./valarray_before.h	/^    struct _RefFunClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<_Dom,consttypename_Dom::value_type&>
_RefFunClos	./valarray_before.h	/^    struct _RefFunClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<valarray<_Tp>,const_Tp&>
_Reference	./boost_concept_check.h	/^    typedef typename _BackInsertionSequence::reference _Reference;$/;"	kind:typedef	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::reference	access:public
_Reference	./boost_concept_check.h	/^    typedef typename _Container::reference _Reference;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::reference	access:public
_Reference	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reference _Reference;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::reference	access:public
_Reference	./boost_concept_check.h	/^    typedef typename _Sequence::reference _Reference;$/;"	kind:typedef	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::reference	access:public
_ReferenceType1	./stl_algobase.h	/^	_ReferenceType1;$/;"	kind:typedef	language:C++	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::reference
_ReferenceType2	./stl_algobase.h	/^	_ReferenceType2;$/;"	kind:typedef	language:C++	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::reference
_Rep	./basic_string.h	/^      struct _Rep : _Rep_base$/;"	kind:struct	language:C++	class:std::basic_string	inherits:_Rep_base	access:private
_Rep_base	./basic_string.h	/^      struct _Rep_base$/;"	kind:struct	language:C++	class:std::basic_string	access:private
_Rep_type	./stl_map.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rb_tree<key_type,value_type,_Select1st<value_type>,key_compare,_Pair_alloc_type>	access:private
_Rep_type	./stl_multimap.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rb_tree<key_type,value_type,_Select1st<value_type>,key_compare,_Pair_alloc_type>	access:private
_Rep_type	./stl_multiset.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rb_tree<key_type,value_type,_Identity<value_type>,key_compare,_Key_alloc_type>	access:private
_Rep_type	./stl_set.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rb_tree<key_type,value_type,_Identity<value_type>,key_compare,_Key_alloc_type>	access:private
_Required	./boost_concept_check.h	/^        _Required;$/;"	kind:typedef	language:C++	function:_SimpleAssociativeContainerConcept::__constraints	typeref:typename:_Aux_require_same<_Key_type,_Value_type>::_Type
_Required	./boost_concept_check.h	/^        _Required_value_type>::_Type _Required;$/;"	kind:typedef	language:C++	function:_PairAssociativeContainerConcept::__constraints	typeref:typename:_Aux_require_same<_Value_type,_Required_value_type>::_Type
_Required	./boost_concept_check.h	/^      typedef typename _Aux_require_same<_Tp1, _Tp2>::_Type _Required;$/;"	kind:typedef	language:C++	function:_SameTypeConcept::__constraints	typeref:typename:_Aux_require_same<_Tp1,_Tp2>::_Type
_Required_value_type	./boost_concept_check.h	/^      typedef std::pair<const _Key_type, _Mapped_type> _Required_value_type;$/;"	kind:typedef	language:C++	function:_PairAssociativeContainerConcept::__constraints	typeref:typename:std::pair<const _Key_type,_Mapped_type>
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	kind:prototype	language:C++	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	kind:prototype	language:C++	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	kind:prototype	language:C++	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	kind:prototype	language:C++	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_RevIterator1	./stl_algo.h	/^      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;$/;"	kind:typedef	language:C++	function:std::__find_end	typeref:typename:reverse_iterator<_BidirectionalIterator1>
_RevIterator2	./stl_algo.h	/^      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;$/;"	kind:typedef	language:C++	function:std::__find_end	typeref:typename:reverse_iterator<_BidirectionalIterator2>
_Reverse_iterator	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::reverse_iterator _Reverse_iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::reverse_iterator	access:public
_Reverse_iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::reverse_iterator _Reverse_iterator;$/;"	kind:typedef	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::reverse_iterator	access:public
_ReversibleContainerConcept	./boost_concept_check.h	/^  struct _ReversibleContainerConcept$/;"	kind:struct	language:C++
_ReversibleContainerConcept::_Const_iterator	./boost_concept_check.h	/^    typedef typename _ReversibleContainer::const_iterator _Const_iterator;$/;"	kind:typedef	language:C++	struct:_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::const_iterator	access:public
_ReversibleContainerConcept::_Const_reverse_iterator	./boost_concept_check.h	/^      _Const_reverse_iterator;$/;"	kind:typedef	language:C++	struct:_ReversibleContainerConcept	typeref:typename:_ReversibleContainer::const_reverse_iterator	access:public
_ReversibleContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ReversibleContainerConcept	typeref:typename:void	access:public	signature:()
_SBase	./valarray_before.h	/^      _SBase (_Array<_Tp> __a, const slice& __s)$/;"	kind:function	language:C++	class:std::_SBase	access:public	signature:(_Array<_Tp> __a,const slice & __s)
_SBase	./valarray_before.h	/^      _SBase (const _Dom& __e, const slice& __s)$/;"	kind:function	language:C++	class:std::_SBase	access:public	signature:(const _Dom & __e,const slice & __s)
_SBase	./valarray_before.h	/^    class _SBase$/;"	kind:class	language:C++	namespace:std
_SBase	./valarray_before.h	/^    class _SBase<_Array<_Tp> >$/;"	kind:class	language:C++	namespace:std
_SClos	./valarray_before.h	/^      _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}$/;"	kind:function	language:C++	struct:std::_SClos	access:public	signature:(_Array<_Tp> __a,const slice & __s)
_SClos	./valarray_before.h	/^      _SClos (const _Dom& __e, const slice& __s) : _Base (__e, __s) {}$/;"	kind:function	language:C++	struct:std::_SClos	access:public	signature:(const _Dom & __e,const slice & __s)
_SClos	./valarray_before.h	/^    struct _SClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_SBase<_Dom>
_SClos	./valarray_before.h	/^    struct _SClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_SBase<_Array<_Tp>>
_SET_H	./stl_set.h	/^#define _SET_H /;"	kind:macro	language:C++
_SGIAssignableConcept	./boost_concept_check.h	/^  struct _SGIAssignableConcept$/;"	kind:struct	language:C++
_SGIAssignableConcept::__a	./boost_concept_check.h	/^    _Tp __a;$/;"	kind:member	language:C++	struct:_SGIAssignableConcept	typeref:typename:_Tp	access:public
_SGIAssignableConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	kind:function	language:C++	struct:_SGIAssignableConcept	typeref:typename:void	access:public	signature:(const _Tp & __b)
_SGIAssignableConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SGIAssignableConcept	typeref:typename:void	access:public	signature:()
_SLICE_ARRAY_H	./slice_array.h	/^#define _SLICE_ARRAY_H /;"	kind:macro	language:C++
_STACK_H	./stl_stack.h	/^#define _STACK_H /;"	kind:macro	language:C++
_STL_CONSTRUCT_H	./stl_construct.h	/^#define _STL_CONSTRUCT_H /;"	kind:macro	language:C++
_STL_HEAP_H	./stl_heap.h	/^#define _STL_HEAP_H /;"	kind:macro	language:C++
_STL_NUMERIC_H	./stl_numeric.h	/^#define _STL_NUMERIC_H /;"	kind:macro	language:C++
_STL_RAW_STORAGE_ITERATOR_H	./stl_raw_storage_iter.h	/^#define _STL_RAW_STORAGE_ITERATOR_H /;"	kind:macro	language:C++
_STL_RELOPS_H	./stl_relops.h	/^#define _STL_RELOPS_H /;"	kind:macro	language:C++
_STL_UNINITIALIZED_H	./stl_uninitialized.h	/^#define _STL_UNINITIALIZED_H /;"	kind:macro	language:C++
_STREAMBUF_ITERATOR_H	./streambuf_iterator.h	/^#define _STREAMBUF_ITERATOR_H /;"	kind:macro	language:C++
_STREAM_ITERATOR_H	./stream_iterator.h	/^#define _STREAM_ITERATOR_H /;"	kind:macro	language:C++
_STRINGFWD_H	./stringfwd.h	/^#define _STRINGFWD_H /;"	kind:macro	language:C++
_S_adjustfield	./ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_app	./ios_base.h	/^      _S_app 		= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_ate	./ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_atoms	./locale_facets.h	/^    static const char* _S_atoms;$/;"	kind:member	language:C++	class:std::money_base	typeref:typename:const char *	access:public
_S_atoms_in	./locale_facets.h	/^    static const char* _S_atoms_in;$/;"	kind:member	language:C++	class:std::__num_base	typeref:typename:const char *	access:public
_S_atoms_out	./locale_facets.h	/^    static const char* _S_atoms_out;$/;"	kind:member	language:C++	class:std::__num_base	typeref:typename:const char *	access:public
_S_badbit	./ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
_S_basefield	./ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_beg	./ios_base.h	/^      _S_beg = 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
_S_bin	./ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_black	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enumerator	language:C++	enum:std::_Rb_tree_color	access:public
_S_boolalpha	./ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_buffer_size	./stl_deque.h	/^      static size_t _S_buffer_size()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_t	access:protected	signature:()
_S_buffer_size	./stl_deque.h	/^      static size_t _S_buffer_size()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:size_t	access:public	signature:()
_S_c_locale	./locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:private
_S_c_name	./locale_classes.h	/^    static const char			_S_c_name[2];$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:const char[2]	access:private
_S_categories	./locale_classes.h	/^    static const char* const* const _S_categories;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const char * const * const	access:private
_S_categories_size	./locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	kind:enumerator	language:C++	enum:std::locale::__anonc75c47750103	access:public
_S_chunk_size	./stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	kind:enumerator	language:C++	enum:std::__anon6048a8ad0203	access:public
_S_classic	./locale_classes.h	/^    static _Impl*       _S_classic;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
_S_clone_c_locale	./locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc);$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
_S_construct	./basic_string.h	/^         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
_S_construct	./basic_string.h	/^        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,const _Alloc & __a,forward_iterator_tag)
_S_construct	./basic_string.h	/^        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a)
_S_construct	./basic_string.h	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
_S_construct_aux	./basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__false_type)
_S_construct_aux	./basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__true_type)
_S_construct_pattern	./locale_facets.h	/^    _S_construct_pattern(char __precedes, char __space, char __posn);$/;"	kind:prototype	language:C++	class:std::money_base	typeref:typename:pattern	access:public	signature:(char __precedes,char __space,char __posn)
_S_copy_chars	./basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
_S_create	./basic_string.h	/^	_S_create(size_type, size_type, const _Alloc&);$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Rep *	access:public	signature:(size_type,size_type,const _Alloc &)
_S_create_c_locale	./locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
_S_cur	./ios_base.h	/^      _S_cur = SEEK_CUR,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
_S_dec	./ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_default_pattern	./locale_facets.h	/^    static const pattern _S_default_pattern;$/;"	kind:member	language:C++	class:std::money_base	typeref:typename:const pattern	access:public
_S_destroy_c_locale	./locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
_S_do_it	./allocator.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two)$/;"	kind:function	language:C++	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
_S_do_it	./allocator.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) { } };$/;"	kind:function	language:C++	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	struct:std::_Array_default_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e,  const _Tp __t)$/;"	kind:function	language:C++	struct:std::_Array_init_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)$/;"	kind:function	language:C++	struct:std::_Array_init_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
_S_do_it	./valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)$/;"	kind:function	language:C++	struct:std::_Array_copier	typeref:typename:void	access:public	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b)
_S_do_it	./valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,$/;"	kind:function	language:C++	struct:std::_Array_copy_ctor	typeref:typename:void	access:public	signature:(const _Tp * __restrict__ __b,const _Tp * __restrict__ __e,_Tp * __restrict__ __o)
_S_empty_rep	./basic_string.h	/^        _S_empty_rep()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Rep &	access:public	signature:()
_S_empty_rep	./basic_string.h	/^      _S_empty_rep()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_Rep &	access:private	signature:()
_S_empty_rep_storage	./basic_string.h	/^        static size_type _S_empty_rep_storage[];$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:size_type[]	access:public
_S_end	./ios_base.h	/^      _S_end = SEEK_END,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
_S_end	./locale_facets.h	/^      _S_end = 11$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
_S_eofbit	./ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
_S_facet_categories	./locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
_S_failbit	./ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
_S_fixed	./ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_floatfield	./ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_format_float	./locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod);$/;"	kind:prototype	language:C++	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
_S_get_c_locale	./locale_classes.h	/^    _S_get_c_locale();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
_S_get_c_name	./locale_classes.h	/^    _S_get_c_name();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:const char *	access:protected	signature:()
_S_global	./locale_classes.h	/^    static _Impl*	_S_global;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
_S_goodbit	./ios_base.h	/^      _S_goodbit 		= 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
_S_hex	./ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_iE	./locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_iX	./locale_facets.h	/^      _S_iX,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_id_collate	./locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_ctype	./locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_messages	./locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_monetary	./locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_numeric	./locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_time	./locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_ie	./locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_iend	./locale_facets.h	/^      _S_iend = 26$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_iminus	./locale_facets.h	/^      _S_iminus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_in	./ios_base.h	/^      _S_in 		= 1L << 3,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_initial_map_size	./stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	kind:enumerator	language:C++	enum:std::_Deque_base::__anon40b17a5e0103	access:public
_S_initialize	./locale_classes.h	/^    _S_initialize();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	./locale_classes.h	/^    _S_initialize_once();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	./locale_classes.h	/^    _S_initialize_once();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:()
_S_internal	./ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_end	./ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_ios_iostate_end	./ios_base.h	/^      _S_ios_iostate_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
_S_ios_openmode_end	./ios_base.h	/^      _S_ios_openmode_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_ios_seekdir_end	./ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
_S_iplus	./locale_facets.h	/^      _S_iplus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_ix	./locale_facets.h	/^      _S_ix,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_izero	./locale_facets.h	/^      _S_izero,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
_S_key	./stl_tree.h	/^      _S_key(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Key &	access:protected	signature:(_Const_Base_ptr __x)
_S_key	./stl_tree.h	/^      _S_key(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Key &	access:protected	signature:(_Const_Link_type __x)
_S_left	./ios_base.h	/^      _S_left 		= 1L << 5,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_left	./stl_tree.h	/^      _S_left(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Base_ptr __x)
_S_left	./stl_tree.h	/^      _S_left(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:(_Const_Base_ptr __x)
_S_local_word_size	./ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	kind:enumerator	language:C++	enum:std::ios_base::__anon68d21f9d0103	access:public
_S_max_size	./basic_string.h	/^	static const size_type	_S_max_size;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:const size_type	access:public
_S_maximum	./stl_tree.h	/^      _S_maximum(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr	access:protected	signature:(_Base_ptr __x)
_S_maximum	./stl_tree.h	/^      _S_maximum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:(_Const_Base_ptr __x)
_S_maximum	./stl_tree.h	/^    _S_maximum(_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public	signature:(_Base_ptr __x)
_S_maximum	./stl_tree.h	/^    _S_maximum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Const_Base_ptr	access:public	signature:(_Const_Base_ptr __x)
_S_minimum	./stl_tree.h	/^      _S_minimum(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr	access:protected	signature:(_Base_ptr __x)
_S_minimum	./stl_tree.h	/^      _S_minimum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:(_Const_Base_ptr __x)
_S_minimum	./stl_tree.h	/^    _S_minimum(_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public	signature:(_Base_ptr __x)
_S_minimum	./stl_tree.h	/^    _S_minimum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Const_Base_ptr	access:public	signature:(_Const_Base_ptr __x)
_S_minus	./locale_facets.h	/^      _S_minus,$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
_S_normalize_category	./locale_classes.h	/^    _S_normalize_category(category);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:category	access:private	signature:(category)
_S_oE	./locale_facets.h	/^        _S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oX	./locale_facets.h	/^        _S_oX,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oct	./ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_odigits	./locale_facets.h	/^        _S_odigits,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_odigits_end	./locale_facets.h	/^        _S_odigits_end = _S_odigits + 16,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oe	./locale_facets.h	/^        _S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oend	./locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_ominus	./locale_facets.h	/^        _S_ominus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_once	./locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
_S_once	./locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:__gthread_once_t	access:private
_S_oplus	./locale_facets.h	/^        _S_oplus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oudigits	./locale_facets.h	/^        _S_oudigits = _S_odigits_end,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_oudigits_end	./locale_facets.h	/^        _S_oudigits_end = _S_oudigits + 16,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_out	./ios_base.h	/^      _S_out 		= 1L << 4,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_ox	./locale_facets.h	/^        _S_ox,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
_S_pad	./locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	kind:prototype	language:C++	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,const streamsize __newlen,const streamsize __oldlen,const bool __num)
_S_red	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enumerator	language:C++	enum:std::_Rb_tree_color	access:public
_S_refcount	./ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	kind:member	language:C++	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
_S_refcount	./locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	kind:member	language:C++	class:std::locale::id	typeref:typename:_Atomic_word	access:private
_S_right	./ios_base.h	/^      _S_right 		= 1L << 7,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_right	./stl_tree.h	/^      _S_right(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Base_ptr __x)
_S_right	./stl_tree.h	/^      _S_right(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:(_Const_Base_ptr __x)
_S_scientific	./ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_showbase	./ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_showpoint	./ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_showpos	./ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_skipws	./ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_synced_with_stdio	./ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	kind:member	language:C++	class:std::ios_base::Init	typeref:typename:bool	access:private
_S_terminal	./basic_string.h	/^	static const _CharT	_S_terminal;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:const _CharT	access:public
_S_threshold	./stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	kind:enumerator	language:C++	enum:std::__anon6048a8ad0103	access:public
_S_timezones	./locale_facets.h	/^      static const _CharT*		_S_timezones[14];$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT * [14]	access:public
_S_timezones	./locale_facets.h	/^    __timepunct_cache<char>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<char>	typeref:typename:const char * [14]
_S_timezones	./locale_facets.h	/^    __timepunct_cache<wchar_t>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<wchar_t>	typeref:typename:const wchar_t * [14]
_S_timezones	./locale_facets.h	/^    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<_CharT>	typeref:typename:const _CharT * [14]
_S_trunc	./ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
_S_unitbuf	./ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_uppercase	./ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
_S_value	./stl_tree.h	/^      _S_value(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reference	access:protected	signature:(_Const_Base_ptr __x)
_S_value	./stl_tree.h	/^      _S_value(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reference	access:protected	signature:(_Const_Link_type __x)
_S_word_bit	./stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	kind:enumerator	language:C++	enum:std::__anon35db5b7f0103	access:public
_S_zero	./locale_facets.h	/^      _S_zero,$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
_SameTypeConcept	./boost_concept_check.h	/^  struct _SameTypeConcept$/;"	kind:struct	language:C++
_SameTypeConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SameTypeConcept	typeref:typename:void	access:public	signature:()
_Select1st	./stl_function.h	/^    struct _Select1st : public unary_function<_Pair,$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
_Select2nd	./stl_function.h	/^    struct _Select2nd : public unary_function<_Pair,$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
_Self	./stl_deque.h	/^      typedef _Deque_iterator                 _Self;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator	access:public
_Self	./stl_list.h	/^      typedef _List_const_iterator<_Tp>          _Self;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_List_const_iterator<_Tp>	access:public
_Self	./stl_list.h	/^      typedef _List_iterator<_Tp>                _Self;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_List_iterator<_Tp>	access:public
_Self	./stl_tree.h	/^      typedef _Rb_tree_const_iterator<_Tp>        _Self;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_const_iterator<_Tp>	access:public
_Self	./stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp>        _Self;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_iterator<_Tp>	access:public
_SequenceConcept	./boost_concept_check.h	/^  struct _SequenceConcept$/;"	kind:struct	language:C++
_SequenceConcept::_Const_reference	./boost_concept_check.h	/^    typedef typename _Sequence::const_reference _Const_reference;$/;"	kind:typedef	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::const_reference	access:public
_SequenceConcept::_Reference	./boost_concept_check.h	/^    typedef typename _Sequence::reference _Reference;$/;"	kind:typedef	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::reference	access:public
_SequenceConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Sequence& __c) {$/;"	kind:function	language:C++	struct:_SequenceConcept	typeref:typename:void	access:public	signature:(const _Sequence & __c)
_SequenceConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SequenceConcept	typeref:typename:void	access:public	signature:()
_SequenceConcept::__first	./boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type *	access:public
_SequenceConcept::__last	./boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type *	access:public
_SequenceConcept::__n	./boost_concept_check.h	/^    typename _Sequence::size_type __n;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::size_type	access:public
_SequenceConcept::__p	./boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::iterator	access:public
_SequenceConcept::__q	./boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::iterator	access:public
_SequenceConcept::__t	./boost_concept_check.h	/^    typename _Sequence::value_type __t;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type	access:public
_Sequence_value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::value_type	access:private
_Sequence_value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::value_type	access:private
_Sequence_value_type	./stl_stack.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::value_type	access:private
_SignedIntegerConcept	./boost_concept_check.h	/^  struct _SignedIntegerConcept {$/;"	kind:struct	language:C++
_SignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<int> { void __constraints() {} };$/;"	kind:struct	language:C++
_SignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};$/;"	kind:struct	language:C++
_SignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long> { void __constraints() {} };$/;"	kind:struct	language:C++
_SignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<short> { void __constraints() {} };$/;"	kind:struct	language:C++
_SignedIntegerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
_SignedIntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
_SignedIntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
_SignedIntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
_SignedIntegerConcept::__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<short> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
_SimpleAssociativeContainerConcept	./boost_concept_check.h	/^  struct _SimpleAssociativeContainerConcept$/;"	kind:struct	language:C++
_SimpleAssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SimpleAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_Size_type	./boost_concept_check.h	/^    typedef typename _Container::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::size_type	access:public
_Size_type	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::size_type	access:public
_Size_type	./boost_concept_check.h	/^    typedef typename _RandomAccessContainer::size_type _Size_type;$/;"	kind:typedef	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer::size_type	access:public
_SortedAssociativeContainerConcept	./boost_concept_check.h	/^  struct _SortedAssociativeContainerConcept$/;"	kind:struct	language:C++
_SortedAssociativeContainerConcept::_Const_iterator	./boost_concept_check.h	/^      _Const_iterator;$/;"	kind:typedef	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::const_iterator	access:public
_SortedAssociativeContainerConcept::_Iterator	./boost_concept_check.h	/^    typedef typename _SortedAssociativeContainer::iterator _Iterator;$/;"	kind:typedef	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::iterator	access:public
_SortedAssociativeContainerConcept::__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _SortedAssociativeContainer& __c) {$/;"	kind:function	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:void	access:public	signature:(const _SortedAssociativeContainer & __c)
_SortedAssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_SortedAssociativeContainerConcept::__cp	./boost_concept_check.h	/^    _Const_iterator __cp;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_Const_iterator	access:public
_SortedAssociativeContainerConcept::__cr	./boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:std::pair<_Const_iterator,_Const_iterator>	access:public
_SortedAssociativeContainerConcept::__first	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type *	access:public
_SortedAssociativeContainerConcept::__k	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_type __k;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::key_type	access:public
_SortedAssociativeContainerConcept::__kc	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_compare __kc;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::key_compare	access:public
_SortedAssociativeContainerConcept::__last	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type *	access:public
_SortedAssociativeContainerConcept::__p	./boost_concept_check.h	/^    _Iterator __p;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_Iterator	access:public
_SortedAssociativeContainerConcept::__r	./boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:std::pair<_Iterator,_Iterator>	access:public
_SortedAssociativeContainerConcept::__t	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type	access:public
_SortedAssociativeContainerConcept::__vc	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_compare __vc;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_compare	access:public
_TEMPBUF_H	./stl_tempbuf.h	/^#define _TEMPBUF_H /;"	kind:macro	language:C++
_TREE_H	./stl_tree.h	/^#define _TREE_H /;"	kind:macro	language:C++
_Tag	./basic_string.h	/^          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;$/;"	kind:typedef	language:C++	function:std::basic_string::_S_construct_aux	typeref:typename:iterator_traits<_InIterator>::iterator_category
_Temporary_buffer	./stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Temporary_buffer	./stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer &)
_Temporary_buffer	./stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	class:std::_Temporary_buffer	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Temporary_buffer	./stl_tempbuf.h	/^    class _Temporary_buffer$/;"	kind:class	language:C++	namespace:std
_Tp	./valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_Dom::value_type	access:public
_Tp	./valarray_before.h	/^      typedef value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:value_type	access:public
_Tp	./valarray_before.h	/^      typedef value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:value_type	access:public
_Tp_alloc_type	./stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:protected
_Tp_alloc_type	./stl_deque.h	/^      typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::_Tp_alloc_type	access:private
_Tp_alloc_type	./stl_list.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:protected
_Tp_alloc_type	./stl_list.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Base::_Tp_alloc_type	access:private
_Tp_alloc_type	./stl_vector.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	kind:typedef	language:C++	struct:std::_Vector_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
_Tp_alloc_type	./stl_vector.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Base::_Tp_alloc_type	access:private
_Trivial	./stl_tempbuf.h	/^      typedef typename std::__is_scalar<_Tp>::__type _Trivial;$/;"	kind:typedef	language:C++	function:std::_Temporary_buffer::_Temporary_buffer	typeref:typename:std::__is_scalar<_Tp>::__type
_TrivialIteratorConcept	./boost_concept_check.h	/^  struct _TrivialIteratorConcept$/;"	kind:struct	language:C++
_TrivialIteratorConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_TrivialIteratorConcept	typeref:typename:void	access:public	signature:()
_TrivialIteratorConcept::__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_TrivialIteratorConcept	typeref:typename:_Tp	access:public
_Type	./boost_concept_check.h	/^struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };$/;"	kind:typedef	language:C++	struct:_Aux_require_same	typeref:typename:_Tp	access:public
_UnBase	./valarray_before.h	/^      _UnBase(const _Arg& __e) : _M_expr(__e) {}$/;"	kind:function	language:C++	class:std::_UnBase	access:public	signature:(const _Arg & __e)
_UnBase	./valarray_before.h	/^    class _UnBase$/;"	kind:class	language:C++	namespace:std
_UnClos	./valarray_before.h	/^      _UnClos(const _Arg& __e) : _Base(__e) {}$/;"	kind:function	language:C++	struct:std::_UnClos	access:public	signature:(const _Arg & __e)
_UnClos	./valarray_before.h	/^    struct _UnClos<_Oper, _Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_UnBase<_Oper,_Dom>
_UnClos	./valarray_before.h	/^    struct _UnClos<_Oper, _ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_UnBase<_Oper,valarray<_Tp>>
_UnaryFunctionConcept	./boost_concept_check.h	/^  struct _UnaryFunctionConcept$/;"	kind:struct	language:C++
_UnaryFunctionConcept	./boost_concept_check.h	/^  struct _UnaryFunctionConcept<_Func, void, _Arg> {$/;"	kind:struct	language:C++
_UnaryFunctionConcept::__arg	./boost_concept_check.h	/^    _Arg __arg;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Arg	access:public
_UnaryFunctionConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnaryFunctionConcept	typeref:typename:void	access:public	signature:()
_UnaryFunctionConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Func	access:public
_UnaryFunctionConcept::__r	./boost_concept_check.h	/^    _Return __r;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Return	access:public
_UnaryPredicateConcept	./boost_concept_check.h	/^  struct _UnaryPredicateConcept$/;"	kind:struct	language:C++
_UnaryPredicateConcept::__arg	./boost_concept_check.h	/^    _Arg __arg;$/;"	kind:member	language:C++	struct:_UnaryPredicateConcept	typeref:typename:_Arg	access:public
_UnaryPredicateConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnaryPredicateConcept	typeref:typename:void	access:public	signature:()
_UnaryPredicateConcept::__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_UnaryPredicateConcept	typeref:typename:_Func	access:public
_UniqueAssociativeContainerConcept	./boost_concept_check.h	/^  struct _UniqueAssociativeContainerConcept$/;"	kind:struct	language:C++
_UniqueAssociativeContainerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
_UniqueAssociativeContainerConcept::__first	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type *	access:public
_UniqueAssociativeContainerConcept::__last	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type *	access:public
_UniqueAssociativeContainerConcept::__pos_flag	./boost_concept_check.h	/^    std::pair<typename _UniqueAssociativeContainer::iterator, bool> __pos_flag;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:std::pair<typename _UniqueAssociativeContainer::iterator,bool>	access:public
_UniqueAssociativeContainerConcept::__t	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type	access:public
_UnsignedIntegerConcept	./boost_concept_check.h	/^  struct _UnsignedIntegerConcept {$/;"	kind:struct	language:C++
_UnsignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned int>$/;"	kind:struct	language:C++
_UnsignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned long long>$/;"	kind:struct	language:C++
_UnsignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned long>$/;"	kind:struct	language:C++
_UnsignedIntegerConcept	./boost_concept_check.h	/^  template <> struct _UnsignedIntegerConcept<unsigned short>$/;"	kind:struct	language:C++
_UnsignedIntegerConcept::__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnsignedIntegerConcept	typeref:typename:void	access:public	signature:()
_UnsignedIntegerConcept::__constraints	./boost_concept_check.h	/^    { void __constraints() {} };$/;"	kind:function	language:C++	struct:_UnsignedIntegerConcept	typeref:typename:void	access:public	signature:()
_VALARRAY_AFTER_H	./valarray_after.h	/^#define _VALARRAY_AFTER_H /;"	kind:macro	language:C++
_VALARRAY_ARRAY_H	./valarray_array.h	/^#define _VALARRAY_ARRAY_H /;"	kind:macro	language:C++
_VALARRAY_BEFORE_H	./valarray_before.h	/^#define _VALARRAY_BEFORE_H /;"	kind:macro	language:C++
_VECTOR_H	./stl_vector.h	/^#define _VECTOR_H /;"	kind:macro	language:C++
_ValFunClos	./valarray_before.h	/^      _ValFunClos(const _Dom& __e, _Tp __f(_Tp)) : _Base(__e, __f) {}$/;"	kind:function	language:C++	struct:std::_ValFunClos	access:public	signature:(const _Dom & __e,_Tp __f (_Tp))
_ValFunClos	./valarray_before.h	/^      _ValFunClos(const valarray<_Tp>& __v, _Tp __f(_Tp)) : _Base(__v, __f) {}$/;"	kind:function	language:C++	struct:std::_ValFunClos	access:public	signature:(const valarray<_Tp> & __v,_Tp __f (_Tp))
_ValFunClos	./valarray_before.h	/^    struct _ValFunClos<_Expr,_Dom> : _FunBase<_Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<_Dom,typename_Dom::value_type>
_ValFunClos	./valarray_before.h	/^    struct _ValFunClos<_ValArray,_Tp> : _FunBase<valarray<_Tp>, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<valarray<_Tp>,_Tp>
_ValueType	./stl_algo.h	/^	    _ValueType;$/;"	kind:typedef	language:C++	function:std::stable_partition	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::__heap_select	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::__introselect	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::__introsort_loop	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::__rotate	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::__unguarded_insertion_sort	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::binary_search	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::equal_range	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::lower_bound	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::nth_element	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::partial_sort	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::sort	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::stable_sort	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_algo.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::upper_bound	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_algo.h	/^          _ValueType;$/;"	kind:typedef	language:C++	function:std::inplace_merge	typeref:typename:iterator_traits<_BidirectionalIterator>::value_type
_ValueType	./stl_heap.h	/^	  _ValueType;$/;"	kind:typedef	language:C++	function:std::make_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_heap.h	/^	  _ValueType;$/;"	kind:typedef	language:C++	function:std::push_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_heap.h	/^	_ValueType;$/;"	kind:typedef	language:C++	function:std::pop_heap	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type
_ValueType	./stl_numeric.h	/^      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;$/;"	kind:typedef	language:C++	function:std::adjacent_difference	typeref:typename:iterator_traits<_InputIterator>::value_type
_ValueType	./stl_numeric.h	/^      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;$/;"	kind:typedef	language:C++	function:std::partial_sum	typeref:typename:iterator_traits<_InputIterator>::value_type
_ValueType	./stl_uninitialized.h	/^      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;$/;"	kind:typedef	language:C++	function:std::uninitialized_copy	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_uninitialized.h	/^      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;$/;"	kind:typedef	language:C++	function:std::uninitialized_fill	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	./stl_uninitialized.h	/^      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;$/;"	kind:typedef	language:C++	function:std::uninitialized_fill_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::includes	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::merge	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::set_difference	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::set_intersection	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::set_symmetric_difference	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algo.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::set_union	typeref:typename:iterator_traits<_InputIterator1>::value_type
_ValueType1	./stl_algobase.h	/^	_ValueType1;$/;"	kind:typedef	language:C++	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	./stl_algobase.h	/^            _ValueType1;$/;"	kind:typedef	language:C++	function:std::__iter_swap::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	./stl_algobase.h	/^      typedef typename iterator_traits<_BI1>::value_type _ValueType1;$/;"	kind:typedef	language:C++	function:std::__copy_backward_aux	typeref:typename:iterator_traits<_BI1>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::includes	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::merge	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::set_difference	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::set_intersection	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::set_symmetric_difference	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algo.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::set_union	typeref:typename:iterator_traits<_InputIterator2>::value_type
_ValueType2	./stl_algobase.h	/^	_ValueType2;$/;"	kind:typedef	language:C++	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::value_type
_ValueType2	./stl_algobase.h	/^      typedef typename iterator_traits<_BI2>::value_type _ValueType2;$/;"	kind:typedef	language:C++	function:std::__copy_backward_aux	typeref:typename:iterator_traits<_BI2>::value_type
_ValueTypeI	./stl_algobase.h	/^      typedef typename iterator_traits<_II>::value_type _ValueTypeI;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:iterator_traits<_II>::value_type
_ValueTypeO	./stl_algobase.h	/^      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:iterator_traits<_OI>::value_type
_Value_type	./boost_concept_check.h	/^      typedef typename _SimpleAssociativeContainer::value_type _Value_type;$/;"	kind:typedef	language:C++	function:_PairAssociativeContainerConcept::__constraints	typeref:typename:_SimpleAssociativeContainer::value_type
_Value_type	./boost_concept_check.h	/^      typedef typename _SimpleAssociativeContainer::value_type _Value_type;$/;"	kind:typedef	language:C++	function:_SimpleAssociativeContainerConcept::__constraints	typeref:typename:_SimpleAssociativeContainer::value_type
_Value_type	./boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	kind:typedef	language:C++	struct:_ContainerConcept	typeref:typename:_Container::value_type	access:public
_Value_type	./boost_concept_check.h	/^    typedef typename _Container::value_type _Value_type;$/;"	kind:typedef	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container::value_type	access:public
_Value_type	./stl_construct.h	/^                       _Value_type;$/;"	kind:typedef	language:C++	function:std::_Destroy	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_Value_type	./valarray_array.h	/^      typedef typename _Ta::value_type _Value_type;$/;"	kind:typedef	language:C++	function:std::__valarray_max	typeref:typename:_Ta::value_type
_Value_type	./valarray_array.h	/^      typedef typename _Ta::value_type _Value_type;$/;"	kind:typedef	language:C++	function:std::__valarray_min	typeref:typename:_Ta::value_type
_Vector_base	./stl_vector.h	/^      _Vector_base(const allocator_type& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:(const allocator_type & __a)
_Vector_base	./stl_vector.h	/^      _Vector_base(size_t __n, const allocator_type& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:(size_t __n,const allocator_type & __a)
_Vector_base	./stl_vector.h	/^    struct _Vector_base$/;"	kind:struct	language:C++	namespace:std
_Vector_impl	./stl_vector.h	/^	_Vector_impl(_Tp_alloc_type const& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base::_Vector_impl	access:public	signature:(_Tp_alloc_type const & __a)
_Vector_impl	./stl_vector.h	/^      struct _Vector_impl $/;"	kind:struct	language:C++	struct:std::_Vector_base	inherits:_Tp_alloc_type	access:public
_Vt	./valarray_before.h	/^      typedef typename _Arg::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_UnBase	typeref:typename:_Arg::value_type	access:public
_Vt	./valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase1	typeref:typename:_Clos::value_type	access:public
_Vt	./valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase2	typeref:typename:_Clos::value_type	access:public
_Vt	./valarray_before.h	/^      typedef typename _FirstArg::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase	typeref:typename:_FirstArg::value_type	access:public
_Words	./ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	kind:function	language:C++	struct:std::ios_base::_Words	access:public	signature:()
_Words	./ios_base.h	/^    struct _Words$/;"	kind:struct	language:C++	class:std::ios_base	access:protected
__L	./stl_tree.h	/^	  _Const_Link_type __L = _S_left(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::__rb_verify	typeref:typename:_Const_Link_type	file:
__R	./stl_tree.h	/^	  _Const_Link_type __R = _S_right(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::__rb_verify	typeref:typename:_Const_Link_type	file:
__a	./boost_concept_check.h	/^      _Tp __a(__b);                     \/\/ require copy constructor$/;"	kind:local	language:C++	function:_CopyConstructibleConcept::__constraints	typeref:typename:_Tp	file:
__a	./boost_concept_check.h	/^    _First __a;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_First	access:public
__a	./boost_concept_check.h	/^    _First __a;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_First	access:public
__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_ComparableConcept	typeref:typename:_Tp	access:public
__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_EqualityComparableConcept	typeref:typename:_Tp	access:public
__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_LessThanComparableConcept	typeref:typename:_Tp	access:public
__a	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
__a	./boost_concept_check.h	/^    _Tp __a;$/;"	kind:member	language:C++	struct:_AssignableConcept	typeref:typename:_Tp	access:public
__a	./boost_concept_check.h	/^    _Tp __a;$/;"	kind:member	language:C++	struct:_SGIAssignableConcept	typeref:typename:_Tp	access:public
__abs	./valarray_before.h	/^  struct __abs$/;"	kind:struct	language:C++	namespace:std
__acos	./valarray_before.h	/^  struct __acos$/;"	kind:struct	language:C++	namespace:std
__add_grouping	./locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
__adjust_heap	./stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __len,_Tp __value)
__adjust_heap	./stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __len,_Tp __value,_Compare __comp)
__advance	./stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
__advance	./stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
__advance	./stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
__after	./stl_tree.h	/^	  const_iterator __after = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:const_iterator	file:
__after	./stl_tree.h	/^	  const_iterator __after = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:const_iterator	file:
__after	./stl_tree.h	/^	  iterator __after = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:iterator	file:
__after	./stl_tree.h	/^	  iterator __after = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:iterator	file:
__alloc_swap	./allocator.h	/^    struct __alloc_swap$/;"	kind:struct	language:C++	namespace:std
__alloc_swap	./allocator.h	/^    struct __alloc_swap<_Alloc, false>$/;"	kind:struct	language:C++	namespace:std
__anon35db5b7f0103	./stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	kind:enum	language:C++	namespace:std
__anon39ebb53d0103	./locale_facets.h	/^      {$/;"	kind:enum	language:C++	class:std::__num_base	access:public
__anon39ebb53d0203	./locale_facets.h	/^    {$/;"	kind:enum	language:C++	class:std::__num_base	access:public
__anon39ebb53d0303	./locale_facets.h	/^    {$/;"	kind:enum	language:C++	class:std::money_base	access:public
__anon40b17a5e0103	./stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	kind:enum	language:C++	class:std::_Deque_base	access:protected
__anon6048a8ad0103	./stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	kind:enum	language:C++	namespace:std
__anon6048a8ad0203	./stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	kind:enum	language:C++	namespace:std
__anon68d21f9d0103	./ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	kind:enum	language:C++	class:std::ios_base	access:protected
__anonc75c47750103	./locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	kind:enum	language:C++	class:std::locale	access:private
__arg	./boost_concept_check.h	/^    _Arg __arg;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Arg	access:public
__arg	./boost_concept_check.h	/^    _Arg __arg;$/;"	kind:member	language:C++	struct:_UnaryPredicateConcept	typeref:typename:_Arg	access:public
__asin	./valarray_before.h	/^  struct __asin$/;"	kind:struct	language:C++	namespace:std
__asize	./stl_bvector.h	/^      const size_type __asize = _M_get_Bit_allocator().max_size();$/;"	kind:local	language:C++	function:std::vector::max_size	typeref:typename:const size_type	file:
__atan	./valarray_before.h	/^  struct __atan$/;"	kind:struct	language:C++	namespace:std
__atan2	./valarray_before.h	/^  struct __atan2$/;"	kind:struct	language:C++	namespace:std
__aux_require_boolean_expr	./boost_concept_check.h	/^  void __aux_require_boolean_expr(const _Tp& __t) {$/;"	kind:function	language:C++	typeref:typename:void	signature:(const _Tp & __t)
__b	./boost_concept_check.h	/^    _Second __b;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_Second	access:public
__b	./boost_concept_check.h	/^    _Second __b;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_Second	access:public
__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_ComparableConcept	typeref:typename:_Tp	access:public
__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_EqualityComparableConcept	typeref:typename:_Tp	access:public
__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_LessThanComparableConcept	typeref:typename:_Tp	access:public
__b	./boost_concept_check.h	/^    _Tp __a, __b;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
__b	./boost_concept_check.h	/^    _Tp __b;$/;"	kind:member	language:C++	struct:_CopyConstructibleConcept	typeref:typename:_Tp	access:public
__b	./boost_concept_check.h	/^    bool __b;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:bool	access:public
__backTrack	./stl_algo.h	/^	  for (_RandomAccessIter __backTrack = __lookAhead - 1; $/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:_RandomAccessIter	file:
__before	./stl_tree.h	/^	  const_iterator __before = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:const_iterator	file:
__before	./stl_tree.h	/^	  const_iterator __before = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:const_iterator	file:
__before	./stl_tree.h	/^	  iterator __before = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:iterator	file:
__before	./stl_tree.h	/^	  iterator __before = __position;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:iterator	file:
__begin	./stl_algo.h	/^	  _ForwardIterator __begin =$/;"	kind:local	language:C++	function:std::__stable_partition_adaptive	typeref:typename:_ForwardIterator	file:
__begin	./stl_algo.h	/^      _ForwardIterator __begin = std::__inplace_stable_partition(__first,$/;"	kind:local	language:C++	function:std::__inplace_stable_partition	typeref:typename:_ForwardIterator	file:
__beof	./streambuf_iterator.h	/^	const bool __beof = __b._M_at_eof();$/;"	kind:local	language:C++	function:std::istreambuf_iterator::equal	typeref:typename:const bool	file:
__bi1	./stl_algobase.h	/^      const bool __bi1 = __is_normal_iterator<_BI1>::__value;$/;"	kind:local	language:C++	function:std::copy_backward	typeref:typename:const bool	file:
__bi2	./stl_algobase.h	/^      const bool __bi2 = __is_normal_iterator<_BI2>::__value;$/;"	kind:local	language:C++	function:std::copy_backward	typeref:typename:const bool	file:
__bitwise_and	./valarray_before.h	/^  struct __bitwise_and$/;"	kind:struct	language:C++	namespace:std
__bitwise_not	./valarray_before.h	/^  struct __bitwise_not$/;"	kind:struct	language:C++	namespace:std
__bitwise_or	./valarray_before.h	/^  struct __bitwise_or$/;"	kind:struct	language:C++	namespace:std
__bitwise_xor	./valarray_before.h	/^  struct __bitwise_xor$/;"	kind:struct	language:C++	namespace:std
__buf	./stl_algo.h	/^	  _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,$/;"	kind:local	language:C++	function:std::stable_partition	typeref:typename:_Temporary_buffer<_ForwardIterator,_ValueType>	file:
__buf	./stl_algo.h	/^      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,$/;"	kind:local	language:C++	function:std::inplace_merge	typeref:typename:_Temporary_buffer<_BidirectionalIterator,_ValueType>	file:
__buf	./stl_algo.h	/^      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,$/;"	kind:local	language:C++	function:std::stable_sort	typeref:typename:_Temporary_buffer<_RandomAccessIterator,_ValueType>	file:
__buffer_end	./stl_algo.h	/^	  _Pointer __buffer_end = std::copy(__first, __middle, __buffer);$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_Pointer	file:
__buffer_end	./stl_algo.h	/^	  _Pointer __buffer_end = std::copy(__middle, __last, __buffer);$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_Pointer	file:
__buffer_end	./stl_algo.h	/^      _BidirectionalIterator2 __buffer_end;$/;"	kind:local	language:C++	function:std::__rotate_adaptive	typeref:typename:_BidirectionalIterator2	file:
__buffer_last	./stl_algo.h	/^      const _Pointer __buffer_last = __buffer + __len;$/;"	kind:local	language:C++	function:std::__merge_sort_with_buffer	typeref:typename:const _Pointer	file:
__c	./boost_concept_check.h	/^      _MultipleAssociativeContainer __c(__first, __last);$/;"	kind:local	language:C++	function:_MultipleAssociativeContainerConcept::__constraints	typeref:typename:_MultipleAssociativeContainer	file:
__c	./boost_concept_check.h	/^      _UniqueAssociativeContainer __c(__first, __last);$/;"	kind:local	language:C++	function:_UniqueAssociativeContainerConcept::__constraints	typeref:typename:_UniqueAssociativeContainer	file:
__c	./boost_concept_check.h	/^      const _Container __c;$/;"	kind:local	language:C++	function:_ContainerConcept::__constraints	typeref:typename:const _Container	file:
__c	./boost_concept_check.h	/^      const _RandomAccessContainer __c;$/;"	kind:local	language:C++	function:_RandomAccessContainerConcept::__constraints	typeref:typename:const _RandomAccessContainer	file:
__c	./boost_concept_check.h	/^      const _ReversibleContainer __c;$/;"	kind:local	language:C++	function:_ReversibleContainerConcept::__constraints	typeref:typename:const _ReversibleContainer	file:
__c	./boost_concept_check.h	/^    _AssociativeContainer __c;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer	access:public
__c	./boost_concept_check.h	/^    _BackInsertionSequence __c;$/;"	kind:member	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence	access:public
__c	./boost_concept_check.h	/^    _Container __c, __c2;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container	access:public
__c	./boost_concept_check.h	/^    _FrontInsertionSequence __c;$/;"	kind:member	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:_FrontInsertionSequence	access:public
__c	./boost_concept_check.h	/^    _RandomAccessContainer __c;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_RandomAccessContainer	access:public
__c	./boost_concept_check.h	/^    _ReversibleContainer __c;$/;"	kind:member	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:_ReversibleContainer	access:public
__c	./locale_facets.h	/^	    char __c;$/;"	kind:local	language:C++	function:std::ctype::_M_narrow_init	typeref:typename:char	file:
__c	./ostream_insert.h	/^      const _CharT __c = __out.fill();$/;"	kind:local	language:C++	function:std::__ostream_fill	typeref:typename:const _CharT	file:
__c	./streambuf_iterator.h	/^	  int_type __c = __sb->sgetc();$/;"	kind:local	language:C++	function:std::__copy_aux	typeref:typename:int_type	file:
__c	./streambuf_iterator.h	/^	  int_type __c = __sb->sgetc();$/;"	kind:local	language:C++	function:std::find	typeref:typename:int_type	file:
__c2	./boost_concept_check.h	/^    _Container __c, __c2;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Container	access:public
__cache_type	./locale_facets.h	/^      typedef __moneypunct_cache<_CharT, _Intl>     __cache_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:__moneypunct_cache<_CharT,_Intl>	access:public
__cache_type	./locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
__cache_type	./locale_facets.h	/^      typedef __timepunct_cache<_CharT>	__cache_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:__timepunct_cache<_CharT>	access:public
__cerb	./ostream_insert.h	/^      typename __ostream_type::sentry __cerb(__out);$/;"	kind:local	language:C++	function:std::__ostream_insert	typeref:typename:__ostream_type::sentry	file:
__char_type	./locale_facets.h	/^      typedef _CharT			__char_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:_CharT	access:public
__check_facet	./localefwd.h	/^    __check_facet(const _Facet* __f)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Facet &	signature:(const _Facet * __f)
__child	./stl_heap.h	/^      for (_Distance __child = 1; __child < __n; ++__child)$/;"	kind:local	language:C++	function:std::__is_heap	typeref:typename:_Distance	file:
__chunk_insertion_sort	./stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Distance __chunk_size)
__chunk_insertion_sort	./stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Distance __chunk_size,_Compare __comp)
__ci	./boost_concept_check.h	/^    _Const_iterator __ci;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_Const_iterator	access:public
__codecvt_abstract_base	./codecvt.h	/^      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	access:protected	signature:(size_t __refs=0)
__codecvt_abstract_base	./codecvt.h	/^    class __codecvt_abstract_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,codecvt_base
__comp	./stl_tree.h	/^      bool __comp = true;$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:bool	file:
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _AssociativeContainer& __c) {$/;"	kind:function	language:C++	struct:_AssociativeContainerConcept	typeref:typename:void	access:public	signature:(const _AssociativeContainer & __c)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _BackInsertionSequence& __c) {$/;"	kind:function	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:void	access:public	signature:(const _BackInsertionSequence & __c)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Func& __fun) {$/;"	kind:function	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:void	access:public	signature:(const _Func & __fun)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Sequence& __c) {$/;"	kind:function	language:C++	struct:_SequenceConcept	typeref:typename:void	access:public	signature:(const _Sequence & __c)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _SortedAssociativeContainer& __c) {$/;"	kind:function	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:void	access:public	signature:(const _SortedAssociativeContainer & __c)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __a) {$/;"	kind:function	language:C++	struct:_CopyConstructibleConcept	typeref:typename:void	access:public	signature:(const _Tp & __a)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	kind:function	language:C++	struct:_AssignableConcept	typeref:typename:void	access:public	signature:(const _Tp & __b)
__const_constraints	./boost_concept_check.h	/^    void __const_constraints(const _Tp& __b) {$/;"	kind:function	language:C++	struct:_SGIAssignableConcept	typeref:typename:void	access:public	signature:(const _Tp & __b)
__constraints	./boost_concept_check.h	/^                                                { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_AssignableConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_AssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BidirectionalIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BinaryFunctionConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_BinaryPredicateConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ComparableConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ConvertibleConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_CopyConstructibleConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_DefaultConstructibleConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_EqualityComparableConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ForwardContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ForwardIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_GeneratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_InputIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_LessThanComparableConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_BidirectionalIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ForwardContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ForwardIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_ReversibleContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_OutputIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_PairAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_ReversibleContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SGIAssignableConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SameTypeConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SequenceConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SimpleAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_TrivialIteratorConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnaryFunctionConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnaryPredicateConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    void __constraints() {$/;"	kind:function	language:C++	struct:_UnsignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^    { void __constraints() {} };$/;"	kind:function	language:C++	struct:_UnsignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<short> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _IntegerConcept<unsigned short> { void __constraints(){} };$/;"	kind:function	language:C++	struct:_IntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<int> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long long> { void __constraints(){}};$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<long> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
__constraints	./boost_concept_check.h	/^  template <> struct _SignedIntegerConcept<short> { void __constraints() {} };$/;"	kind:function	language:C++	struct:_SignedIntegerConcept	typeref:typename:void	access:public	signature:()
__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char * __in,_Tv & __out,ios_base::iostate & __err,const __c_locale & __cloc)
__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
__copy	./stl_algobase.h	/^    struct __copy$/;"	kind:struct	language:C++	namespace:std
__copy	./stl_algobase.h	/^    struct __copy<_BoolType, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
__copy	./stl_algobase.h	/^    struct __copy<true, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
__copy_aux	./stl_algobase.h	/^    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT>)
__copy_aux	./stl_algobase.h	/^    __copy_aux(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OI	signature:(_II __first,_II __last,_OI __result)
__copy_aux	./stl_algobase.h	/^    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT>)
__copy_aux	./stl_algobase.h	/^    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,_CharT *)
__copy_aux	./streambuf_iterator.h	/^    __copy_aux(_CharT* __first, _CharT* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_aux	./streambuf_iterator.h	/^    __copy_aux(const _CharT* __first, const _CharT* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_aux	./streambuf_iterator.h	/^    __copy_aux(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
__copy_b	./stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	struct:std::__copy_backward	typeref:typename:_BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_b	./stl_algobase.h	/^        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	kind:function	language:C++	struct:std::__copy_backward	typeref:typename:_Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
__copy_b_n	./stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	struct:std::__copy_backward_normal	typeref:typename:_BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_backward	./stl_algobase.h	/^    struct __copy_backward$/;"	kind:struct	language:C++	namespace:std
__copy_backward	./stl_algobase.h	/^    struct __copy_backward<_BoolType, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
__copy_backward	./stl_algobase.h	/^    struct __copy_backward<true, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
__copy_backward_aux	./stl_algobase.h	/^    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal$/;"	kind:struct	language:C++	namespace:std
__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<false, true>$/;"	kind:struct	language:C++	namespace:std
__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<true, false>$/;"	kind:struct	language:C++	namespace:std
__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<true, true>$/;"	kind:struct	language:C++	namespace:std
__copy_n	./stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	struct:std::__copy_normal	typeref:typename:_OI	access:public	signature:(_II __first,_II __last,_OI __result)
__copy_normal	./stl_algobase.h	/^    struct __copy_normal$/;"	kind:struct	language:C++	namespace:std
__copy_normal	./stl_algobase.h	/^    struct __copy_normal<false, true>$/;"	kind:struct	language:C++	namespace:std
__copy_normal	./stl_algobase.h	/^    struct __copy_normal<true, false>$/;"	kind:struct	language:C++	namespace:std
__copy_normal	./stl_algobase.h	/^    struct __copy_normal<true, true>$/;"	kind:struct	language:C++	namespace:std
__cos	./valarray_before.h	/^  struct __cos$/;"	kind:struct	language:C++	namespace:std
__cosh	./valarray_before.h	/^  struct __cosh$/;"	kind:struct	language:C++	namespace:std
__cp	./boost_concept_check.h	/^    _Const_iterator __cp;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_Const_iterator	access:public
__cr	./boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:std::pair<_Const_iterator,_Const_iterator>	access:public
__cr	./boost_concept_check.h	/^    std::pair<_Const_iterator,_Const_iterator> __cr;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:std::pair<_Const_iterator,_Const_iterator>	access:public
__ctype_abstract_base	./locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
__ctype_abstract_base	./locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,ctype_base
__ctype_type	./basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
__cur	./stl_bvector.h	/^	iterator __cur = begin();$/;"	kind:local	language:C++	function:std::vector::_M_assign_aux	typeref:typename:iterator	file:
__cur	./stl_deque.h	/^      _Tp** __cur;$/;"	kind:local	language:C++	function:std::_Deque_base::_M_create_nodes	typeref:typename:_Tp **	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __first;$/;"	kind:local	language:C++	function:std::__uninitialized_fill_a	typeref:typename:_ForwardIterator	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __first;$/;"	kind:local	language:C++	function:std::__uninitialized_fill_aux	typeref:typename:_ForwardIterator	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __first;$/;"	kind:local	language:C++	function:std::__uninitialized_fill_n_a	typeref:typename:_ForwardIterator	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __first;$/;"	kind:local	language:C++	function:std::__uninitialized_fill_n_aux	typeref:typename:_ForwardIterator	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __result;$/;"	kind:local	language:C++	function:std::__uninitialized_copy_a	typeref:typename:_ForwardIterator	file:
__cur	./stl_uninitialized.h	/^      _ForwardIterator __cur = __result;$/;"	kind:local	language:C++	function:std::__uninitialized_copy_aux	typeref:typename:_ForwardIterator	file:
__current	./stl_algo.h	/^      _ForwardIterator1 __current = __first1;$/;"	kind:local	language:C++	function:std::search	typeref:typename:_ForwardIterator1	file:
__cut	./stl_algo.h	/^	  _RandomAccessIterator __cut =$/;"	kind:local	language:C++	function:std::__introselect	typeref:typename:_RandomAccessIterator	file:
__cut	./stl_algo.h	/^	  _RandomAccessIterator __cut =$/;"	kind:local	language:C++	function:std::__introsort_loop	typeref:typename:_RandomAccessIterator	file:
__d	./stl_algo.h	/^      const _Distance __d = __gcd(__n, __k);$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:const _Distance	file:
__d	./stl_iterator_base_funcs.h	/^      typename iterator_traits<_InputIterator>::difference_type __d = __n;$/;"	kind:local	language:C++	function:std::advance	typeref:typename:iterator_traits<_InputIterator>::difference_type	file:
__deque_buf_size	./stl_deque.h	/^  __deque_buf_size(size_t __size)$/;"	kind:function	language:C++	namespace:std	typeref:typename:size_t	signature:(size_t __size)
__dest	./stl_algo.h	/^      _ForwardIterator __dest = __first;$/;"	kind:local	language:C++	function:std::unique	typeref:typename:_ForwardIterator	file:
__destroy_aux	./stl_construct.h	/^    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,__false_type)
__destroy_aux	./stl_construct.h	/^    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator,_ForwardIterator,__true_type)
__distance	./stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
__distance	./stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
__divides	./valarray_before.h	/^  struct __divides$/;"	kind:struct	language:C++	namespace:std
__do_get	./locale_facets.h	/^      __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,double & __units) const
__do_get	./locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,double &) const
__do_put	./locale_facets.h	/^      __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,double __units) const
__do_put	./locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,double __v) const
__end	./stl_algo.h	/^	  _ForwardIterator __end =$/;"	kind:local	language:C++	function:std::__stable_partition_adaptive	typeref:typename:_ForwardIterator	file:
__end	./stl_algo.h	/^      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,$/;"	kind:local	language:C++	function:std::__inplace_stable_partition	typeref:typename:_ForwardIterator	file:
__end1	./stl_list.h	/^      const_iterator __end1 = __x.end();$/;"	kind:local	language:C++	function:std::operator ==	typeref:typename:const_iterator	file:
__end2	./stl_list.h	/^      const_iterator __end2 = __y.end();$/;"	kind:local	language:C++	function:std::operator ==	typeref:typename:const_iterator	file:
__eof	./streambuf_iterator.h	/^	const int_type __eof = traits_type::eof();$/;"	kind:local	language:C++	function:std::istreambuf_iterator::_M_at_eof	typeref:typename:const int_type	file:
__eof	./streambuf_iterator.h	/^	const int_type __eof = traits_type::eof();$/;"	kind:local	language:C++	function:std::istreambuf_iterator::_M_get	typeref:typename:const int_type	file:
__equal_to	./valarray_before.h	/^  struct __equal_to$/;"	kind:struct	language:C++	namespace:std
__error_type_must_be_a_signed_integer_type	./boost_concept_check.h	/^void __error_type_must_be_a_signed_integer_type();$/;"	kind:prototype	language:C++	typeref:typename:void	signature:()
__error_type_must_be_an_integer_type	./boost_concept_check.h	/^void __error_type_must_be_an_integer_type();$/;"	kind:prototype	language:C++	typeref:typename:void	signature:()
__error_type_must_be_an_unsigned_integer_type	./boost_concept_check.h	/^void __error_type_must_be_an_unsigned_integer_type();$/;"	kind:prototype	language:C++	typeref:typename:void	signature:()
__exp	./valarray_before.h	/^  struct __exp$/;"	kind:struct	language:C++	namespace:std
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Func	access:public
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_BinaryPredicateConcept	typeref:typename:_Func	access:public
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_Const_BinaryPredicateConcept	typeref:typename:_Func	access:public
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_GeneratorConcept	typeref:typename:_Func	access:public
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Func	access:public
__f	./boost_concept_check.h	/^    _Func __f;$/;"	kind:member	language:C++	struct:_UnaryPredicateConcept	typeref:typename:_Func	access:public
__fill	./stl_algobase.h	/^    struct __fill$/;"	kind:struct	language:C++	namespace:std
__fill	./stl_algobase.h	/^    struct __fill<true>$/;"	kind:struct	language:C++	namespace:std
__fill_bvector	./stl_bvector.h	/^  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Bit_iterator __first,_Bit_iterator __last,bool __x)
__fill_n	./stl_algobase.h	/^    struct __fill_n$/;"	kind:struct	language:C++	namespace:std
__fill_n	./stl_algobase.h	/^    struct __fill_n<true>$/;"	kind:struct	language:C++	namespace:std
__final_insertion_sort	./stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
__final_insertion_sort	./stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
__find	./stl_algo.h	/^    __find(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __val,input_iterator_tag)
__find	./stl_algo.h	/^    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,const _Tp & __val,random_access_iterator_tag)
__find_end	./stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,bidirectional_iterator_tag,bidirectional_iterator_tag)
__find_end	./stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,bidirectional_iterator_tag,bidirectional_iterator_tag,_BinaryPredicate __comp)
__find_end	./stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,forward_iterator_tag,forward_iterator_tag)
__find_end	./stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,forward_iterator_tag,forward_iterator_tag,_BinaryPredicate __comp)
__find_if	./stl_algo.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
__find_if	./stl_algo.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
__first	./boost_concept_check.h	/^    _First __first;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_First	access:public
__first	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type *	access:public
__first	./boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type *	access:public
__first	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type *	access:public
__first	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type *	access:public
__first2	./stl_algo.h	/^      _ForwardIterator __first2 = __middle;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_ForwardIterator	file:
__first_cut	./stl_algo.h	/^	  _BidirectionalIterator __first_cut = __first;$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_BidirectionalIterator	file:
__first_cut	./stl_algo.h	/^      _BidirectionalIterator __first_cut = __first;$/;"	kind:local	language:C++	function:std::__merge_without_buffer	typeref:typename:_BidirectionalIterator	file:
__fun	./valarray_before.h	/^    struct __fun$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__equal_to, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__greater, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__greater_equal, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__less, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__less_equal, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__logical_and, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__logical_not, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__logical_or, _Tp>$/;"	kind:struct	language:C++	namespace:std
__fun	./valarray_before.h	/^    struct __fun<__not_equal_to, _Tp>$/;"	kind:struct	language:C++	namespace:std
__gcd	./stl_algo.h	/^    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_EuclideanRingElement	signature:(_EuclideanRingElement __m,_EuclideanRingElement __n)
__glibcxx_class_requires	./concept_check.h	/^#define __glibcxx_class_requires(/;"	kind:macro	language:C++	signature:(_a,_C)
__glibcxx_class_requires	./concept_check.h	/^#define __glibcxx_class_requires(/;"	kind:macro	language:C++	signature:(_a,_b)
__glibcxx_class_requires2	./concept_check.h	/^#define __glibcxx_class_requires2(/;"	kind:macro	language:C++	signature:(_a,_b,_C)
__glibcxx_class_requires2	./concept_check.h	/^#define __glibcxx_class_requires2(/;"	kind:macro	language:C++	signature:(_a,_b,_c)
__glibcxx_class_requires3	./concept_check.h	/^#define __glibcxx_class_requires3(/;"	kind:macro	language:C++	signature:(_a,_b,_c,_C)
__glibcxx_class_requires3	./concept_check.h	/^#define __glibcxx_class_requires3(/;"	kind:macro	language:C++	signature:(_a,_b,_c,_d)
__glibcxx_class_requires4	./concept_check.h	/^#define __glibcxx_class_requires4(/;"	kind:macro	language:C++	signature:(_a,_b,_c,_d,_C)
__glibcxx_class_requires4	./concept_check.h	/^#define __glibcxx_class_requires4(/;"	kind:macro	language:C++	signature:(_a,_b,_c,_d,_e)
__glibcxx_function_requires	./concept_check.h	/^#define __glibcxx_function_requires(/;"	kind:macro	language:C++	signature:(...)
__greater	./valarray_before.h	/^  struct __greater$/;"	kind:struct	language:C++	namespace:std
__greater_equal	./valarray_before.h	/^  struct __greater_equal$/;"	kind:struct	language:C++	namespace:std
__half	./stl_algo.h	/^      _DistanceType __half;$/;"	kind:local	language:C++	function:std::equal_range	typeref:typename:_DistanceType	file:
__half	./stl_algo.h	/^      _DistanceType __half;$/;"	kind:local	language:C++	function:std::lower_bound	typeref:typename:_DistanceType	file:
__half	./stl_algo.h	/^      _DistanceType __half;$/;"	kind:local	language:C++	function:std::upper_bound	typeref:typename:_DistanceType	file:
__heap_select	./stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last)
__heap_select	./stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,_Compare __comp)
__i	./boost_concept_check.h	/^      _Const_reverse_iterator __i = __c.rbegin();$/;"	kind:local	language:C++	function:_ReversibleContainerConcept::__constraints	typeref:typename:_Const_reverse_iterator	file:
__i	./boost_concept_check.h	/^      _Reverse_iterator __i = __c.rbegin();$/;"	kind:local	language:C++	function:_Mutable_ReversibleContainerConcept::__constraints	typeref:typename:_Reverse_iterator	file:
__i	./boost_concept_check.h	/^    _Const_iterator __i;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:_Const_iterator	access:public
__i	./boost_concept_check.h	/^    _Iterator __i;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_Iterator	access:public
__i	./boost_concept_check.h	/^    _Iterator __i;$/;"	kind:member	language:C++	struct:_Mutable_ContainerConcept	typeref:typename:_Iterator	access:public
__i	./boost_concept_check.h	/^    _Size_type __i;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessContainerConcept	typeref:typename:_Size_type	access:public
__i	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_BidirectionalIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_ForwardIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_InputIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_BidirectionalIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_ForwardIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_OutputIteratorConcept	typeref:typename:_Tp	access:public
__i	./boost_concept_check.h	/^    _Tp __i;$/;"	kind:member	language:C++	struct:_TrivialIteratorConcept	typeref:typename:_Tp	access:public
__i	./char_traits.h	/^      for (std::size_t __i = 0; __i < __n; ++__i)$/;"	kind:local	language:C++	function:char_traits::compare	typeref:typename:std::size_t	file:
__i	./char_traits.h	/^      for (std::size_t __i = 0; __i < __n; ++__i)$/;"	kind:local	language:C++	function:char_traits::find	typeref:typename:std::size_t	file:
__i	./char_traits.h	/^      std::size_t __i = 0;$/;"	kind:local	language:C++	function:char_traits::length	typeref:typename:std::size_t	file:
__i	./locale_classes.h	/^	for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)$/;"	kind:local	language:C++	function:std::locale::_Impl::_M_check_same_name	typeref:typename:size_t	file:
__i	./locale_facets.h	/^	for (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)$/;"	kind:local	language:C++	function:std::ctype::_M_narrow_init	typeref:typename:size_t	file:
__i	./locale_facets.h	/^	for (size_t __i = 0; __i < sizeof(_M_widen); ++__i)$/;"	kind:local	language:C++	function:std::ctype::_M_widen_init	typeref:typename:size_t	file:
__i	./stl_algo.h	/^	  _ForwardIterator __i = __first;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:_ForwardIterator	file:
__i	./stl_algo.h	/^	for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)$/;"	kind:local	language:C++	function:std::random_shuffle	typeref:typename:_RandomAccessIterator	file:
__i	./stl_algo.h	/^      _BidirectionalIterator __i = __first;$/;"	kind:local	language:C++	function:std::next_permutation	typeref:typename:_BidirectionalIterator	file:
__i	./stl_algo.h	/^      _BidirectionalIterator __i = __first;$/;"	kind:local	language:C++	function:std::prev_permutation	typeref:typename:_BidirectionalIterator	file:
__i	./stl_algo.h	/^      _ForwardIterator __i = __first;$/;"	kind:local	language:C++	function:std::remove	typeref:typename:_ForwardIterator	file:
__i	./stl_algo.h	/^      _ForwardIterator __i = __first;$/;"	kind:local	language:C++	function:std::remove_if	typeref:typename:_ForwardIterator	file:
__i	./stl_algo.h	/^      _ForwardIterator __i = std::lower_bound(__first, __last, __val);$/;"	kind:local	language:C++	function:std::binary_search	typeref:typename:_ForwardIterator	file:
__i	./stl_algo.h	/^      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);$/;"	kind:local	language:C++	function:std::binary_search	typeref:typename:_ForwardIterator	file:
__i	./stl_algo.h	/^      for (_Distance __i = 0; __i < __d; __i++)$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_Distance	file:
__i	./stl_algo.h	/^      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)$/;"	kind:local	language:C++	function:std::__insertion_sort	typeref:typename:_RandomAccessIterator	file:
__i	./stl_algo.h	/^      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)$/;"	kind:local	language:C++	function:std::random_shuffle	typeref:typename:_RandomAccessIterator	file:
__i	./stl_algo.h	/^      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)$/;"	kind:local	language:C++	function:std::__unguarded_insertion_sort	typeref:typename:_RandomAccessIterator	file:
__i	./stl_algo.h	/^      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)$/;"	kind:local	language:C++	function:std::__heap_select	typeref:typename:_RandomAccessIterator	file:
__i	./stl_bvector.h	/^		iterator __i = _M_copy_aligned(begin(), __position,$/;"	kind:local	language:C++	function:std::vector::_M_insert_range	typeref:typename:iterator	file:
__i	./stl_bvector.h	/^	  iterator __i = _M_copy_aligned(begin(), __position,$/;"	kind:local	language:C++	function:std::vector::_M_fill_insert	typeref:typename:iterator	file:
__i	./stl_bvector.h	/^	  iterator __i = _M_copy_aligned(begin(), __position,$/;"	kind:local	language:C++	function:std::vector::_M_insert_aux	typeref:typename:iterator	file:
__i	./stl_map.h	/^	const_iterator __i = lower_bound(__k);$/;"	kind:local	language:C++	function:std::map::at	typeref:typename:const_iterator	file:
__i	./stl_map.h	/^	iterator __i = lower_bound(__k);$/;"	kind:local	language:C++	function:std::map::at	typeref:typename:iterator	file:
__i	./valarray_array.h	/^      for (size_t __i = 0; __i < __n; ++__i)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__i	./valarray_array.h	/^      for (size_t __i = 0; __i < __n; ++__i, ++__a, __b += __s)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__i	./valarray_array.h	/^      for (size_t __i = 0; __i < __n; ++__i, ++__b, __a += __s)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__i	./valarray_array.h	/^      for (size_t __i = 0; __i < __n; ++__i, __a += __s)$/;"	kind:local	language:C++	function:std::__valarray_fill	typeref:typename:size_t	file:
__i	./valarray_array.h	/^      for (size_t __i = 1; __i < __s; ++__i)$/;"	kind:local	language:C++	function:std::__valarray_max	typeref:typename:size_t	file:
__i	./valarray_array.h	/^      for (size_t __i = 1; __i < __s; ++__i)$/;"	kind:local	language:C++	function:std::__valarray_min	typeref:typename:size_t	file:
__i1	./stl_list.h	/^      const_iterator __i1 = __x.begin();$/;"	kind:local	language:C++	function:std::operator ==	typeref:typename:const_iterator	file:
__i2	./stl_list.h	/^      const_iterator __i2 = __y.begin();$/;"	kind:local	language:C++	function:std::operator ==	typeref:typename:const_iterator	file:
__ii	./stl_algo.h	/^	  _BidirectionalIterator __ii = __i;$/;"	kind:local	language:C++	function:std::next_permutation	typeref:typename:_BidirectionalIterator	file:
__ii	./stl_algo.h	/^	  _BidirectionalIterator __ii = __i;$/;"	kind:local	language:C++	function:std::prev_permutation	typeref:typename:_BidirectionalIterator	file:
__in	./stl_algobase.h	/^       const bool __in = __is_normal_iterator<_InputIterator>::__value;$/;"	kind:local	language:C++	function:std::copy	typeref:typename:const bool	file:
__ineof	./streambuf_iterator.h	/^	  bool __ineof;$/;"	kind:local	language:C++	function:std::copy	typeref:typename:bool	file:
__inplace_stable_partition	./stl_algo.h	/^    __inplace_stable_partition(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,_Distance __len)
__inplace_stable_sort	./stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
__inplace_stable_sort	./stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
__insert_left	./stl_tree.h	/^      bool __insert_left = (__x != 0 || __p == _M_end()$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert	typeref:typename:bool	file:
__insert_left	./stl_tree.h	/^      bool __insert_left = (__x != 0 || __p == _M_end()$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_lower	typeref:typename:bool	file:
__insertion_sort	./stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
__insertion_sort	./stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
__introselect	./stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Size __depth_limit)
__introselect	./stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Size __depth_limit,_Compare __comp)
__introsort_loop	./stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Size __depth_limit)
__introsort_loop	./stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Size __depth_limit,_Compare __comp)
__ios_base	./ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	kind:typedef	language:C++	function:std::__ostream_fill	typeref:typename:__ostream_type::ios_base
__ios_base	./ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	kind:typedef	language:C++	function:std::__ostream_insert	typeref:typename:__ostream_type::ios_base
__ios_base	./ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	kind:typedef	language:C++	function:std::__ostream_write	typeref:typename:__ostream_type::ios_base
__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _Distance __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_Distance __n)
__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_StrictWeakOrdering __comp)
__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_StrictWeakOrdering __comp,_Distance __n)
__is_iterator_type	./streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:istreambuf_iterator<_CharT>
__is_iterator_type	./streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>                  __is_iterator_type;$/;"	kind:typedef	language:C++	function:std::find	typeref:typename:istreambuf_iterator<_CharT>
__it	./stl_tree.h	/^      for (const_iterator __it = begin(); __it != end(); ++__it)$/;"	kind:local	language:C++	function:std::_Rb_tree::__rb_verify	typeref:typename:const_iterator	file:
__iter	./stl_algo.h	/^	for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)$/;"	kind:local	language:C++	function:std::find_first_of	typeref:typename:_ForwardIterator	file:
__iter_swap	./stl_algobase.h	/^    struct __iter_swap$/;"	kind:struct	language:C++	namespace:std
__iter_swap	./stl_algobase.h	/^    struct __iter_swap<true>$/;"	kind:struct	language:C++	namespace:std
__iterator_category	./stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
__ival	./streambuf_iterator.h	/^	  const int_type __ival = traits_type::to_int_type(__val);$/;"	kind:local	language:C++	function:std::find	typeref:typename:const int_type	file:
__j	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_Mutable_TrivialIteratorConcept	typeref:typename:_Tp	access:public
__j	./boost_concept_check.h	/^    _Tp __i, __j;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:_Tp	access:public
__j	./locale_facets.h	/^      for (int __j = 0; __j < __len; __j++, ++__s)$/;"	kind:local	language:C++	function:std::__write	typeref:typename:int	file:
__j	./stl_algo.h	/^	      _BidirectionalIterator __j = __last;$/;"	kind:local	language:C++	function:std::next_permutation	typeref:typename:_BidirectionalIterator	file:
__j	./stl_algo.h	/^	      _BidirectionalIterator __j = __last;$/;"	kind:local	language:C++	function:std::prev_permutation	typeref:typename:_BidirectionalIterator	file:
__j	./stl_algo.h	/^	      for (_Distance __j = 0; __j < __k \/ __d - 1; __j ++)$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_Distance	file:
__j	./stl_algo.h	/^	      for (_Distance __j = 0; __j < __l \/ __d; __j++)$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_Distance	file:
__j	./stl_list.h	/^	iterator __j = __i;$/;"	kind:local	language:C++	function:std::list::splice	typeref:typename:iterator	file:
__j	./stl_tree.h	/^      iterator __j = iterator(__y);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:iterator	file:
__j	./stl_tree.h	/^      iterator __j = iterator(__y);$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:iterator	file:
__j	./stl_tree.h	/^     const_iterator __j = const_iterator(__y);$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:const_iterator	file:
__j	./valarray_array.h	/^      for (size_t __j = 0; __j < __n; ++__j, ++__a, ++__i)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__j	./valarray_array.h	/^      for (size_t __j = 0; __j < __n; ++__j, ++__b, ++__i)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__j	./valarray_array.h	/^      for (size_t __j = 0; __j < __n; ++__j, ++__i)$/;"	kind:local	language:C++	function:std::__valarray_fill	typeref:typename:size_t	file:
__k	./boost_concept_check.h	/^    typename _AssociativeContainer::key_type __k;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::key_type	access:public
__k	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_type __k;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::key_type	access:public
__k	./stl_algo.h	/^      _Size __k;$/;"	kind:local	language:C++	function:std::__lg	typeref:typename:_Size	file:
__k	./stl_algo.h	/^      const _Distance __k = __middle - __first;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:const _Distance	file:
__k	./valarray_array.h	/^      for (size_t __k = 0; __k < __n; ++__k)$/;"	kind:local	language:C++	function:std::__valarray_copy	typeref:typename:size_t	file:
__kc	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::key_compare __kc;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::key_compare	access:public
__l	./stl_algo.h	/^      const _Distance __l = __n - __k;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:const _Distance	file:
__last	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type *	access:public
__last	./boost_concept_check.h	/^    typename _Sequence::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type *	access:public
__last	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type *	access:public
__last	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type *__first, *__last;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type *	access:public
__left	./ostream_insert.h	/^		  const bool __left = ((__out.flags()$/;"	kind:local	language:C++	function:std::__ostream_insert	typeref:typename:const bool	file:
__left	./stl_algo.h	/^      _ForwardIterator __middle, __left, __right;$/;"	kind:local	language:C++	function:std::equal_range	typeref:typename:_ForwardIterator	file:
__len	./basic_string.h	/^	const size_type __len = 1 + this->size();$/;"	kind:local	language:C++	function:std::basic_string::push_back	typeref:typename:const size_type	file:
__len	./basic_string.h	/^	const size_type __len = std::min(__size, __osize);$/;"	kind:local	language:C++	function:std::basic_string::compare	typeref:typename:const size_type	file:
__len	./stl_algo.h	/^      _DistanceType __len = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::equal_range	typeref:typename:_DistanceType	file:
__len	./stl_algo.h	/^      _DistanceType __len = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::lower_bound	typeref:typename:_DistanceType	file:
__len	./stl_algo.h	/^      _DistanceType __len = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::upper_bound	typeref:typename:_DistanceType	file:
__len	./stl_algo.h	/^      const _Distance __len = (__last - __first + 1) \/ 2;$/;"	kind:local	language:C++	function:std::__stable_sort_adaptive	typeref:typename:const _Distance	file:
__len	./stl_algo.h	/^      const _Distance __len = __last - __first;$/;"	kind:local	language:C++	function:std::__merge_sort_with_buffer	typeref:typename:const _Distance	file:
__len	./stl_bvector.h	/^		const size_type __len = size() + std::max(size(), __n);$/;"	kind:local	language:C++	function:std::vector::_M_insert_range	typeref:typename:const size_type	file:
__len	./stl_bvector.h	/^	  const size_type __len = size() + std::max(size(), __n);$/;"	kind:local	language:C++	function:std::vector::_M_fill_insert	typeref:typename:const size_type	file:
__len	./stl_bvector.h	/^	  const size_type __len = size() ? 2 * size()$/;"	kind:local	language:C++	function:std::vector::_M_insert_aux	typeref:typename:const size_type	file:
__len	./stl_bvector.h	/^	const size_type __len = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::vector::_M_assign_aux	typeref:typename:const size_type	file:
__len	./stl_deque.h	/^	  const size_type __len = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::deque::_M_assign_aux	typeref:typename:const size_type	file:
__len	./stl_deque.h	/^	const size_type __len = size();$/;"	kind:local	language:C++	function:std::deque::resize	typeref:typename:const size_type	file:
__len	./stl_heap.h	/^      const _DistanceType __len = __last - __first;$/;"	kind:local	language:C++	function:std::make_heap	typeref:typename:const _DistanceType	file:
__len	./stl_tree.h	/^      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());$/;"	kind:local	language:C++	function:std::_Rb_tree::__rb_verify	typeref:typename:unsigned int	file:
__len1	./stl_algo.h	/^      _DistanceType __len1 = std::distance(__first, __middle);$/;"	kind:local	language:C++	function:std::inplace_merge	typeref:typename:_DistanceType	file:
__len1	./stl_algo.h	/^      const _DistanceType __len1 = std::distance(__first, __middle);$/;"	kind:local	language:C++	function:std::inplace_merge	typeref:typename:const _DistanceType	file:
__len1	./stl_algobase.h	/^    const size_t __len1 = __last1 - __first1;$/;"	kind:local	language:C++	function:std::lexicographical_compare	typeref:typename:const size_t	file:
__len11	./stl_algo.h	/^	  _Distance __len11 = 0;$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_Distance	file:
__len11	./stl_algo.h	/^      _Distance __len11 = 0;$/;"	kind:local	language:C++	function:std::__merge_without_buffer	typeref:typename:_Distance	file:
__len2	./stl_algo.h	/^      _DistanceType __len2 = std::distance(__middle, __last);$/;"	kind:local	language:C++	function:std::inplace_merge	typeref:typename:_DistanceType	file:
__len2	./stl_algo.h	/^      const _DistanceType __len2 = std::distance(__middle, __last);$/;"	kind:local	language:C++	function:std::inplace_merge	typeref:typename:const _DistanceType	file:
__len2	./stl_algobase.h	/^    const size_t __len2 = __last2 - __first2;$/;"	kind:local	language:C++	function:std::lexicographical_compare	typeref:typename:const size_t	file:
__len22	./stl_algo.h	/^	  _Distance __len22 = 0;$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_Distance	file:
__len22	./stl_algo.h	/^      _Distance __len22 = 0;$/;"	kind:local	language:C++	function:std::__merge_without_buffer	typeref:typename:_Distance	file:
__less	./valarray_before.h	/^  struct __less$/;"	kind:struct	language:C++	namespace:std
__less_equal	./valarray_before.h	/^  struct __less_equal$/;"	kind:struct	language:C++	namespace:std
__lg	./stl_algo.h	/^    __lg(_Size __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Size	signature:(_Size __n)
__log	./valarray_before.h	/^  struct __log$/;"	kind:struct	language:C++	namespace:std
__log10	./valarray_before.h	/^  struct __log10$/;"	kind:struct	language:C++	namespace:std
__logical_and	./valarray_before.h	/^  struct __logical_and$/;"	kind:struct	language:C++	namespace:std
__logical_not	./valarray_before.h	/^  struct __logical_not$/;"	kind:struct	language:C++	namespace:std
__logical_or	./valarray_before.h	/^  struct __logical_or$/;"	kind:struct	language:C++	namespace:std
__lookAhead	./stl_algo.h	/^      _RandomAccessIter __lookAhead = __first + __skipOffset;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:_RandomAccessIter	file:
__median	./stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,const _Tp & __c)
__median	./stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,const _Tp & __c,_Compare __comp)
__merge_adaptive	./stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Pointer __buffer,_Distance __buffer_size)
__merge_adaptive	./stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Pointer __buffer,_Distance __buffer_size,_Compare __comp)
__merge_backward	./stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator3	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,_BidirectionalIterator3 __result)
__merge_backward	./stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator3	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,_BidirectionalIterator3 __result,_Compare __comp)
__merge_sort_loop	./stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator1 __first,_RandomAccessIterator1 __last,_RandomAccessIterator2 __result,_Distance __step_size)
__merge_sort_loop	./stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator1 __first,_RandomAccessIterator1 __last,_RandomAccessIterator2 __result,_Distance __step_size,_Compare __comp)
__merge_sort_with_buffer	./stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer)
__merge_sort_with_buffer	./stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Compare __comp)
__merge_without_buffer	./stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2)
__merge_without_buffer	./stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Compare __comp)
__mid	./stl_bvector.h	/^	    _ForwardIterator __mid = __first;$/;"	kind:local	language:C++	function:std::vector::_M_assign_aux	typeref:typename:_ForwardIterator	file:
__mid	./stl_deque.h	/^	      _ForwardIterator __mid = __first;$/;"	kind:local	language:C++	function:std::deque::_M_assign_aux	typeref:typename:_ForwardIterator	file:
__mid	./stl_uninitialized.h	/^      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,$/;"	kind:local	language:C++	function:std::__uninitialized_copy_copy	typeref:typename:_ForwardIterator	file:
__mid2	./stl_uninitialized.h	/^      _ForwardIterator __mid2 = std::__uninitialized_copy_a(__first1, __last1,$/;"	kind:local	language:C++	function:std::__uninitialized_copy_fill	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^	  _ForwardIterator __middle = __first;$/;"	kind:local	language:C++	function:std::__stable_partition_adaptive	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^      _ForwardIterator __middle = __first;$/;"	kind:local	language:C++	function:std::__inplace_stable_partition	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^      _ForwardIterator __middle, __left, __right;$/;"	kind:local	language:C++	function:std::equal_range	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^      _ForwardIterator __middle;$/;"	kind:local	language:C++	function:std::lower_bound	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^      _ForwardIterator __middle;$/;"	kind:local	language:C++	function:std::upper_bound	typeref:typename:_ForwardIterator	file:
__middle	./stl_algo.h	/^      _RandomAccessIterator __middle = __first + (__last - __first) \/ 2;$/;"	kind:local	language:C++	function:std::__inplace_stable_sort	typeref:typename:_RandomAccessIterator	file:
__middle	./stl_algo.h	/^      const _RandomAccessIterator __middle = __first + __len;$/;"	kind:local	language:C++	function:std::__stable_sort_adaptive	typeref:typename:const _RandomAccessIterator	file:
__minus	./valarray_before.h	/^  struct __minus$/;"	kind:struct	language:C++	namespace:std
__modulus	./valarray_before.h	/^  struct __modulus$/;"	kind:struct	language:C++	namespace:std
__moneypunct_cache	./locale_facets.h	/^      __moneypunct_cache(const __moneypunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	access:private	signature:(const __moneypunct_cache &)
__moneypunct_cache	./locale_facets.h	/^      __moneypunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__moneypunct_cache	access:public	signature:(size_t __refs=0)
__moneypunct_cache	./locale_facets.h	/^    struct __moneypunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
__multiplies	./valarray_before.h	/^  struct __multiplies$/;"	kind:struct	language:C++	namespace:std
__n	./boost_concept_check.h	/^    _Size_type __n;$/;"	kind:member	language:C++	struct:_ContainerConcept	typeref:typename:_Size_type	access:public
__n	./boost_concept_check.h	/^    _Size_type __n;$/;"	kind:member	language:C++	struct:_RandomAccessContainerConcept	typeref:typename:_Size_type	access:public
__n	./boost_concept_check.h	/^    typename _AssociativeContainer::size_type __n;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:_AssociativeContainer::size_type	access:public
__n	./boost_concept_check.h	/^    typename _Sequence::size_type __n;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::size_type	access:public
__n	./boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	kind:member	language:C++	struct:_Mutable_RandomAccessIteratorConcept	typeref:typename:std::iterator_traits<_Tp>::difference_type	access:public
__n	./boost_concept_check.h	/^    typename std::iterator_traits<_Tp>::difference_type __n;$/;"	kind:member	language:C++	struct:_RandomAccessIteratorConcept	typeref:typename:std::iterator_traits<_Tp>::difference_type	access:public
__n	./stl_algo.h	/^	    __n = __count;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:iterator_traits<_ForwardIterator>::difference_type	file:
__n	./stl_algo.h	/^      const _Distance __n = __last   - __first;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:const _Distance	file:
__n	./stl_algo.h	/^      typename iterator_traits<_InputIterator>::difference_type __n = 0;$/;"	kind:local	language:C++	function:std::count	typeref:typename:iterator_traits<_InputIterator>::difference_type	file:
__n	./stl_algo.h	/^      typename iterator_traits<_InputIterator>::difference_type __n = 0;$/;"	kind:local	language:C++	function:std::count_if	typeref:typename:iterator_traits<_InputIterator>::difference_type	file:
__n	./stl_algobase.h	/^	  for(_Distance __n = __last - __first; __n > 0; --__n)$/;"	kind:local	language:C++	function:std::__copy::copy	typeref:typename:_Distance	file:
__n	./stl_algobase.h	/^	  typename iterator_traits<_BI1>::difference_type __n;$/;"	kind:local	language:C++	function:std::__copy_backward::__copy_b	typeref:typename:iterator_traits<_BI1>::difference_type	file:
__n	./stl_bvector.h	/^	    size_type __n = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::vector::_M_insert_range	typeref:typename:size_type	file:
__n	./stl_bvector.h	/^	const size_type __n = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::vector::_M_initialize_range	typeref:typename:const size_type	file:
__n	./stl_bvector.h	/^      const difference_type __n = __position - begin();$/;"	kind:local	language:C++	function:std::vector::insert	typeref:typename:const difference_type	file:
__n	./stl_bvector.h	/^      difference_type __n = __i + _M_offset;$/;"	kind:local	language:C++	function:std::_Bit_iterator_base::_M_incr	typeref:typename:difference_type	file:
__n	./stl_deque.h	/^      for (_Tp** __n = __nstart; __n < __nfinish; ++__n)$/;"	kind:local	language:C++	function:std::_Deque_base::_M_destroy_nodes	typeref:typename:_Tp **	file:
__n	./stl_list.h	/^        _Node* __n = static_cast<_Node*>(__position._M_node);$/;"	kind:local	language:C++	function:std::list::_M_erase	typeref:typename:_Node *	file:
__n	./stl_tree.h	/^      const size_type __n = std::distance(__p.first, __p.second);$/;"	kind:local	language:C++	function:std::_Rb_tree::count	typeref:typename:const size_type	file:
__n	./stl_vector.h	/^	  const size_type __n = std::distance(__first, __last);$/;"	kind:local	language:C++	function:std::vector::_M_range_initialize	typeref:typename:const size_type	file:
__n	./streambuf_iterator.h	/^	      const streamsize __n = __sb->egptr() - __sb->gptr();$/;"	kind:local	language:C++	function:std::__copy_aux	typeref:typename:const streamsize	file:
__n	./streambuf_iterator.h	/^	      streamsize __n = __sb->egptr() - __sb->gptr();$/;"	kind:local	language:C++	function:std::find	typeref:typename:streamsize	file:
__n	./valarray_after.h	/^      size_t __n = _M_closure.size();$/;"	kind:local	language:C++	function:std::_Expr::sum	typeref:typename:size_t	file:
__negate	./valarray_before.h	/^  struct __negate$/;"	kind:struct	language:C++	namespace:std
__new_middle	./stl_algo.h	/^	  _BidirectionalIterator __new_middle =$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_BidirectionalIterator	file:
__new_middle	./stl_algo.h	/^      _BidirectionalIterator __new_middle = __first_cut;$/;"	kind:local	language:C++	function:std::__merge_without_buffer	typeref:typename:_BidirectionalIterator	file:
__new_result	./stl_algo.h	/^	      _ForwardIterator1 __new_result$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_ForwardIterator1	file:
__next	./stl_algo.h	/^      _ForwardIterator __next = __first;$/;"	kind:local	language:C++	function:std::__partition	typeref:typename:_ForwardIterator	file:
__next	./stl_algo.h	/^      _ForwardIterator __next = __first;$/;"	kind:local	language:C++	function:std::__unique_copy	typeref:typename:_ForwardIterator	file:
__next	./stl_algo.h	/^      _ForwardIterator __next = __first;$/;"	kind:local	language:C++	function:std::adjacent_find	typeref:typename:_ForwardIterator	file:
__next	./stl_algo.h	/^      _RandomAccessIterator __next = __last;$/;"	kind:local	language:C++	function:std::__unguarded_linear_insert	typeref:typename:_RandomAccessIterator	file:
__nfinish	./stl_deque.h	/^      _Tp** __nfinish = __nstart + __num_nodes;$/;"	kind:local	language:C++	function:std::_Deque_base::_M_initialize_map	typeref:typename:_Tp **	file:
__node_offset	./stl_deque.h	/^	    const difference_type __node_offset =$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator +=	typeref:typename:const difference_type	file:
__normal_iterator	./stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:(const __normal_iterator<_Iter,typename __enable_if<(std::__are_same<_Iter,typename _Container::pointer>::__value),_Container>::__type> & __i)
__normal_iterator	./stl_iterator.h	/^      __normal_iterator() : _M_current(_Iterator()) { }$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:()
__normal_iterator	./stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:(const _Iterator & __i)
__normal_iterator	./stl_iterator.h	/^    class __normal_iterator$/;"	kind:class	language:C++
__normal_iterator::_M_current	./stl_iterator.h	/^      _Iterator _M_current;$/;"	kind:member	language:C++	class:__normal_iterator	typeref:typename:_Iterator	access:protected
__normal_iterator::__normal_iterator	./stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:(const __normal_iterator<_Iter,typename __enable_if<(std::__are_same<_Iter,typename _Container::pointer>::__value),_Container>::__type> & __i)
__normal_iterator::__normal_iterator	./stl_iterator.h	/^      __normal_iterator() : _M_current(_Iterator()) { }$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:()
__normal_iterator::__normal_iterator	./stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }$/;"	kind:function	language:C++	class:__normal_iterator	access:public	signature:(const _Iterator & __i)
__normal_iterator::base	./stl_iterator.h	/^      base() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:const _Iterator &	access:public	signature:() const
__normal_iterator::difference_type	./stl_iterator.h	/^                                                             difference_type;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::difference_type	access:public
__normal_iterator::iterator_category	./stl_iterator.h	/^                                                             iterator_category;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::iterator_category	access:public
__normal_iterator::operator *	./stl_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:reference	access:public	signature:() const
__normal_iterator::operator +	./stl_iterator.h	/^      operator+(const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(const difference_type & __n) const
__normal_iterator::operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:()
__normal_iterator::operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(int)
__normal_iterator::operator +=	./stl_iterator.h	/^      operator+=(const difference_type& __n)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:(const difference_type & __n)
__normal_iterator::operator -	./stl_iterator.h	/^      operator-(const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(const difference_type & __n) const
__normal_iterator::operator --	./stl_iterator.h	/^      operator--()$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:()
__normal_iterator::operator --	./stl_iterator.h	/^      operator--(int)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(int)
__normal_iterator::operator -=	./stl_iterator.h	/^      operator-=(const difference_type& __n)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:(const difference_type & __n)
__normal_iterator::operator ->	./stl_iterator.h	/^      operator->() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:pointer	access:public	signature:() const
__normal_iterator::operator []	./stl_iterator.h	/^      operator[](const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:reference	access:public	signature:(const difference_type & __n) const
__normal_iterator::pointer	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer   pointer;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::pointer	access:public
__normal_iterator::reference	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference reference;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::reference	access:public
__normal_iterator::value_type	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::value_type  value_type;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::value_type	access:public
__not_equal_to	./valarray_before.h	/^  struct __not_equal_to$/;"	kind:struct	language:C++	namespace:std
__nstart	./stl_deque.h	/^      _Tp** __nstart = (this->_M_impl._M_map$/;"	kind:local	language:C++	function:std::_Deque_base::_M_initialize_map	typeref:typename:_Tp **	file:
__num	./streambuf_iterator.h	/^      const streamsize __num = __last - __first;$/;"	kind:local	language:C++	function:std::__copy_aux	typeref:typename:const streamsize	file:
__num_base	./locale_facets.h	/^  class __num_base$/;"	kind:class	language:C++	namespace:std
__num_get_type	./basic_ios.h	/^						     __num_get_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
__num_nodes	./stl_deque.h	/^      const size_t __num_nodes = (__num_elements\/ __deque_buf_size(sizeof(_Tp))$/;"	kind:local	language:C++	function:std::_Deque_base::_M_initialize_map	typeref:typename:const size_t	file:
__num_put_type	./basic_ios.h	/^						     __num_put_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
__numpunct_cache	./locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
__numpunct_cache	./locale_facets.h	/^      __numpunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
__numpunct_cache	./locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
__offset	./stl_deque.h	/^	const difference_type __offset = __n + (_M_cur - _M_first);$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator +=	typeref:typename:const difference_type	file:
__old	./basic_ios.h	/^	char_type __old = this->fill();$/;"	kind:local	language:C++	function:std::basic_ios::fill	typeref:typename:char_type	file:
__old	./basic_ios.h	/^        basic_ostream<_CharT, _Traits>* __old = _M_tie;$/;"	kind:local	language:C++	function:std::basic_ios::tie	typeref:typename:basic_ostream<_CharT,_Traits> *	file:
__old	./ios_base.h	/^      fmtflags __old = _M_flags;$/;"	kind:local	language:C++	function:std::ios_base::flags	typeref:typename:fmtflags	file:
__old	./ios_base.h	/^      fmtflags __old = _M_flags;$/;"	kind:local	language:C++	function:std::ios_base::setf	typeref:typename:fmtflags	file:
__old	./ios_base.h	/^      streamsize __old = _M_precision;$/;"	kind:local	language:C++	function:std::ios_base::precision	typeref:typename:streamsize	file:
__old	./ios_base.h	/^      streamsize __old = _M_width;$/;"	kind:local	language:C++	function:std::ios_base::width	typeref:typename:streamsize	file:
__old	./streambuf_iterator.h	/^	istreambuf_iterator __old = *this;$/;"	kind:local	language:C++	function:std::istreambuf_iterator::operator ++	typeref:typename:istreambuf_iterator	file:
__old_size	./stl_tree.h	/^      const size_type __old_size = size();$/;"	kind:local	language:C++	function:std::_Rb_tree::erase	typeref:typename:const size_type	file:
__osize	./basic_string.h	/^	const size_type __osize = __str.size();$/;"	kind:local	language:C++	function:std::basic_string::compare	typeref:typename:const size_type	file:
__ostream_fill	./ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
__ostream_insert	./ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__ostream_type	./ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	kind:typedef	language:C++	function:std::__ostream_fill	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	./ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	kind:typedef	language:C++	function:std::__ostream_write	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	./ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;$/;"	kind:typedef	language:C++	function:std::__ostream_insert	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_write	./ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__out	./stl_algobase.h	/^       const bool __out = __is_normal_iterator<_OutputIterator>::__value;$/;"	kind:local	language:C++	function:std::copy	typeref:typename:const bool	file:
__p	./basic_string.h	/^	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);$/;"	kind:local	language:C++	function:std::basic_string::_Rep::_S_empty_rep	typeref:typename:void *	file:
__p	./boost_concept_check.h	/^    _Iterator __p;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_Iterator	access:public
__p	./boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::iterator	access:public
__p	./stl_algo.h	/^	  _RandomAccessIterator __p = __first;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_RandomAccessIterator	file:
__p	./stl_algo.h	/^      _ForwardIterator2 __p1, __p;$/;"	kind:local	language:C++	function:std::search	typeref:typename:_ForwardIterator2	file:
__p	./stl_bvector.h	/^      for (_Bit_type * __p = this->_M_impl._M_start._M_p;$/;"	kind:local	language:C++	function:std::vector::flip	typeref:typename:_Bit_type *	file:
__p	./stl_list.h	/^	_Node* __p = this->_M_get_node();$/;"	kind:local	language:C++	function:std::list::_M_create_node	typeref:typename:_Node *	file:
__p	./stl_set.h	/^	std::pair<typename _Rep_type::iterator, bool> __p =$/;"	kind:local	language:C++	function:std::set::insert	typeref:typename:std::pair<typename _Rep_type::iterator,bool>	file:
__p	./stl_tempbuf.h	/^	  pair<pointer, size_type> __p(get_temporary_buffer<$/;"	kind:local	language:C++	function:std::_Temporary_buffer::_Temporary_buffer	typeref:typename:pair<pointer,size_type>	file:
__p	./stl_tree.h	/^      pair<const_iterator, const_iterator> __p = equal_range(__k);$/;"	kind:local	language:C++	function:std::_Rb_tree::count	typeref:typename:pair<const_iterator,const_iterator>	file:
__p	./stl_tree.h	/^      pair<iterator, iterator> __p = equal_range(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::erase	typeref:typename:pair<iterator,iterator>	file:
__p	./streambuf_iterator.h	/^		  const _CharT* __p = traits_type::find(__sb->gptr(),$/;"	kind:local	language:C++	function:std::find	typeref:typename:const _CharT *	file:
__p1	./stl_algo.h	/^      _ForwardIterator2 __p1, __p;$/;"	kind:local	language:C++	function:std::search	typeref:typename:_ForwardIterator2	file:
__pad	./locale_facets.h	/^    struct __pad$/;"	kind:struct	language:C++	namespace:std
__parent	./stl_heap.h	/^      _Distance __parent = (__holeIndex - 1) \/ 2;$/;"	kind:local	language:C++	function:std::__push_heap	typeref:typename:_Distance	file:
__parent	./stl_heap.h	/^      _Distance __parent = 0;$/;"	kind:local	language:C++	function:std::__is_heap	typeref:typename:_Distance	file:
__parent	./stl_heap.h	/^      _DistanceType __parent = (__len - 2) \/ 2;$/;"	kind:local	language:C++	function:std::make_heap	typeref:typename:_DistanceType	file:
__partition	./stl_algo.h	/^    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Predicate __pred,bidirectional_iterator_tag)
__partition	./stl_algo.h	/^    __partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,forward_iterator_tag)
__pattSize	./stl_algo.h	/^      const _DistanceType __pattSize = __count;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:const _DistanceType	file:
__plus	./valarray_before.h	/^  struct __plus$/;"	kind:struct	language:C++	namespace:std
__pop_heap	./stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomAccessIterator __result,_Tp __value)
__pop_heap	./stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomAccessIterator __result,_Tp __value,_Compare __comp)
__pos	./basic_string.h	/^	const size_type __pos = __p - _M_ibegin();$/;"	kind:local	language:C++	function:std::basic_string::insert	typeref:typename:const size_type	file:
__pos	./basic_string.h	/^	const size_type __pos = __position - _M_ibegin();$/;"	kind:local	language:C++	function:std::basic_string::erase	typeref:typename:const size_type	file:
__pos	./basic_string.h	/^        const size_type __pos = __first - _M_ibegin();$/;"	kind:local	language:C++	function:std::basic_string::erase	typeref:typename:const size_type	file:
__pos	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::iterator __pos;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::iterator	access:public
__pos	./postypes.h	/^	fpos __pos(*this);$/;"	kind:local	language:C++	function:std::fpos::operator +	typeref:typename:fpos	file:
__pos	./postypes.h	/^	fpos __pos(*this);$/;"	kind:local	language:C++	function:std::fpos::operator -	typeref:typename:fpos	file:
__pos_flag	./boost_concept_check.h	/^    std::pair<typename _UniqueAssociativeContainer::iterator, bool> __pos_flag;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:std::pair<typename _UniqueAssociativeContainer::iterator,bool>	access:public
__pow	./valarray_before.h	/^  struct __pow$/;"	kind:struct	language:C++	namespace:std
__push_heap	./stl_heap.h	/^    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __topIndex,_Tp __value,_Compare __comp)
__push_heap	./stl_heap.h	/^    __push_heap(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __topIndex,_Tp __value)
__put	./ostream_insert.h	/^	  const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);$/;"	kind:local	language:C++	function:std::__ostream_fill	typeref:typename:const typename _Traits::int_type	file:
__put	./ostream_insert.h	/^      const streamsize __put = __out.rdbuf()->sputn(__s, __n);$/;"	kind:local	language:C++	function:std::__ostream_write	typeref:typename:const streamsize	file:
__q	./boost_concept_check.h	/^    typename _Sequence::iterator __p, __q;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::iterator	access:public
__q	./locale_facets.h	/^	  const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);$/;"	kind:local	language:C++	function:std::num_get::_M_find	typeref:typename:const char_type *	file:
__q	./stl_bvector.h	/^		_Bit_type * __q = this->_M_allocate(__len);$/;"	kind:local	language:C++	function:std::vector::_M_insert_range	typeref:typename:_Bit_type *	file:
__q	./stl_bvector.h	/^	  _Bit_type * __q = this->_M_allocate(__len);$/;"	kind:local	language:C++	function:std::vector::_M_fill_insert	typeref:typename:_Bit_type *	file:
__q	./stl_bvector.h	/^	  _Bit_type * __q = this->_M_allocate(__len);$/;"	kind:local	language:C++	function:std::vector::_M_insert_aux	typeref:typename:_Bit_type *	file:
__q	./stl_bvector.h	/^	  _Bit_type* __q = this->_M_allocate(__n);$/;"	kind:local	language:C++	function:std::vector::reserve	typeref:typename:_Bit_type *	file:
__q	./stl_bvector.h	/^      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);$/;"	kind:local	language:C++	function:std::vector::_M_copy_aligned	typeref:typename:_Bit_type *	file:
__q	./stl_bvector.h	/^      _Bit_type* __q = this->_M_allocate(__n);$/;"	kind:local	language:C++	function:std::vector::_M_initialize	typeref:typename:_Bit_type *	file:
__r	./basic_string.h	/^	int __r = traits_type::compare(_M_data(), __str.data(), __len);$/;"	kind:local	language:C++	function:std::basic_string::compare	typeref:typename:int	file:
__r	./boost_concept_check.h	/^    _Return __r;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Return	access:public
__r	./boost_concept_check.h	/^    _Return __r;$/;"	kind:member	language:C++	struct:_UnaryFunctionConcept	typeref:typename:_Return	access:public
__r	./boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	kind:member	language:C++	struct:_AssociativeContainerConcept	typeref:typename:std::pair<_Iterator,_Iterator>	access:public
__r	./boost_concept_check.h	/^    std::pair<_Iterator,_Iterator> __r;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:std::pair<_Iterator,_Iterator>	access:public
__r	./valarray_array.h	/^      _Tp __r = _Tp();$/;"	kind:local	language:C++	function:std::__valarray_sum	typeref:typename:_Tp	file:
__r	./valarray_array.h	/^      _Tp __r = _Tp(1);$/;"	kind:local	language:C++	function:std::__valarray_product	typeref:typename:_Tp	file:
__r	./valarray_array.h	/^      _Value_type __r = __s == 0 ? _Value_type() : __a[0];$/;"	kind:local	language:C++	function:std::__valarray_max	typeref:typename:_Value_type	file:
__r	./valarray_array.h	/^      _Value_type __r = __s == 0 ? _Value_type() : __a[0];$/;"	kind:local	language:C++	function:std::__valarray_min	typeref:typename:_Value_type	file:
__rb_verify	./stl_tree.h	/^      __rb_verify() const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:bool	access:public	signature:() const
__rb_verify	./stl_tree.h	/^    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:bool	signature:() const
__remainder	./stl_algo.h	/^	  _DistanceType __remainder = __skipOffset;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:_DistanceType	file:
__result	./stl_algo.h	/^	  _BidirectionalIterator1 __result = __rresult.base();$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_BidirectionalIterator1	file:
__result	./stl_algo.h	/^	  _ForwardIterator1 __result = __last1;$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_ForwardIterator1	file:
__result	./stl_algo.h	/^      _ForwardIterator __result = __first;$/;"	kind:local	language:C++	function:std::max_element	typeref:typename:_ForwardIterator	file:
__result	./stl_algo.h	/^      _ForwardIterator __result = __first;$/;"	kind:local	language:C++	function:std::min_element	typeref:typename:_ForwardIterator	file:
__result	./stl_algobase.h	/^    const int __result = std::memcmp(__first1, __first2,$/;"	kind:local	language:C++	function:std::lexicographical_compare	typeref:typename:const int	file:
__result	./stl_vector.h	/^	  pointer __result = this->_M_allocate(__n);$/;"	kind:local	language:C++	function:std::vector::_M_allocate_and_copy	typeref:typename:pointer	file:
__result1	./stl_algo.h	/^	  _ForwardIterator __result1 = __first;$/;"	kind:local	language:C++	function:std::__stable_partition_adaptive	typeref:typename:_ForwardIterator	file:
__result2	./stl_algo.h	/^	  _Pointer __result2 = __buffer;$/;"	kind:local	language:C++	function:std::__stable_partition_adaptive	typeref:typename:_Pointer	file:
__result_real_last	./stl_algo.h	/^      _RandomAccessIterator __result_real_last = __result_first;$/;"	kind:local	language:C++	function:std::partial_sort_copy	typeref:typename:_RandomAccessIterator	file:
__ret	./locale_classes.h	/^      bool __ret = true;$/;"	kind:local	language:C++	function:std::locale::_Impl::_M_check_same_name	typeref:typename:bool	file:
__ret	./locale_facets.h	/^	  int __ret = -1;$/;"	kind:local	language:C++	function:std::num_get::_M_find	typeref:typename:int	file:
__ret	./streambuf_iterator.h	/^	int_type __ret = __eof;$/;"	kind:local	language:C++	function:std::istreambuf_iterator::_M_get	typeref:typename:int_type	file:
__reverse	./stl_algo.h	/^    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,bidirectional_iterator_tag)
__reverse	./stl_algo.h	/^    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
__right	./stl_algo.h	/^      _ForwardIterator __middle, __left, __right;$/;"	kind:local	language:C++	function:std::equal_range	typeref:typename:_ForwardIterator	file:
__rlast1	./stl_algo.h	/^      _RevIterator1 __rlast1(__first1);$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_RevIterator1	file:
__rlast2	./stl_algo.h	/^      _RevIterator2 __rlast2(__first2);$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_RevIterator2	file:
__rotate	./stl_algo.h	/^    __rotate(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,bidirectional_iterator_tag)
__rotate	./stl_algo.h	/^    __rotate(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last,forward_iterator_tag)
__rotate	./stl_algo.h	/^    __rotate(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,random_access_iterator_tag)
__rotate_adaptive	./stl_algo.h	/^    __rotate_adaptive(_BidirectionalIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first,_BidirectionalIterator1 __middle,_BidirectionalIterator1 __last,_Distance __len1,_Distance __len2,_BidirectionalIterator2 __buffer,_Distance __buffer_size)
__rresult	./stl_algo.h	/^      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,$/;"	kind:local	language:C++	function:std::__find_end	typeref:typename:_RevIterator1	file:
__s	./valarray_after.h	/^	  _Tp __s = _M_closure[--__n];$/;"	kind:local	language:C++	function:std::_Expr::sum	typeref:typename:_Tp	file:
__s	./valarray_array.h	/^      size_t __s = __a.size();$/;"	kind:local	language:C++	function:std::__valarray_max	typeref:typename:size_t	file:
__s	./valarray_array.h	/^      size_t __s = __a.size();$/;"	kind:local	language:C++	function:std::__valarray_min	typeref:typename:size_t	file:
__sb	./streambuf_iterator.h	/^	  streambuf_type* __sb = __first._M_sbuf;$/;"	kind:local	language:C++	function:std::__copy_aux	typeref:typename:streambuf_type *	file:
__sb	./streambuf_iterator.h	/^	  streambuf_type* __sb = __first._M_sbuf;$/;"	kind:local	language:C++	function:std::find	typeref:typename:streambuf_type *	file:
__scalar	./stl_algobase.h	/^      const bool __scalar = __is_scalar<_Tp>::__value;$/;"	kind:local	language:C++	function:std::fill	typeref:typename:const bool	file:
__search_n	./stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred,std::forward_iterator_tag)
__search_n	./stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,std::forward_iterator_tag)
__search_n	./stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIter	signature:(_RandomAccessIter __first,_RandomAccessIter __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred,std::random_access_iterator_tag)
__search_n	./stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIter	signature:(_RandomAccessIter __first,_RandomAccessIter __last,_Integer __count,const _Tp & __val,std::random_access_iterator_tag)
__second	./boost_concept_check.h	/^    _Second __second;$/;"	kind:member	language:C++	struct:_BinaryFunctionConcept	typeref:typename:_Second	access:public
__secondChild	./stl_heap.h	/^      _Distance __secondChild = 2 * __holeIndex + 2;$/;"	kind:local	language:C++	function:std::__adjust_heap	typeref:typename:_Distance	file:
__second_cut	./stl_algo.h	/^	  _BidirectionalIterator __second_cut = __middle;$/;"	kind:local	language:C++	function:std::__merge_adaptive	typeref:typename:_BidirectionalIterator	file:
__second_cut	./stl_algo.h	/^      _BidirectionalIterator __second_cut = __middle;$/;"	kind:local	language:C++	function:std::__merge_without_buffer	typeref:typename:_BidirectionalIterator	file:
__shift_left	./valarray_before.h	/^  struct __shift_left$/;"	kind:struct	language:C++	namespace:std
__shift_right	./valarray_before.h	/^  struct __shift_right$/;"	kind:struct	language:C++	namespace:std
__simple	./stl_algobase.h	/^      const bool __simple = (__is_scalar<_ValueType1>::__value$/;"	kind:local	language:C++	function:std::__copy_backward_aux	typeref:typename:const bool	file:
__simple	./stl_algobase.h	/^      const bool __simple = (__is_scalar<_ValueTypeI>::__value$/;"	kind:local	language:C++	function:std::__copy_aux	typeref:typename:const bool	file:
__sin	./valarray_before.h	/^  struct __sin$/;"	kind:struct	language:C++	namespace:std
__sinh	./valarray_before.h	/^  struct __sinh$/;"	kind:struct	language:C++	namespace:std
__size	./basic_string.h	/^	const size_type __size = this->size();$/;"	kind:local	language:C++	function:std::basic_string::compare	typeref:typename:const size_type	file:
__size_type	./basic_string.h	/^      typedef typename __string_type::size_type		__size_type;$/;"	kind:typedef	language:C++	function:std::operator +	typeref:typename:__string_type::size_type
__skipOffset	./stl_algo.h	/^      const _DistanceType __skipOffset = __pattSize - 1;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:const _DistanceType	file:
__sqrt	./valarray_before.h	/^  struct __sqrt$/;"	kind:struct	language:C++	namespace:std
__stable_partition_adaptive	./stl_algo.h	/^    __stable_partition_adaptive(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,_Distance __len,_Pointer __buffer,_Distance __buffer_size)
__stable_sort_adaptive	./stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Distance __buffer_size)
__stable_sort_adaptive	./stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Distance __buffer_size,_Compare __comp)
__step_size	./stl_algo.h	/^      _Distance __step_size = _S_chunk_size;$/;"	kind:local	language:C++	function:std::__merge_sort_with_buffer	typeref:typename:_Distance	file:
__str	./basic_string.h	/^      __string_type __str(__lhs);$/;"	kind:local	language:C++	function:std::operator +	typeref:typename:__string_type	file:
__str	./basic_string.h	/^      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);$/;"	kind:local	language:C++	function:std::operator +	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	file:
__string_type	./basic_string.h	/^      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;$/;"	kind:typedef	language:C++	function:std::operator +	typeref:typename:basic_string<_CharT,_Traits,_Alloc>
__string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:basic_string<_CharT>	access:public
__string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:basic_string<_CharT>	access:public
__t	./boost_concept_check.h	/^    _ValueT __t;$/;"	kind:member	language:C++	struct:_OutputIteratorConcept	typeref:typename:_ValueT	access:public
__t	./boost_concept_check.h	/^    typename _BackInsertionSequence::value_type __t;$/;"	kind:member	language:C++	struct:_BackInsertionSequenceConcept	typeref:typename:_BackInsertionSequence::value_type	access:public
__t	./boost_concept_check.h	/^    typename _FrontInsertionSequence::value_type __t;$/;"	kind:member	language:C++	struct:_FrontInsertionSequenceConcept	typeref:typename:_FrontInsertionSequence::value_type	access:public
__t	./boost_concept_check.h	/^    typename _MultipleAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_MultipleAssociativeContainerConcept	typeref:typename:_MultipleAssociativeContainer::value_type	access:public
__t	./boost_concept_check.h	/^    typename _Sequence::value_type __t;$/;"	kind:member	language:C++	struct:_SequenceConcept	typeref:typename:_Sequence::value_type	access:public
__t	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_type	access:public
__t	./boost_concept_check.h	/^    typename _UniqueAssociativeContainer::value_type __t;$/;"	kind:member	language:C++	struct:_UniqueAssociativeContainerConcept	typeref:typename:_UniqueAssociativeContainer::value_type	access:public
__t	./locale_facets.h	/^	const char __t = do_narrow(__c, __dfault);$/;"	kind:local	language:C++	function:std::ctype::narrow	typeref:typename:const char	file:
__t	./stl_algo.h	/^	  _EuclideanRingElement __t = __m % __n;$/;"	kind:local	language:C++	function:std::__gcd	typeref:typename:_EuclideanRingElement	file:
__t	./valarray_array.h	/^	  _Value_type __t = __a[__i];$/;"	kind:local	language:C++	function:std::__valarray_max	typeref:typename:_Value_type	file:
__t	./valarray_array.h	/^	  _Value_type __t = __a[__i];$/;"	kind:local	language:C++	function:std::__valarray_min	typeref:typename:_Value_type	file:
__tailSize	./stl_algo.h	/^      _DistanceType __tailSize = __last - __first;$/;"	kind:local	language:C++	function:std::__search_n	typeref:typename:_DistanceType	file:
__tan	./valarray_before.h	/^  struct __tan$/;"	kind:struct	language:C++	namespace:std
__tanh	./valarray_before.h	/^  struct __tanh$/;"	kind:struct	language:C++	namespace:std
__testoff	./basic_string.h	/^	const bool __testoff =  __off < this->size() - __pos;$/;"	kind:local	language:C++	function:std::basic_string::_M_limit	typeref:typename:const bool	file:
__thiseof	./streambuf_iterator.h	/^	const bool __thiseof = _M_at_eof();$/;"	kind:local	language:C++	function:std::istreambuf_iterator::equal	typeref:typename:const bool	file:
__throw_bad_alloc	./functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_cast	./functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_exception	./functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_typeid	./functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
__throw_domain_error	./functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_exception_again	./exception_defines.h	/^# define __throw_exception_again /;"	kind:macro	language:C++
__throw_exception_again	./exception_defines.h	/^# define __throw_exception_again$/;"	kind:macro	language:C++
__throw_invalid_argument	./functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_ios_failure	./functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_length_error	./functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_logic_error	./functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_out_of_range	./functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_overflow_error	./functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_range_error	./functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_runtime_error	./functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__throw_underflow_error	./functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
__timepunct	./locale_facets.h	/^      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
__timepunct	./locale_facets.h	/^      __timepunct(__cache_type* __cache, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
__timepunct	./locale_facets.h	/^      __timepunct(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(size_t __refs=0)
__timepunct	./locale_facets.h	/^    class __timepunct : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
__timepunct_cache	./locale_facets.h	/^      __timepunct_cache(const __timepunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	access:private	signature:(const __timepunct_cache &)
__timepunct_cache	./locale_facets.h	/^      __timepunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__timepunct_cache	access:public	signature:(size_t __refs=0)
__timepunct_cache	./locale_facets.h	/^    struct __timepunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
__tmp	./locale_facets.h	/^	    __c_locale __tmp;$/;"	kind:local	language:C++	function:std::moneypunct_byname::moneypunct_byname	typeref:typename:__c_locale	file:
__tmp	./locale_facets.h	/^	    __c_locale __tmp;$/;"	kind:local	language:C++	function:std::numpunct_byname::numpunct_byname	typeref:typename:__c_locale	file:
__tmp	./locale_facets.h	/^	char __tmp[sizeof(_M_narrow)];$/;"	kind:local	language:C++	function:std::ctype::_M_narrow_init	typeref:typename:char[]	file:
__tmp	./locale_facets.h	/^	char __tmp[sizeof(_M_widen)];$/;"	kind:local	language:C++	function:std::ctype::_M_widen_init	typeref:typename:char[]	file:
__tmp	./stl_algo.h	/^	  _ValueType __tmp = *__first;$/;"	kind:local	language:C++	function:std::__rotate	typeref:typename:_ValueType	file:
__tmp	./stl_algo.h	/^      _ForwardIterator2 __tmp(__first2);$/;"	kind:local	language:C++	function:std::search	typeref:typename:_ForwardIterator2	file:
__tmp	./stl_algobase.h	/^	  const _Tp __tmp = __value;$/;"	kind:local	language:C++	function:std::__fill::fill	typeref:typename:const _Tp	file:
__tmp	./stl_algobase.h	/^	  const _Tp __tmp = __value;$/;"	kind:local	language:C++	function:std::__fill_n::fill_n	typeref:typename:const _Tp	file:
__tmp	./stl_algobase.h	/^          _ValueType1 __tmp = *__a;$/;"	kind:local	language:C++	function:std::__iter_swap::iter_swap	typeref:typename:_ValueType1	file:
__tmp	./stl_algobase.h	/^    const char __tmp = __c;$/;"	kind:local	language:C++	function:std::fill	typeref:typename:const char	file:
__tmp	./stl_algobase.h	/^    const signed char __tmp = __c;$/;"	kind:local	language:C++	function:std::fill	typeref:typename:const signed char	file:
__tmp	./stl_algobase.h	/^    const unsigned char __tmp = __c;$/;"	kind:local	language:C++	function:std::fill	typeref:typename:const unsigned char	file:
__tmp	./stl_bvector.h	/^      bool __tmp = __x;$/;"	kind:local	language:C++	function:std::vector::swap	typeref:typename:bool	file:
__tmp	./stl_bvector.h	/^      const_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_const_iterator::operator +	typeref:typename:const_iterator	file:
__tmp	./stl_bvector.h	/^      const_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_const_iterator::operator ++	typeref:typename:const_iterator	file:
__tmp	./stl_bvector.h	/^      const_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_const_iterator::operator -	typeref:typename:const_iterator	file:
__tmp	./stl_bvector.h	/^      const_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_const_iterator::operator --	typeref:typename:const_iterator	file:
__tmp	./stl_bvector.h	/^      iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_iterator::operator +	typeref:typename:iterator	file:
__tmp	./stl_bvector.h	/^      iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_iterator::operator ++	typeref:typename:iterator	file:
__tmp	./stl_bvector.h	/^      iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_iterator::operator -	typeref:typename:iterator	file:
__tmp	./stl_bvector.h	/^      iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::_Bit_iterator::operator --	typeref:typename:iterator	file:
__tmp	./stl_deque.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator +	typeref:typename:_Self	file:
__tmp	./stl_deque.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator ++	typeref:typename:_Self	file:
__tmp	./stl_deque.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator -	typeref:typename:_Self	file:
__tmp	./stl_deque.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Deque_iterator::operator --	typeref:typename:_Self	file:
__tmp	./stl_deque.h	/^	const_iterator __tmp = end();$/;"	kind:local	language:C++	function:std::deque::back	typeref:typename:const_iterator	file:
__tmp	./stl_deque.h	/^	iterator __tmp = end();$/;"	kind:local	language:C++	function:std::deque::back	typeref:typename:iterator	file:
__tmp	./stl_iterator.h	/^	_Iterator __tmp = current;$/;"	kind:local	language:C++	function:std::reverse_iterator::operator *	typeref:typename:_Iterator	file:
__tmp	./stl_iterator.h	/^	reverse_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::reverse_iterator::operator ++	typeref:typename:reverse_iterator	file:
__tmp	./stl_iterator.h	/^	reverse_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::reverse_iterator::operator --	typeref:typename:reverse_iterator	file:
__tmp	./stl_list.h	/^	  list __tmp(__first, __last, _M_get_Node_allocator());$/;"	kind:local	language:C++	function:std::list::insert	typeref:typename:list	file:
__tmp	./stl_list.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_List_const_iterator::operator ++	typeref:typename:_Self	file:
__tmp	./stl_list.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_List_const_iterator::operator --	typeref:typename:_Self	file:
__tmp	./stl_list.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_List_iterator::operator ++	typeref:typename:_Self	file:
__tmp	./stl_list.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_List_iterator::operator --	typeref:typename:_Self	file:
__tmp	./stl_list.h	/^	const_iterator __tmp = end();$/;"	kind:local	language:C++	function:std::list::back	typeref:typename:const_iterator	file:
__tmp	./stl_list.h	/^	iterator __tmp = end();$/;"	kind:local	language:C++	function:std::list::back	typeref:typename:iterator	file:
__tmp	./stl_list.h	/^	list __tmp(__n, __x, _M_get_Node_allocator());$/;"	kind:local	language:C++	function:std::list::insert	typeref:typename:list	file:
__tmp	./stl_list.h	/^        _Node* __tmp = _M_create_node(__x);$/;"	kind:local	language:C++	function:std::list::_M_insert	typeref:typename:_Node *	file:
__tmp	./stl_numeric.h	/^	  _ValueType __tmp = *__first;$/;"	kind:local	language:C++	function:std::adjacent_difference	typeref:typename:_ValueType	file:
__tmp	./stl_raw_storage_iter.h	/^	raw_storage_iterator<_ForwardIterator, _Tp> __tmp = *this;$/;"	kind:local	language:C++	function:std::raw_storage_iterator::operator ++	typeref:typename:raw_storage_iterator<_ForwardIterator,_Tp>	file:
__tmp	./stl_tree.h	/^	_Link_type __tmp = _M_create_node(__x->_M_value_field);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_clone_node	typeref:typename:_Link_type	file:
__tmp	./stl_tree.h	/^	_Link_type __tmp = _M_get_node();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_create_node	typeref:typename:_Link_type	file:
__tmp	./stl_tree.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Rb_tree_const_iterator::operator ++	typeref:typename:_Self	file:
__tmp	./stl_tree.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Rb_tree_const_iterator::operator --	typeref:typename:_Self	file:
__tmp	./stl_tree.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Rb_tree_iterator::operator ++	typeref:typename:_Self	file:
__tmp	./stl_tree.h	/^	_Self __tmp = *this;$/;"	kind:local	language:C++	function:std::_Rb_tree_iterator::operator --	typeref:typename:_Self	file:
__tmp	./stream_iterator.h	/^	istream_iterator __tmp = *this;$/;"	kind:local	language:C++	function:std::istream_iterator::operator ++	typeref:typename:istream_iterator	file:
__top	./stl_tree.h	/^      _Link_type __top = _M_clone_node(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_copy	typeref:typename:_Link_type	file:
__topIndex	./stl_heap.h	/^      const _Distance __topIndex = __holeIndex;$/;"	kind:local	language:C++	function:std::__adjust_heap	typeref:typename:const _Distance	file:
__trip_count	./stl_algo.h	/^	__trip_count = (__last - __first) >> 2;$/;"	kind:local	language:C++	function:std::__find	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type	file:
__trip_count	./stl_algo.h	/^	__trip_count = (__last - __first) >> 2;$/;"	kind:local	language:C++	function:std::__find_if	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type	file:
__two_step	./stl_algo.h	/^      const _Distance __two_step = 2 * __step_size;$/;"	kind:local	language:C++	function:std::__merge_sort_loop	typeref:typename:const _Distance	file:
__unary_plus	./valarray_before.h	/^  struct __unary_plus$/;"	kind:struct	language:C++	namespace:std
__unguarded_insertion_sort	./stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
__unguarded_insertion_sort	./stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
__unguarded_linear_insert	./stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __last,_Tp __val)
__unguarded_linear_insert	./stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __last,_Tp __val,_Compare __comp)
__unguarded_partition	./stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Tp __pivot)
__unguarded_partition	./stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Tp __pivot,_Compare __comp)
__uninitialized_copy_a	./stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator __alloc)
__uninitialized_copy_a	./stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,allocator<_Tp>)
__uninitialized_copy_aux	./stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,__false_type)
__uninitialized_copy_aux	./stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,__true_type)
__uninitialized_copy_copy	./stl_uninitialized.h	/^    __uninitialized_copy_copy(_InputIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator __alloc)
__uninitialized_copy_fill	./stl_uninitialized.h	/^    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,const _Tp & __x,_Allocator __alloc)
__uninitialized_fill_a	./stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,_Allocator __alloc)
__uninitialized_fill_a	./stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,allocator<_Tp2>)
__uninitialized_fill_aux	./stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,__false_type)
__uninitialized_fill_aux	./stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,__true_type)
__uninitialized_fill_copy	./stl_uninitialized.h	/^    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __result,_ForwardIterator __mid,const _Tp & __x,_InputIterator __first,_InputIterator __last,_Allocator __alloc)
__uninitialized_fill_n_a	./stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,_Allocator __alloc)
__uninitialized_fill_n_a	./stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,allocator<_Tp2>)
__uninitialized_fill_n_aux	./stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,__false_type)
__uninitialized_fill_n_aux	./stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,__true_type)
__unique_copy	./stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred,forward_iterator_tag,output_iterator_tag)
__unique_copy	./stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_OutputIterator __result,forward_iterator_tag,output_iterator_tag)
__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_BinaryPredicate __binary_pred,input_iterator_tag,forward_iterator_tag)
__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,input_iterator_tag,forward_iterator_tag)
__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred,input_iterator_tag,output_iterator_tag)
__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,input_iterator_tag,output_iterator_tag)
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this).apply(__f);$/;"	kind:local	language:C++	function:std::_Expr::apply	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this).cshift(__n);$/;"	kind:local	language:C++	function:std::_Expr::cshift	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this).shift(__n);$/;"	kind:local	language:C++	function:std::_Expr::shift	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this)[__gs];$/;"	kind:local	language:C++	function:std::_Expr::operator []	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this)[__i];$/;"	kind:local	language:C++	function:std::_Expr::operator []	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this)[__m];$/;"	kind:local	language:C++	function:std::_Expr::operator []	typeref:typename:valarray<_Tp>	file:
__v	./valarray_after.h	/^      valarray<_Tp> __v = valarray<_Tp>(*this)[__s];$/;"	kind:local	language:C++	function:std::_Expr::operator []	typeref:typename:valarray<_Tp>	file:
__vacancies	./stl_deque.h	/^	const size_type __vacancies = (this->_M_impl._M_finish._M_last$/;"	kind:local	language:C++	function:std::deque::_M_reserve_elements_at_back	typeref:typename:const size_type	file:
__vacancies	./stl_deque.h	/^	const size_type __vacancies = this->_M_impl._M_start._M_cur$/;"	kind:local	language:C++	function:std::deque::_M_reserve_elements_at_front	typeref:typename:const size_type	file:
__val	./stl_algo.h	/^	    __val = *__i;$/;"	kind:local	language:C++	function:std::__insertion_sort	typeref:typename:iterator_traits<_RandomAccessIterator>::value_type	file:
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<_Tp> __b, size_t __n, size_t __s)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<_Tp> __b,size_t __n,size_t __s)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,_Array<_Tp> __b,size_t __n)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,_Array<_Tp> __b)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,_Array<_Tp> __b,_Array<size_t> __i)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,_Array<_Tp> __b)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s1,_Array<_Tp> __b,size_t __s2)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __src, size_t __n, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __src,size_t __n,_Array<size_t> __i,_Array<_Tp> __dst,_Array<size_t> __j)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, _Tp* __restrict__ __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,_Tp * __restrict__ __b,size_t __n,size_t __s)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n, size_t __s,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,size_t __s,_Tp * __restrict__ __b)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b,const size_t * __restrict__ __i)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,const size_t * __restrict__ __i,_Tp * __restrict__ __b,size_t __n)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n, size_t __s1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __src,size_t __n,size_t __s1,_Tp * __restrict__ __dst,size_t __s2)
__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __src,size_t __n,const size_t * __restrict__ __i,_Tp * __restrict__ __dst,const size_t * __restrict__ __j)
__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,size_t __s,_Tp * __restrict__ __o)
__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,const size_t * __restrict__ __i,_Tp * __restrict__ __o,size_t __n)
__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,_Array<_Tp> __b,size_t __n)
__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, size_t __n, size_t __s,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,_Array<_Tp> __b)
__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(const _Tp* __restrict__ __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __b,const _Tp * __restrict__ __e,_Tp * __restrict__ __o)
__valarray_default_construct	./valarray_array.h	/^    __valarray_default_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
__valarray_destroy_elements	./valarray_array.h	/^    __valarray_destroy_elements(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
__valarray_fill	./valarray_array.h	/^    __valarray_fill (_Array<_Tp> __a, size_t __n, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,const _Tp & __t)
__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,size_t __n,const _Tp & __t)
__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, size_t __n, size_t __s, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,const _Tp & __t)
__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, const size_t* __restrict__ __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,const size_t * __restrict__ __i,size_t __n,const _Tp & __t)
__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,size_t __n,const _Tp & __t)
__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,size_t __n,size_t __s,const _Tp & __t)
__valarray_fill_construct	./valarray_array.h	/^    __valarray_fill_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
__valarray_get_memory	./valarray_array.h	/^  __valarray_get_memory(size_t __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void *	signature:(size_t __n)
__valarray_get_storage	./valarray_array.h	/^    __valarray_get_storage(size_t __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp * 	signature:(size_t __n)
__valarray_max	./valarray_array.h	/^    __valarray_max(const _Ta& __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ta::value_type	signature:(const _Ta & __a)
__valarray_min	./valarray_array.h	/^    __valarray_min(const _Ta& __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ta::value_type	signature:(const _Ta & __a)
__valarray_product	./valarray_array.h	/^    __valarray_product(const _Tp* __restrict__ __f,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(const _Tp * __restrict__ __f,const _Tp * __restrict__ __l)
__valarray_release_memory	./valarray_array.h	/^  __valarray_release_memory(void* __p)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(void * __p)
__valarray_sum	./valarray_array.h	/^    __valarray_sum(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(const _Tp * __restrict__ __f,const _Tp * __restrict__ __l)
__value	./stl_algo.h	/^      typename iterator_traits<_InputIterator>::value_type __value = *__first;$/;"	kind:local	language:C++	function:std::__unique_copy	typeref:typename:iterator_traits<_InputIterator>::value_type	file:
__value	./stl_numeric.h	/^      _ValueType __value = *__first;$/;"	kind:local	language:C++	function:std::adjacent_difference	typeref:typename:_ValueType	file:
__value	./stl_numeric.h	/^      _ValueType __value = *__first;$/;"	kind:local	language:C++	function:std::partial_sum	typeref:typename:_ValueType	file:
__vc	./boost_concept_check.h	/^    typename _SortedAssociativeContainer::value_compare __vc;$/;"	kind:member	language:C++	struct:_SortedAssociativeContainerConcept	typeref:typename:_SortedAssociativeContainer::value_compare	access:public
__w	./ostream_insert.h	/^	      const streamsize __w = __out.width();$/;"	kind:local	language:C++	function:std::__ostream_insert	typeref:typename:const streamsize	file:
__wmask_type	./locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:wctype_t	access:public
__word	./ios_base.h	/^      _Words& __word = (__ix < _M_word_size)$/;"	kind:local	language:C++	function:std::ios_base::iword	typeref:typename:_Words &	file:
__word	./ios_base.h	/^      _Words& __word = (__ix < _M_word_size)$/;"	kind:local	language:C++	function:std::ios_base::pword	typeref:typename:_Words &	file:
__write	./locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
__write	./locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
__x	./boost_concept_check.h	/^    _From __x;$/;"	kind:member	language:C++	struct:_ConvertibleConcept	typeref:typename:_From	access:public
__x	./boost_concept_check.h	/^  void (_Concept::*__x)() _IsUnused = &_Concept::__constraints;$/;"	kind:local	language:C++	function:_GLIBCXX_BEGIN_NAMESPACE	typeref:typename:void (_Concept::*)()	file:
__x	./stl_tree.h	/^	  _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);$/;"	kind:local	language:C++	function:std::_Rb_tree::__rb_verify	typeref:typename:_Const_Link_type	file:
__x	./stl_tree.h	/^      _Const_Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:_Const_Link_type	file:
__x	./stl_tree.h	/^      _Const_Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::lower_bound	typeref:typename:_Const_Link_type	file:
__x	./stl_tree.h	/^      _Const_Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::upper_bound	typeref:typename:_Const_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::lower_bound	typeref:typename:_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin(); \/\/ Current node.$/;"	kind:local	language:C++	function:std::_Rb_tree::upper_bound	typeref:typename:_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal_lower	typeref:typename:_Link_type	file:
__x	./stl_tree.h	/^      _Link_type __x = _M_begin();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^	      _Link_type __y = _M_clone_node(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_copy	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^	  _Link_type __y = _S_left(__x);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_erase	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Const_Link_type __y = _M_end(); \/\/ Last node which is greater than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::upper_bound	typeref:typename:_Const_Link_type	file:
__y	./stl_tree.h	/^      _Const_Link_type __y = _M_end(); \/\/ Last node which is not less than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:_Const_Link_type	file:
__y	./stl_tree.h	/^      _Const_Link_type __y = _M_end(); \/\/ Last node which is not less than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::lower_bound	typeref:typename:_Const_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end(); \/\/ Last node which is greater than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::upper_bound	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end(); \/\/ Last node which is not less than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::find	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end(); \/\/ Last node which is not less than __k.$/;"	kind:local	language:C++	function:std::_Rb_tree::lower_bound	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_equal_lower	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y = _M_end();$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_unique	typeref:typename:_Link_type	file:
__y	./stl_tree.h	/^      _Link_type __y =$/;"	kind:local	language:C++	function:std::_Rb_tree::erase	typeref:typename:_Link_type	file:
__z	./stl_tree.h	/^      _Link_type __z = _M_create_node(__v);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert	typeref:typename:_Link_type	file:
__z	./stl_tree.h	/^      _Link_type __z = _M_create_node(__v);$/;"	kind:local	language:C++	function:std::_Rb_tree::_M_insert_lower	typeref:typename:_Link_type	file:
accumulate	./stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator __first,_InputIterator __last,_Tp __init)
accumulate	./stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator __first,_InputIterator __last,_Tp __init,_BinaryOperation __binary_op)
adjacent_difference	./stl_numeric.h	/^    adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryOperation __binary_op)
adjacent_difference	./stl_numeric.h	/^    adjacent_difference(_InputIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
adjacent_find	./stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
adjacent_find	./stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_BinaryPredicate __binary_pred)
adjustfield	./ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
advance	./stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator & __i,_Distance __n)
all	./locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
allocator	./allocator.h	/^        allocator(const allocator<_Tp1>&) throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:(const allocator<_Tp1> &)
allocator	./allocator.h	/^      allocator() throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:()
allocator	./allocator.h	/^      allocator(const allocator& __a) throw()$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:(const allocator & __a)
allocator	./allocator.h	/^    class allocator: public __glibcxx_base_allocator<_Tp>$/;"	kind:class	language:C++	namespace:std	inherits:__glibcxx_base_allocator<_Tp>
allocator	./allocator.h	/^    class allocator<void>$/;"	kind:class	language:C++	namespace:std
allocator	./allocator.h	/^  extern template class allocator<char>;$/;"	kind:externvar	language:C++	namespace:std	typeref:meta:class
allocator	./allocator.h	/^  extern template class allocator<wchar_t>;$/;"	kind:externvar	language:C++	namespace:std	typeref:meta:class
allocator_type	./basic_string.h	/^      typedef _Alloc					    allocator_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Alloc	access:public
allocator_type	./stl_bvector.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	struct:std::_Bvector_base	typeref:typename:_Alloc	access:public
allocator_type	./stl_bvector.h	/^    typedef _Alloc                        		 allocator_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc	access:public
allocator_type	./stl_deque.h	/^      typedef _Alloc                             allocator_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Alloc	access:public
allocator_type	./stl_deque.h	/^      typedef _Alloc                  allocator_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc	access:public
allocator_type	./stl_list.h	/^      typedef _Alloc                                     allocator_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Alloc	access:public
allocator_type	./stl_list.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc	access:public
allocator_type	./stl_map.h	/^      typedef _Alloc                                        allocator_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc	access:public
allocator_type	./stl_multimap.h	/^      typedef _Alloc                                        allocator_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc	access:public
allocator_type	./stl_multiset.h	/^      typedef _Alloc   allocator_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc	access:public
allocator_type	./stl_set.h	/^      typedef _Alloc   allocator_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc	access:public
allocator_type	./stl_tree.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Alloc	access:public
allocator_type	./stl_vector.h	/^      typedef _Alloc                        		 allocator_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc	access:public
allocator_type	./stl_vector.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	struct:std::_Vector_base	typeref:typename:_Alloc	access:public
always_noconv	./codecvt.h	/^      always_noconv() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:bool	access:public	signature:() const
app	./ios_base.h	/^    static const openmode app =		_S_app;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
append	./basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
append	./basic_string.h	/^      append(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
append	./basic_string.h	/^      append(const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
append	./basic_string.h	/^      append(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
append	./basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
append	./basic_string.h	/^      append(size_type __n, _CharT __c);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
apply	./valarray_after.h	/^      valarray<value_type> apply(value_type (*)(const value_type&)) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(value_type (*)(const value_type &)) const
apply	./valarray_after.h	/^      valarray<value_type> apply(value_type (*)(value_type)) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(value_type (*)(value_type)) const
apply	./valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(_Tp)) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(_Tp __f (_Tp)) const
apply	./valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(const _Tp&)) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(_Tp __f (const _Tp &)) const
argument_type	./stl_function.h	/^      typedef _Arg argument_type;   \/\/\/< @c argument_type is the type of the$/;"	kind:typedef	language:C++	struct:std::unary_function	typeref:typename:_Arg	access:public
assign	./basic_string.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	./basic_string.h	/^      assign(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
assign	./basic_string.h	/^      assign(const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
assign	./basic_string.h	/^      assign(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
assign	./basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
assign	./basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
assign	./char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	./char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
assign	./char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
assign	./stl_bvector.h	/^      assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	./stl_bvector.h	/^    assign(size_type __n, const bool& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n,const bool & __x)
assign	./stl_deque.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	./stl_deque.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
assign	./stl_list.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	./stl_list.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
assign	./stl_vector.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	./stl_vector.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
at	./basic_string.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	./basic_string.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
at	./stl_bvector.h	/^    at(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	./stl_bvector.h	/^    at(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
at	./stl_deque.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	./stl_deque.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:(size_type __n)
at	./stl_map.h	/^      at(const key_type& __k) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const mapped_type &	access:public	signature:(const key_type & __k) const
at	./stl_map.h	/^      at(const key_type& __k)$/;"	kind:function	language:C++	class:std::map	typeref:typename:mapped_type &	access:public	signature:(const key_type & __k)
at	./stl_vector.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	./stl_vector.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
ate	./ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
back	./stl_bvector.h	/^    back() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
back	./stl_bvector.h	/^    back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
back	./stl_deque.h	/^      back() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:() const
back	./stl_deque.h	/^      back()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:()
back	./stl_list.h	/^      back() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reference	access:public	signature:() const
back	./stl_list.h	/^      back()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reference	access:public	signature:()
back	./stl_queue.h	/^      back() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:const_reference	access:public	signature:() const
back	./stl_queue.h	/^      back()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:reference	access:public	signature:()
back	./stl_vector.h	/^      back() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
back	./stl_vector.h	/^      back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
back_insert_iterator	./stl_iterator.h	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	kind:function	language:C++	class:std::back_insert_iterator	access:public	signature:(_Container & __x)
back_insert_iterator	./stl_iterator.h	/^    class back_insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
back_inserter	./stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:back_insert_iterator<_Container>	signature:(_Container & __x)
bad	./basic_ios.h	/^      bad() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
badbit	./ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
base	./stl_iterator.h	/^      base() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:const _Iterator &	access:public	signature:() const
base	./stl_iterator.h	/^      base() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:iterator_type	access:public	signature:() const
basefield	./ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
basic_ios	./basic_ios.h	/^      basic_ios()$/;"	kind:function	language:C++	class:std::basic_ios	access:protected	signature:()
basic_ios	./basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
basic_ios	./basic_ios.h	/^    class basic_ios : public ios_base$/;"	kind:class	language:C++	namespace:std	inherits:ios_base
basic_string	./basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
basic_string	./basic_string.h	/^      basic_string();$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:()
basic_string	./basic_string.h	/^      basic_string(const _Alloc& __a);$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _Alloc & __a)
basic_string	./basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
basic_string	./basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	./basic_string.h	/^      basic_string(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str)
basic_string	./basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
basic_string	./basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
basic_string	./basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
basic_string	./basic_string.h	/^    basic_string()$/;"	kind:function	language:C++	class:std::basic_string	signature:()
basic_string	./basic_string.h	/^    class basic_string$/;"	kind:class	language:C++	namespace:std
beg	./ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
begin	./basic_string.h	/^      begin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
begin	./basic_string.h	/^      begin()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
begin	./stl_bvector.h	/^    begin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_bvector.h	/^    begin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
begin	./stl_deque.h	/^      begin() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_deque.h	/^      begin()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:()
begin	./stl_list.h	/^      begin() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_list.h	/^      begin()$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:()
begin	./stl_map.h	/^      begin() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_map.h	/^      begin()$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:()
begin	./stl_multimap.h	/^      begin() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_multimap.h	/^      begin()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:()
begin	./stl_multiset.h	/^      begin() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:() const
begin	./stl_set.h	/^      begin() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:() const
begin	./stl_tempbuf.h	/^      begin()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
begin	./stl_tree.h	/^      begin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_tree.h	/^      begin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:()
begin	./stl_vector.h	/^      begin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
begin	./stl_vector.h	/^      begin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
begin	./valarray_array.h	/^      _Tp* begin() const;$/;"	kind:prototype	language:C++	struct:std::_Array	typeref:typename:_Tp *	access:public	signature:() const
begin	./valarray_array.h	/^    _Array<_Tp>::begin () const$/;"	kind:function	language:C++	class:std::_Array	typeref:typename:_Tp *	signature:() const
bidirectional_iterator_tag	./stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:forward_iterator_tag
binary	./ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
binary_function	./stl_function.h	/^    struct binary_function$/;"	kind:struct	language:C++	namespace:std
binary_negate	./stl_function.h	/^      binary_negate(const _Predicate& __x)$/;"	kind:function	language:C++	class:std::binary_negate	access:public	signature:(const _Predicate & __x)
binary_negate	./stl_function.h	/^    class binary_negate$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
binary_search	./stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
binary_search	./stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
bind1st	./stl_function.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binder1st<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
bind2nd	./stl_function.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binder2nd<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
binder1st	./stl_function.h	/^      binder1st(const _Operation& __x,$/;"	kind:function	language:C++	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
binder1st	./stl_function.h	/^    class binder1st$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
binder2nd	./stl_function.h	/^      binder2nd(const _Operation& __x,$/;"	kind:function	language:C++	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
binder2nd	./stl_function.h	/^    class binder2nd$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
boolalpha	./ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
boolalpha	./ios_base.h	/^  boolalpha(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
c	./stl_queue.h	/^      _Sequence  c;$/;"	kind:member	language:C++	class:std::priority_queue	typeref:typename:_Sequence	access:protected
c	./stl_queue.h	/^      _Sequence c;$/;"	kind:member	language:C++	class:std::queue	typeref:typename:_Sequence	access:protected
c	./stl_stack.h	/^      _Sequence c;$/;"	kind:member	language:C++	class:std::stack	typeref:typename:_Sequence	access:protected
c_str	./basic_string.h	/^      c_str() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
capacity	./basic_string.h	/^      capacity() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
capacity	./stl_bvector.h	/^    capacity() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
capacity	./stl_vector.h	/^      capacity() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
catalog	./locale_facets.h	/^    typedef int catalog;$/;"	kind:typedef	language:C++	struct:std::messages_base	typeref:typename:int	access:public
catch	./exception_defines.h	/^# define catch(/;"	kind:macro	language:C++	signature:(X)
category	./locale_classes.h	/^    typedef int	category;$/;"	kind:typedef	language:C++	class:std::locale	typeref:typename:int	access:public
char_traits	./char_traits.h	/^    struct char_traits$/;"	kind:struct	language:C++
char_traits::assign	./char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:void	access:public	signature:(char_type & __c1,const char_type & __c2)
char_traits::assign	./char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
char_traits::assign	./char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
char_traits::char_type	./char_traits.h	/^      typedef _CharT                                    char_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_CharT	access:public
char_traits::compare	./char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::compare	./char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::copy	./char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::copy	./char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::eof	./char_traits.h	/^      eof()$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:()
char_traits::eq	./char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
char_traits::eq_int_type	./char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
char_traits::find	./char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
char_traits::find	./char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
char_traits::int_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
char_traits::length	./char_traits.h	/^      length(const char_type* __s);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:std::size_t	access:public	signature:(const char_type * __s)
char_traits::length	./char_traits.h	/^    length(const char_type* __p)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:std::size_t	signature:(const char_type * __p)
char_traits::lt	./char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
char_traits::move	./char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::move	./char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
char_traits::not_eof	./char_traits.h	/^      not_eof(const int_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
char_traits::off_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
char_traits::pos_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
char_traits::state_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
char_traits::to_char_type	./char_traits.h	/^      to_char_type(const int_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
char_traits::to_int_type	./char_traits.h	/^      to_int_type(const char_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
char_type	./basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_CharT	access:public
char_type	./char_traits.h	/^      typedef _CharT                                    char_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::collate	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::messages	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::messages_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::moneypunct_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::num_get	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::numpunct_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_get_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_put	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_put_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT		char_type;$/;"	kind:typedef	language:C++	class:std::ctype_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT		char_type;$/;"	kind:typedef	language:C++	class:std::num_put	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT               char_type;$/;"	kind:typedef	language:C++	class:std::collate_byname	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef _CharT char_type;$/;"	kind:typedef	language:C++	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
char_type	./locale_facets.h	/^      typedef char		char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:char	access:public
char_type	./locale_facets.h	/^      typedef wchar_t		char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:wchar_t	access:public
char_type	./stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:_CharT	access:public
char_type	./stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:_CharT	access:public
char_type	./streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
char_type	./streambuf_iterator.h	/^      typedef _CharT                           char_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
classic	./locale_classes.h	/^    classic();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:const locale &	access:public	signature:()
classic_table	./locale_facets.h	/^      classic_table() throw();$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected	signature:()
clear	./basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
clear	./basic_string.h	/^      clear()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:()
clear	./stl_bvector.h	/^    clear()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
clear	./stl_deque.h	/^      clear()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
clear	./stl_list.h	/^      clear()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
clear	./stl_map.h	/^      clear()$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:()
clear	./stl_multimap.h	/^      clear()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:()
clear	./stl_multiset.h	/^      clear()$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:()
clear	./stl_set.h	/^      clear()$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:()
clear	./stl_tree.h	/^      clear()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:()
clear	./stl_vector.h	/^      clear()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
close	./locale_facets.h	/^      close(catalog __c) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:void	access:public	signature:(catalog __c) const
codecvt	./codecvt.h	/^      codecvt(__c_locale __cloc, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::codecvt	access:public	signature:(__c_locale __cloc,size_t __refs=0)
codecvt	./codecvt.h	/^      codecvt(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::codecvt	access:public	signature:(size_t __refs=0)
codecvt	./codecvt.h	/^      codecvt(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::codecvt	access:public	signature:(size_t __refs=0)
codecvt	./codecvt.h	/^    class codecvt$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<_InternT,_ExternT,_StateT>
codecvt	./codecvt.h	/^    class codecvt<char, char, mbstate_t>$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<char,char,mbstate_t>
codecvt	./codecvt.h	/^    class codecvt<wchar_t, char, mbstate_t>$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<wchar_t,char,mbstate_t>
codecvt_base	./codecvt.h	/^  class codecvt_base$/;"	kind:class	language:C++	namespace:std
codecvt_byname	./codecvt.h	/^      codecvt_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::codecvt_byname	access:public	signature:(const char * __s,size_t __refs=0)
codecvt_byname	./codecvt.h	/^    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>$/;"	kind:class	language:C++	namespace:std	inherits:codecvt<_InternT,_ExternT,_StateT>
collate	./locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
collate	./locale_facets.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
collate	./locale_facets.h	/^      collate(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate	access:public	signature:(size_t __refs=0)
collate	./locale_facets.h	/^    class collate : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
collate_byname	./locale_facets.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
collate_byname	./locale_facets.h	/^    class collate_byname : public collate<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:collate<_CharT>
combine	./locale_classes.h	/^      combine(const locale& __other) const;$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __other) const
comp	./stl_map.h	/^	_Compare comp;$/;"	kind:member	language:C++	class:std::map::value_compare	typeref:typename:_Compare	access:protected
comp	./stl_multimap.h	/^	_Compare comp;$/;"	kind:member	language:C++	class:std::multimap::value_compare	typeref:typename:_Compare	access:protected
comp	./stl_queue.h	/^      _Compare   comp;$/;"	kind:member	language:C++	class:std::priority_queue	typeref:typename:_Compare	access:protected
compare	./basic_string.h	/^      compare(const _CharT* __s) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
compare	./basic_string.h	/^      compare(const basic_string& __str) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
compare	./basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
compare	./basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
compare	./basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
compare	./basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2) const
compare	./char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	./char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	./locale_facets.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	kind:function	language:C++	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
const_iterator	./basic_string.h	/^                                                            const_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
const_iterator	./stl_bvector.h	/^    typedef _Bit_const_iterator                          const_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_const_iterator	access:public
const_iterator	./stl_bvector.h	/^    typedef _Bit_const_iterator  const_iterator;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:_Bit_const_iterator	access:public
const_iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Deque_iterator<_Tp,const _Tp &,const _Tp * >	access:public
const_iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator<_Tp,const _Tp &,const _Tp * >	access:public
const_iterator	./stl_deque.h	/^      typedef typename _Base::const_iterator             const_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::const_iterator	access:public
const_iterator	./stl_list.h	/^      typedef _List_const_iterator<_Tp>                  const_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_const_iterator<_Tp>	access:public
const_iterator	./stl_list.h	/^      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;$/;"	kind:typedef	language:C++	function:std::operator ==	typeref:typename:list<_Tp,_Alloc>::const_iterator
const_iterator	./stl_map.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::const_iterator	access:public
const_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::const_iterator	access:public
const_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_iterator	access:public
const_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_iterator	access:public
const_iterator	./stl_tree.h	/^      typedef _Rb_tree_const_iterator<value_type> const_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_const_iterator<value_type>	access:public
const_iterator	./stl_vector.h	/^      const_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,vector_type>	access:public
const_mem_fun1_ref_t	./stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	kind:function	language:C++	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_ref_t	./stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
const_mem_fun1_t	./stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	kind:function	language:C++	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_t	./stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
const_mem_fun_ref_t	./stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	kind:function	language:C++	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_ref_t	./stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp,_Ret>
const_mem_fun_t	./stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	kind:function	language:C++	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_t	./stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<const_Tp*,_Ret>
const_pointer	./allocator.h	/^      typedef const _Tp* const_pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const _Tp *	access:public
const_pointer	./allocator.h	/^      typedef const void* const_pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const void *	access:public
const_pointer	./basic_string.h	/^      typedef typename _CharT_alloc_type::const_pointer	    const_pointer;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_pointer	access:public
const_pointer	./stl_bvector.h	/^    typedef const bool*                                  const_pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:const bool *	access:public
const_pointer	./stl_deque.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::const_pointer	access:public
const_pointer	./stl_list.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::const_pointer	access:public
const_pointer	./stl_map.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::const_pointer	access:public
const_pointer	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::const_pointer	access:public
const_pointer	./stl_multiset.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::const_pointer	access:public
const_pointer	./stl_set.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::const_pointer	access:public
const_pointer	./stl_tree.h	/^      typedef const value_type* const_pointer;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const value_type *	access:public
const_pointer	./stl_vector.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::const_pointer	access:public
const_reference	./allocator.h	/^      typedef const _Tp& const_reference;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const _Tp &	access:public
const_reference	./basic_string.h	/^      typedef typename _CharT_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_reference	access:public
const_reference	./stl_bvector.h	/^    typedef bool                                         const_reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:bool	access:public
const_reference	./stl_bvector.h	/^    typedef bool                 const_reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:bool	access:public
const_reference	./stl_deque.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::const_reference	access:public
const_reference	./stl_list.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::const_reference	access:public
const_reference	./stl_map.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::const_reference	access:public
const_reference	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::const_reference	access:public
const_reference	./stl_multiset.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::const_reference	access:public
const_reference	./stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::const_reference	access:public
const_reference	./stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::const_reference	access:public
const_reference	./stl_set.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::const_reference	access:public
const_reference	./stl_stack.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::const_reference	access:public
const_reference	./stl_tree.h	/^      typedef const value_type& const_reference;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const value_type &	access:public
const_reference	./stl_vector.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::const_reference	access:public
const_reverse_iterator	./basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	./stl_bvector.h	/^    typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	./stl_deque.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	./stl_list.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	./stl_map.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::const_reverse_iterator	access:public
const_reverse_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::const_reverse_iterator	access:public
const_reverse_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_reverse_iterator	access:public
const_reverse_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_reverse_iterator	access:public
const_reverse_iterator	./stl_tree.h	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	./stl_vector.h	/^      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<const_iterator>	access:public
container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::insert_iterator	typeref:typename:_Container *	access:protected
container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::back_insert_iterator	typeref:typename:_Container	access:public
container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::front_insert_iterator	typeref:typename:_Container	access:public
container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::insert_iterator	typeref:typename:_Container	access:public
container_type	./stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence	access:public
container_type	./stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence	access:public
container_type	./stl_stack.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence	access:public
copy	./basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
copy	./char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	./char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	./stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	struct:std::__copy	typeref:typename:_OI	access:public	signature:(_II __first,_II __last,_OI __result)
copy	./stl_algobase.h	/^        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	kind:function	language:C++	struct:std::__copy	typeref:typename:_Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
copy	./stl_algobase.h	/^    copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
copy	./stl_algobase.h	/^    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,ostreambuf_iterator<_CharT>)
copy	./streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
copy_backward	./stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
copyfmt	./basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
copyfmt_event	./ios_base.h	/^      copyfmt_event$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
count	./stl_algo.h	/^    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __value)
count	./stl_map.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
count	./stl_multimap.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
count	./stl_multiset.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
count	./stl_set.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
count	./stl_tree.h	/^      count(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
count	./stl_tree.h	/^    count(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type	signature:(const _Key & __k) const
count_if	./stl_algo.h	/^    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
cshift	./valarray_after.h	/^      valarray<value_type> cshift(int) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(int) const
cshift	./valarray_after.h	/^    _Expr<_Clos, _Tp>::cshift(int __n) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(int __n) const
ctype	./locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
ctype	./locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	./locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
ctype	./locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	./locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	kind:function	language:C++	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	./locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	./locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:__ctype_abstract_base<_CharT>
ctype	./locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,ctype_base
ctype	./locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	kind:class	language:C++	namespace:std	inherits:__ctype_abstract_base<wchar_t>
ctype_byname	./locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
ctype_byname	./locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:ctype<_CharT>
ctype_byname	./locale_facets.h	/^    ctype_byname<char>::ctype_byname(const char*, size_t refs);$/;"	kind:prototype	language:C++	class:std::ctype_byname	signature:(const char *,size_t refs)
ctype_byname	./locale_facets.h	/^    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);$/;"	kind:prototype	language:C++	class:std::ctype_byname	signature:(const char *,size_t refs)
cur	./ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
curr_symbol	./locale_facets.h	/^      curr_symbol() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
current	./stl_iterator.h	/^      _Iterator current;$/;"	kind:member	language:C++	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
data	./basic_string.h	/^      data() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
data	./stl_bvector.h	/^    data() { }$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
data	./stl_vector.h	/^      data() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_pointer	access:public	signature:() const
data	./stl_vector.h	/^      data()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:pointer	access:public	signature:()
date_order	./locale_facets.h	/^      date_order()  const$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:dateorder	access:public	signature:() const
dateorder	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enum	language:C++	class:std::time_base	access:public
dec	./ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
dec	./ios_base.h	/^  dec(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
decimal_point	./locale_facets.h	/^      decimal_point() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:public	signature:() const
decimal_point	./locale_facets.h	/^      decimal_point() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
deque	./stl_deque.h	/^        deque(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
deque	./stl_deque.h	/^      deque(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(const allocator_type & __a=allocator_type ())
deque	./stl_deque.h	/^      deque(const deque& __x)$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(const deque & __x)
deque	./stl_deque.h	/^      deque(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
deque	./stl_deque.h	/^    class deque : protected _Deque_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Deque_base<_Tp,_Alloc>
difference_type	./allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	./allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	./basic_string.h	/^      typedef typename _CharT_alloc_type::difference_type   difference_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::difference_type	access:public
difference_type	./stl_bvector.h	/^    typedef ptrdiff_t                                    difference_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_deque.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_deque.h	/^      typedef ptrdiff_t                       difference_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_iterator.h	/^							       difference_type;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::difference_type	access:public
difference_type	./stl_iterator.h	/^                                                             difference_type;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::difference_type	access:public
difference_type	./stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Distance	access:public
difference_type	./stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	./stl_list.h	/^      typedef ptrdiff_t                                  difference_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_map.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::difference_type	access:public
difference_type	./stl_multimap.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::difference_type	access:public
difference_type	./stl_multiset.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::difference_type	access:public
difference_type	./stl_set.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::difference_type	access:public
difference_type	./stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_tree.h	/^      typedef ptrdiff_t difference_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:ptrdiff_t	access:public
difference_type	./stl_vector.h	/^      typedef ptrdiff_t					 difference_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:ptrdiff_t	access:public
distance	./stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
divides	./stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
dmy	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
do_always_noconv	./codecvt.h	/^      bool do_always_noconv() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:bool	access:protected	signature:() const
do_always_noconv	./codecvt.h	/^      do_always_noconv() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:bool	access:protected	signature:() const
do_always_noconv	./codecvt.h	/^      do_always_noconv() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:bool	access:protected	signature:() const
do_close	./locale_facets.h	/^      do_close(catalog) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:void	access:protected	signature:(catalog) const
do_compare	./locale_facets.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
do_curr_symbol	./locale_facets.h	/^      do_curr_symbol()   const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
do_date_order	./locale_facets.h	/^      do_date_order() const;$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:dateorder	access:protected	signature:() const
do_decimal_point	./locale_facets.h	/^      do_decimal_point() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:protected	signature:() const
do_decimal_point	./locale_facets.h	/^      do_decimal_point() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_encoding	./codecvt.h	/^      do_encoding() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:() const
do_encoding	./codecvt.h	/^      do_encoding() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
do_encoding	./codecvt.h	/^      int do_encoding() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
do_falsename	./locale_facets.h	/^      do_falsename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_frac_digits	./locale_facets.h	/^      do_frac_digits() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:int	access:protected	signature:() const
do_get	./locale_facets.h	/^      do_get(catalog, int, int, const string_type& __dfault) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:string_type	access:protected	signature:(catalog,int,int,const string_type & __dfault) const
do_get	./locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,long double & __units) const
do_get	./locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,string_type & __digits) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,double &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,float &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,long double &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,long long &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned int &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned long &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned long long &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned short &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,void * &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const;$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long &) const
do_get	./locale_facets.h	/^    messages<char>::do_get(catalog, int, int, const string&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:string	signature:(catalog,int,int,const string &) const
do_get	./locale_facets.h	/^    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:wstring	signature:(catalog,int,int,const wstring &) const
do_get_date	./locale_facets.h	/^      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
do_get_monthname	./locale_facets.h	/^      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base &,ios_base::iostate & __err,tm * __tm) const
do_get_time	./locale_facets.h	/^      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
do_get_weekday	./locale_facets.h	/^      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base &,ios_base::iostate & __err,tm * __tm) const
do_get_year	./locale_facets.h	/^      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
do_grouping	./locale_facets.h	/^      do_grouping() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string	access:protected	signature:() const
do_grouping	./locale_facets.h	/^      do_grouping() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
do_hash	./locale_facets.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_in	./codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
do_in	./codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
do_in	./codecvt.h	/^      do_in(state_type& __state,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
do_is	./locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	./locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	./locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_is	./locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_length	./codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
do_length	./codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
do_length	./codecvt.h	/^      int do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
do_max_length	./codecvt.h	/^      do_max_length() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:() const
do_max_length	./codecvt.h	/^      do_max_length() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
do_narrow	./locale_facets.h	/^      do_narrow(char_type __c, char) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char) const
do_narrow	./locale_facets.h	/^      do_narrow(char_type, char __dfault) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
do_narrow	./locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char,char * __dest) const
do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __dest) const
do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __dest) const
do_neg_format	./locale_facets.h	/^      do_neg_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:protected	signature:() const
do_negative_sign	./locale_facets.h	/^      do_negative_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
do_open	./locale_facets.h	/^      do_open(const basic_string<char>&, const locale&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:catalog	access:protected	signature:(const basic_string<char> &,const locale &) const
do_out	./codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
do_out	./codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
do_pos_format	./locale_facets.h	/^      do_pos_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:protected	signature:() const
do_positive_sign	./locale_facets.h	/^      do_positive_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
do_put	./locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,const string_type & __digits) const
do_put	./locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,long double __units) const
do_put	./locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	kind:prototype	language:C++	class:std::time_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,char __format,char __mod) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,bool __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,const void * __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,double __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long double __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long long __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long long __v) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,unsigned long long) const
do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,unsigned long) const
do_scan_is	./locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_is	./locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	./locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	./locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_thousands_sep	./locale_facets.h	/^      do_thousands_sep() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:protected	signature:() const
do_thousands_sep	./locale_facets.h	/^      do_thousands_sep() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_tolower	./locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_tolower	./locale_facets.h	/^      do_tolower(char_type) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type) const
do_tolower	./locale_facets.h	/^      do_tolower(char_type) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type) const
do_tolower	./locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_tolower	./locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	./locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_toupper	./locale_facets.h	/^      do_toupper(char_type) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type) const
do_toupper	./locale_facets.h	/^      do_toupper(char_type) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type) const
do_toupper	./locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	./locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_transform	./locale_facets.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_truename	./locale_facets.h	/^      do_truename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_unshift	./codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
do_unshift	./codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
do_unshift	./codecvt.h	/^      do_unshift(state_type& __state,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
do_widen	./locale_facets.h	/^      do_widen(char __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	./locale_facets.h	/^      do_widen(char __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	./locale_facets.h	/^      do_widen(char) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char) const
do_widen	./locale_facets.h	/^      do_widen(char) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char) const
do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
empty	./basic_string.h	/^      empty() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:bool	access:public	signature:() const
empty	./stl_bvector.h	/^    empty() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:bool	access:public	signature:() const
empty	./stl_deque.h	/^      empty() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:bool	access:public	signature:() const
empty	./stl_list.h	/^      empty() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:bool	access:public	signature:() const
empty	./stl_map.h	/^      empty() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:bool	access:public	signature:() const
empty	./stl_multimap.h	/^      empty() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:bool	access:public	signature:() const
empty	./stl_multiset.h	/^      empty() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:bool	access:public	signature:() const
empty	./stl_queue.h	/^      empty() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:bool	access:public	signature:() const
empty	./stl_queue.h	/^      empty() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:bool	access:public	signature:() const
empty	./stl_set.h	/^      empty() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:bool	access:public	signature:() const
empty	./stl_stack.h	/^      empty() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:bool	access:public	signature:() const
empty	./stl_tree.h	/^      empty() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:bool	access:public	signature:() const
empty	./stl_vector.h	/^      empty() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:bool	access:public	signature:() const
encoding	./codecvt.h	/^      encoding() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:() const
end	./basic_string.h	/^      end() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
end	./basic_string.h	/^      end()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
end	./ios_base.h	/^    static const seekdir end =		_S_end;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
end	./stl_bvector.h	/^    end() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_bvector.h	/^    end()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
end	./stl_deque.h	/^      end() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_deque.h	/^      end()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:()
end	./stl_list.h	/^      end() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_list.h	/^      end()$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:()
end	./stl_map.h	/^      end() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_map.h	/^      end()$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:()
end	./stl_multimap.h	/^      end() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_multimap.h	/^      end()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:()
end	./stl_multiset.h	/^      end() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:() const
end	./stl_set.h	/^      end() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:() const
end	./stl_tempbuf.h	/^      end()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
end	./stl_tree.h	/^      end() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_tree.h	/^      end()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:()
end	./stl_vector.h	/^      end() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
end	./stl_vector.h	/^      end()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
eof	./basic_ios.h	/^      eof() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
eof	./char_traits.h	/^      eof()$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:()
eofbit	./ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
eq	./char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq_int_type	./char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
equal	./stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
equal	./stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
equal	./streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:bool	access:public	signature:(const istreambuf_iterator & __b) const
equal_range	./stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_ForwardIterator,_ForwardIterator>	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
equal_range	./stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_ForwardIterator,_ForwardIterator>	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
equal_range	./stl_map.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
equal_range	./stl_map.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
equal_range	./stl_multimap.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
equal_range	./stl_multimap.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
equal_range	./stl_multiset.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
equal_range	./stl_multiset.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
equal_range	./stl_set.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
equal_range	./stl_set.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
equal_range	./stl_tree.h	/^      equal_range(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
equal_range	./stl_tree.h	/^      equal_range(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<iterator,iterator>	access:public	signature:(const key_type & __x)
equal_range	./stl_tree.h	/^    equal_range(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	signature:(const _Key & __k) const
equal_range	./stl_tree.h	/^    equal_range(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	signature:(const _Key & __k)
equal_to	./stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
erase	./basic_string.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	./basic_string.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __position)
erase	./basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
erase	./stl_bvector.h	/^    erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	./stl_bvector.h	/^    erase(iterator __position)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position)
erase	./stl_deque.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	./stl_deque.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __position)
erase	./stl_list.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	./stl_list.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __position)
erase	./stl_map.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:(const key_type & __x)
erase	./stl_map.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
erase	./stl_map.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(iterator __position)
erase	./stl_multimap.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:(const key_type & __x)
erase	./stl_multimap.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
erase	./stl_multimap.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(iterator __position)
erase	./stl_multiset.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:(const key_type & __x)
erase	./stl_multiset.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
erase	./stl_multiset.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(iterator __position)
erase	./stl_set.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:(const key_type & __x)
erase	./stl_set.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
erase	./stl_set.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(iterator __position)
erase	./stl_tree.h	/^      erase(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:(const key_type & __x)
erase	./stl_tree.h	/^      erase(const key_type* __first, const key_type* __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const key_type * __first,const key_type * __last)
erase	./stl_tree.h	/^      erase(const_iterator __first, const_iterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const_iterator __first,const_iterator __last)
erase	./stl_tree.h	/^      erase(const_iterator __position);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const_iterator __position)
erase	./stl_tree.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
erase	./stl_tree.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(iterator __position)
erase	./stl_tree.h	/^    erase(const _Key& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type	signature:(const _Key & __x)
erase	./stl_tree.h	/^    erase(const _Key* __first, const _Key* __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const _Key * __first,const _Key * __last)
erase	./stl_tree.h	/^    erase(const_iterator __first, const_iterator __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const_iterator __first,const_iterator __last)
erase	./stl_tree.h	/^    erase(const_iterator __position)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const_iterator __position)
erase	./stl_tree.h	/^    erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(iterator __first,iterator __last)
erase	./stl_tree.h	/^    erase(iterator __position)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(iterator __position)
erase	./stl_vector.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	./stl_vector.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position)
erase_event	./ios_base.h	/^      erase_event,$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
error	./codecvt.h	/^      error,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
event	./ios_base.h	/^    enum event$/;"	kind:enum	language:C++	class:std::ios_base	access:public
event_callback	./ios_base.h	/^    typedef void (*event_callback) (event, ios_base&, int);$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:void (*)(event,ios_base &,int)	access:public
exceptions	./basic_ios.h	/^      exceptions() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
exceptions	./basic_ios.h	/^      exceptions(iostate __except)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
extern_type	./codecvt.h	/^      typedef _ExternT			extern_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_ExternT	access:public
extern_type	./codecvt.h	/^      typedef _ExternT			extern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_ExternT	access:public
extern_type	./codecvt.h	/^      typedef char			extern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:char	access:public
facet	./locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::facet	access:private	signature:(const facet &)
facet	./locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	kind:function	language:C++	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
facet	./locale_classes.h	/^  class locale::facet$/;"	kind:class	language:C++	class:std::locale
fail	./basic_ios.h	/^      fail() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
failbit	./ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
failed	./streambuf_iterator.h	/^      failed() const throw()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:bool	access:public	signature:() const
failure	./ios_base.h	/^      failure(const string& __str) throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	access:public	signature:(const string & __str)
failure	./ios_base.h	/^    class failure : public exception$/;"	kind:class	language:C++	class:std::ios_base	inherits:exception	access:public
falsename	./locale_facets.h	/^      falsename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
field	./locale_facets.h	/^    struct pattern { char field[4]; };$/;"	kind:member	language:C++	struct:std::money_base::pattern	typeref:typename:char[4]	access:public
fill	./basic_ios.h	/^      fill() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
fill	./basic_ios.h	/^      fill(char_type __ch)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
fill	./stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	struct:std::__fill	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
fill	./stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
fill	./stl_algobase.h	/^  fill(char* __first, char* __last, const char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(char * __first,char * __last,const char & __c)
fill	./stl_algobase.h	/^  fill(signed char* __first, signed char* __last, const signed char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(signed char * __first,signed char * __last,const signed char & __c)
fill	./stl_algobase.h	/^  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(unsigned char * __first,unsigned char * __last,const unsigned char & __c)
fill	./stl_bvector.h	/^  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Bit_iterator __first,_Bit_iterator __last,const bool & __x)
fill	./stl_deque.h	/^    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const _Deque_iterator<_Tp,_Tp &,_Tp * > & __first,const _Deque_iterator<_Tp,_Tp &,_Tp * > & __last,const _Tp & __value)
fill_n	./stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	kind:function	language:C++	struct:std::__fill_n	typeref:typename:_OutputIterator	access:public	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
fill_n	./stl_algobase.h	/^    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
fill_n	./stl_algobase.h	/^    fill_n(char* __first, _Size __n, const char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:char *	signature:(char * __first,_Size __n,const char & __c)
fill_n	./stl_algobase.h	/^    fill_n(signed char* __first, _Size __n, const signed char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:signed char *	signature:(signed char * __first,_Size __n,const signed char & __c)
fill_n	./stl_algobase.h	/^    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:unsigned char *	signature:(unsigned char * __first,_Size __n,const unsigned char & __c)
find	./basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find	./basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find	./basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find	./basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find	./char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	./char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	./stl_algo.h	/^    find(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __val)
find	./stl_algo.h	/^    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,const _CharT &)
find	./stl_map.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
find	./stl_map.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
find	./stl_multimap.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
find	./stl_multimap.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
find	./stl_multiset.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
find	./stl_multiset.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
find	./stl_set.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
find	./stl_set.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
find	./stl_tree.h	/^      find(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
find	./stl_tree.h	/^      find(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
find	./stl_tree.h	/^    find(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
find	./stl_tree.h	/^    find(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
find	./streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
find_end	./stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2)
find_end	./stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __comp)
find_first_not_of	./basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_not_of	./basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_not_of	./basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_not_of	./basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_of	./basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_of	./basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_of	./basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_of	./basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_of	./stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2)
find_first_of	./stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,_BinaryPredicate __comp)
find_if	./stl_algo.h	/^    find_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
find_last_not_of	./basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_not_of	./basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_not_of	./basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_not_of	./basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
find_last_of	./basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_of	./basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_of	./basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_of	./basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
first	./stl_pair.h	/^      _T1 first;                 \/\/\/< @c first is a copy of the first object$/;"	kind:member	language:C++	struct:std::pair	typeref:typename:_T1	access:public
first_argument_type	./stl_function.h	/^      typedef _Arg1 first_argument_type;   \/\/\/< the type of the first argument$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Arg1	access:public
first_type	./stl_pair.h	/^      typedef _T1 first_type;    \/\/\/<  @c first_type is the first bound type$/;"	kind:typedef	language:C++	struct:std::pair	typeref:typename:_T1	access:public
fixed	./ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
fixed	./ios_base.h	/^  fixed(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
flags	./ios_base.h	/^    flags() const { return _M_flags; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
flags	./ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
flip	./stl_bvector.h	/^    flip()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
flip	./stl_bvector.h	/^    flip()$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:void	access:public	signature:()
floatfield	./ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
fmtflags	./ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
for_each	./stl_algo.h	/^    for_each(_InputIterator __first, _InputIterator __last, _Function __f)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Function	signature:(_InputIterator __first,_InputIterator __last,_Function __f)
forward_iterator_tag	./stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:input_iterator_tag
fpos	./postypes.h	/^      fpos()$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:()
fpos	./postypes.h	/^      fpos(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:(streamoff __off)
fpos	./postypes.h	/^    class fpos$/;"	kind:class	language:C++	namespace:std
frac_digits	./locale_facets.h	/^      frac_digits() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:int	access:public	signature:() const
front	./stl_bvector.h	/^    front() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
front	./stl_bvector.h	/^    front()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
front	./stl_deque.h	/^      front() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:() const
front	./stl_deque.h	/^      front()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:()
front	./stl_list.h	/^      front() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reference	access:public	signature:() const
front	./stl_list.h	/^      front()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reference	access:public	signature:()
front	./stl_queue.h	/^      front() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:const_reference	access:public	signature:() const
front	./stl_queue.h	/^      front()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:reference	access:public	signature:()
front	./stl_vector.h	/^      front() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
front	./stl_vector.h	/^      front()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
front_insert_iterator	./stl_iterator.h	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	kind:function	language:C++	class:std::front_insert_iterator	access:public	signature:(_Container & __x)
front_insert_iterator	./stl_iterator.h	/^    class front_insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
front_inserter	./stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:front_insert_iterator<_Container>	signature:(_Container & __x)
generate	./stl_algo.h	/^    generate(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Generator __gen)
generate_n	./stl_algo.h	/^    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_OutputIterator __first,_Size __n,_Generator __gen)
get	./locale_facets.h	/^      get(catalog __c, int __set, int __msgid, const string_type& __s) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:string_type	access:public	signature:(catalog __c,int __set,int __msgid,const string_type & __s) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
get	./locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_get	typeref:typename:iter_type	access:public	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,long double & __units) const
get	./locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_get	typeref:typename:iter_type	access:public	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,string_type & __digits) const
get_allocator	./basic_string.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_bvector.h	/^      get_allocator() const$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_bvector.h	/^    allocator_type get_allocator() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_deque.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_deque.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_list.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_list.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_map.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_multimap.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_multiset.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_set.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_tree.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:allocator_type	access:public	signature:() const
get_allocator	./stl_vector.h	/^      get_allocator() const$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:allocator_type	access:public	signature:() const
get_date	./locale_facets.h	/^      get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
get_monthname	./locale_facets.h	/^      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
get_time	./locale_facets.h	/^      get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
get_weekday	./locale_facets.h	/^      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
get_year	./locale_facets.h	/^      get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
getline	./basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
getline	./basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
getline	./basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
getline	./basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
getloc	./ios_base.h	/^    getloc() const { return _M_ios_locale; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
global	./locale_classes.h	/^    global(const locale&);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:locale	access:public	signature:(const locale &)
good	./basic_ios.h	/^      good() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
goodbit	./ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
greater	./stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
greater_equal	./stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
grouping	./locale_facets.h	/^      grouping() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string	access:public	signature:() const
grouping	./locale_facets.h	/^      grouping() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string	access:public	signature:() const
gslice	./gslice.h	/^    gslice ();$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:()
gslice	./gslice.h	/^    gslice(const gslice&);$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:(const gslice &)
gslice	./gslice.h	/^    gslice(size_t, const valarray<size_t>&, const valarray<size_t>&);$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:(size_t,const valarray<size_t> &,const valarray<size_t> &)
gslice	./gslice.h	/^  class gslice$/;"	kind:class	language:C++	namespace:std
gslice	./gslice.h	/^  gslice::gslice(const gslice& __g) : _M_index(__g._M_index)$/;"	kind:function	language:C++	class:std::gslice	signature:(const gslice & __g)
gslice	./gslice.h	/^  gslice::gslice(size_t __o, const valarray<size_t>& __l,$/;"	kind:function	language:C++	class:std::gslice	signature:(size_t __o,const valarray<size_t> & __l,const valarray<size_t> & __s)
gslice	./gslice.h	/^  inline gslice::gslice () : _M_index(0) {}$/;"	kind:function	language:C++	class:std::gslice	signature:()
gslice_array	./gslice_array.h	/^      gslice_array();$/;"	kind:prototype	language:C++	class:std::gslice_array	access:private	signature:()
gslice_array	./gslice_array.h	/^      gslice_array(_Array<_Tp>, const valarray<size_t>&);$/;"	kind:prototype	language:C++	class:std::gslice_array	access:private	signature:(_Array<_Tp>,const valarray<size_t> &)
gslice_array	./gslice_array.h	/^      gslice_array(const gslice_array&);$/;"	kind:prototype	language:C++	class:std::gslice_array	access:public	signature:(const gslice_array &)
gslice_array	./gslice_array.h	/^    class gslice_array$/;"	kind:class	language:C++	namespace:std
gslice_array	./gslice_array.h	/^    gslice_array<_Tp>::gslice_array(_Array<_Tp> __a,$/;"	kind:function	language:C++	class:std::gslice_array	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
gslice_array	./gslice_array.h	/^    gslice_array<_Tp>::gslice_array(const gslice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::gslice_array	signature:(const gslice_array<_Tp> & __a)
has_facet	./localefwd.h	/^    has_facet(const locale& __loc) throw();$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(const locale & __loc)
hash	./locale_facets.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	kind:function	language:C++	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
hex	./ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
hex	./ios_base.h	/^  hex(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
hook	./stl_list.h	/^    hook(_List_node_base * const __position);$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base * const __position)
id	./codecvt.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:locale::id	access:public
id	./codecvt.h	/^      static locale::id id;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:locale::id	access:public
id	./codecvt.h	/^    locale::id codecvt<_InternT, _ExternT, _StateT>::id;$/;"	kind:member	language:C++	class:std::codecvt<_InternT, _ExternT, _StateT>	typeref:typename:locale::id
id	./locale_classes.h	/^    id() { }$/;"	kind:function	language:C++	class:std::locale::id	access:public	signature:()
id	./locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::id	access:private	signature:(const id &)
id	./locale_classes.h	/^  class locale::id$/;"	kind:class	language:C++	class:std::locale
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::collate	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::money_get	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::money_put	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::num_get	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::numpunct	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::time_get	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::time_put	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id		id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id		id;$/;"	kind:member	language:C++	class:std::num_put	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^      static locale::id        id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
id	./locale_facets.h	/^    locale::id __timepunct<_CharT>::id;$/;"	kind:member	language:C++	class:std::__timepunct<_CharT>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id collate<_CharT>::id;$/;"	kind:member	language:C++	class:std::collate<_CharT>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	kind:member	language:C++	class:std::ctype<_CharT>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id messages<_CharT>::id;$/;"	kind:member	language:C++	class:std::messages<_CharT>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id money_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::money_get<_CharT, _InIter>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id money_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::money_put<_CharT, _OutIter>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id moneypunct<_CharT, _Intl>::id;$/;"	kind:member	language:C++	class:std::moneypunct<_CharT, _Intl>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	kind:member	language:C++	class:std::numpunct<_CharT>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id time_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::time_get<_CharT, _InIter>	typeref:typename:locale::id
id	./locale_facets.h	/^    locale::id time_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::time_put<_CharT, _OutIter>	typeref:typename:locale::id
imbue	./basic_ios.h	/^      imbue(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue	./ios_base.h	/^    imbue(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue_event	./ios_base.h	/^      imbue_event,$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
in	./codecvt.h	/^      in(state_type& __state, const extern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
in	./ios_base.h	/^    static const openmode in =		_S_in;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
includes	./stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
includes	./stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_Compare __comp)
indirect_array	./indirect_array.h	/^      indirect_array();$/;"	kind:prototype	language:C++	class:std::indirect_array	access:private	signature:()
indirect_array	./indirect_array.h	/^      indirect_array(_Array<_Tp>, size_t, _Array<size_t>);$/;"	kind:prototype	language:C++	class:std::indirect_array	access:private	signature:(_Array<_Tp>,size_t,_Array<size_t>)
indirect_array	./indirect_array.h	/^      indirect_array(const indirect_array&);$/;"	kind:prototype	language:C++	class:std::indirect_array	access:public	signature:(const indirect_array &)
indirect_array	./indirect_array.h	/^    class indirect_array$/;"	kind:class	language:C++	namespace:std
indirect_array	./indirect_array.h	/^    indirect_array<_Tp>::indirect_array(_Array<_Tp> __a, size_t __s,$/;"	kind:function	language:C++	class:std::indirect_array	signature:(_Array<_Tp> __a,size_t __s,_Array<size_t> __i)
indirect_array	./indirect_array.h	/^    indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::indirect_array	signature:(const indirect_array<_Tp> & __a)
init	./basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
inner_product	./stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_Tp __init)
inner_product	./stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_Tp __init,_BinaryOperation1 __binary_op1,_BinaryOperation2 __binary_op2)
inplace_merge	./stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last)
inplace_merge	./stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Compare __comp)
input_iterator_tag	./stl_iterator_base_types.h	/^  struct input_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std
insert	./basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
insert	./basic_string.h	/^      insert(iterator __p, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __p,_CharT __c)
insert	./basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
insert	./basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
insert	./basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
insert	./basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
insert	./basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
insert	./basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n)
insert	./stl_bvector.h	/^      insert(iterator __position,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
insert	./stl_bvector.h	/^    insert(iterator __position, const bool& __x = bool())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position,const bool & __x=bool ())
insert	./stl_bvector.h	/^    insert(iterator __position, size_type __n, const bool& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const bool & __x)
insert	./stl_deque.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
insert	./stl_deque.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_deque.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
insert	./stl_list.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
insert	./stl_list.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_list.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
insert	./stl_map.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
insert	./stl_map.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<iterator,bool>	access:public	signature:(const value_type & __x)
insert	./stl_map.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_multimap.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
insert	./stl_multimap.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const value_type & __x)
insert	./stl_multimap.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_multiset.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
insert	./stl_multiset.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const value_type & __x)
insert	./stl_multiset.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_set.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
insert	./stl_set.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<iterator,bool>	access:public	signature:(const value_type & __x)
insert	./stl_set.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_vector.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
insert	./stl_vector.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
insert	./stl_vector.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
insert_iterator	./stl_iterator.h	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	kind:function	language:C++	class:std::insert_iterator	access:public	signature:(_Container & __x,typename _Container::iterator __i)
insert_iterator	./stl_iterator.h	/^    class insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
inserter	./stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	kind:function	language:C++	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,_Iterator __i)
int_type	./basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
int_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
int_type	./char_traits.h	/^      typedef unsigned long   int_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:unsigned long	access:public
int_type	./streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
int_type	./streambuf_iterator.h	/^      typedef typename traits_type::int_type               int_type;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:traits_type::int_type
int_type	./streambuf_iterator.h	/^      typedef typename traits_type::int_type               int_type;$/;"	kind:typedef	language:C++	function:std::find	typeref:typename:traits_type::int_type
intern_type	./codecvt.h	/^      typedef _InternT			intern_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_InternT	access:public
intern_type	./codecvt.h	/^      typedef _InternT			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_InternT	access:public
intern_type	./codecvt.h	/^      typedef char			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:char	access:public
intern_type	./codecvt.h	/^      typedef wchar_t			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:wchar_t	access:public
internal	./ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
internal	./ios_base.h	/^  internal(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
intl	./locale_facets.h	/^      static const bool			intl = _Intl;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:const bool	access:public
intl	./locale_facets.h	/^      static const bool intl = _Intl;$/;"	kind:member	language:C++	class:std::moneypunct_byname	typeref:typename:const bool	access:public
intl	./locale_facets.h	/^    const bool moneypunct<_CharT, _Intl>::intl;$/;"	kind:member	language:C++	class:std::moneypunct<_CharT, _Intl>	typeref:typename:const bool
intl	./locale_facets.h	/^    const bool moneypunct_byname<_CharT, _Intl>::intl;$/;"	kind:member	language:C++	class:std::moneypunct_byname<_CharT, _Intl>	typeref:typename:const bool
io_state	./ios_base.h	/^    typedef int io_state;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
ios_base	./ios_base.h	/^    ios_base();$/;"	kind:prototype	language:C++	class:std::ios_base	access:protected	signature:()
ios_base	./ios_base.h	/^    ios_base(const ios_base&);$/;"	kind:prototype	language:C++	class:std::ios_base	access:private	signature:(const ios_base &)
ios_base	./ios_base.h	/^  class ios_base$/;"	kind:class	language:C++	namespace:std
iostate	./ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
is	./locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
is	./locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
is	./locale_facets.h	/^      is(mask __m, char __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
is	./locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
isalnum	./locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalnum	./localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isalpha	./locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalpha	./localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
iscntrl	./locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
iscntrl	./localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isdigit	./locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isdigit	./localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isgraph	./locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isgraph	./localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
islower	./locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
islower	./localefwd.h	/^    islower(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isprint	./locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isprint	./localefwd.h	/^    isprint(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
ispunct	./locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
ispunct	./localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isspace	./locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isspace	./localefwd.h	/^    isspace(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
istream_iterator	./stream_iterator.h	/^      istream_iterator()$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:()
istream_iterator	./stream_iterator.h	/^      istream_iterator(const istream_iterator& __obj)$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:(const istream_iterator & __obj)
istream_iterator	./stream_iterator.h	/^      istream_iterator(istream_type& __s)$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:(istream_type & __s)
istream_iterator	./stream_iterator.h	/^    class istream_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<input_iterator_tag,_Tp,_Dist,const_Tp*,const_Tp&>
istream_type	./stream_iterator.h	/^      typedef basic_istream<_CharT, _Traits> istream_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
istream_type	./streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator() throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:()
istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
istreambuf_iterator	./streambuf_iterator.h	/^    class istreambuf_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT&>
isupper	./locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isupper	./localefwd.h	/^    isupper(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isxdigit	./locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isxdigit	./localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
iter	./stl_iterator.h	/^      typename _Container::iterator iter;$/;"	kind:member	language:C++	class:std::insert_iterator	typeref:typename:_Container::iterator	access:protected
iter_swap	./stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	kind:function	language:C++	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_swap	./stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:_InIter	access:public
iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::num_get	typeref:typename:_InIter	access:public
iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:_InIter	access:public
iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_get_byname	typeref:typename:_InIter	access:public
iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:_OutIter	access:public
iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_put	typeref:typename:_OutIter	access:public
iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_put_byname	typeref:typename:_OutIter	access:public
iter_type	./locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	kind:typedef	language:C++	class:std::num_put	typeref:typename:_OutIter	access:public
iterator	./basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
iterator	./stl_bvector.h	/^    typedef _Bit_iterator                                iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_iterator	access:public
iterator	./stl_bvector.h	/^    typedef _Bit_iterator   iterator;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_iterator	access:public
iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Deque_iterator<_Tp,_Tp &,_Tp * >	access:public
iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator<_Tp,_Tp &,_Tp * >	access:public
iterator	./stl_deque.h	/^      typedef typename _Base::iterator                   iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::iterator	access:public
iterator	./stl_iterator_base_types.h	/^    struct iterator$/;"	kind:struct	language:C++	namespace:std
iterator	./stl_list.h	/^      typedef _List_iterator<_Tp>                        iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_iterator<_Tp>	access:public
iterator	./stl_list.h	/^      typedef _List_iterator<_Tp>                iterator;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_List_iterator<_Tp>	access:public
iterator	./stl_map.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::iterator	access:public
iterator	./stl_multimap.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::iterator	access:public
iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_iterator	access:public
iterator	./stl_set.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_iterator	access:public
iterator	./stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:pointer	access:public
iterator	./stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp> iterator;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_iterator<_Tp>	access:public
iterator	./stl_tree.h	/^      typedef _Rb_tree_iterator<value_type>       iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_iterator<value_type>	access:public
iterator	./stl_vector.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:__gnu_cxx::__normal_iterator<pointer,vector_type>	access:public
iterator_category	./stl_deque.h	/^      typedef std::random_access_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:std::random_access_iterator_tag	access:public
iterator_category	./stl_iterator.h	/^                                                             iterator_category;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::iterator_category	access:public
iterator_category	./stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Category	access:public
iterator_category	./stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
iterator_category	./stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	./stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:std::bidirectional_iterator_tag	access:public
iterator_category	./stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:std::bidirectional_iterator_tag	access:public
iterator_category	./stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bidirectional_iterator_tag	access:public
iterator_category	./stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bidirectional_iterator_tag	access:public
iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits$/;"	kind:struct	language:C++	namespace:std
iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	kind:struct	language:C++	namespace:std
iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	kind:struct	language:C++	namespace:std
iterator_type	./stl_iterator.h	/^      typedef _Iterator					       iterator_type;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
iword	./ios_base.h	/^    iword(int __ix)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
key_comp	./stl_map.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:key_compare	access:public	signature:() const
key_comp	./stl_multimap.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:key_compare	access:public	signature:() const
key_comp	./stl_multiset.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:key_compare	access:public	signature:() const
key_comp	./stl_set.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:key_compare	access:public	signature:() const
key_comp	./stl_tree.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Compare	access:public	signature:() const
key_compare	./stl_map.h	/^      typedef _Compare                                      key_compare;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Compare	access:public
key_compare	./stl_multimap.h	/^      typedef _Compare                                      key_compare;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Compare	access:public
key_compare	./stl_multiset.h	/^      typedef _Compare key_compare;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Compare	access:public
key_compare	./stl_set.h	/^      typedef _Compare key_compare;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Compare	access:public
key_type	./stl_map.h	/^      typedef _Key                                          key_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Key	access:public
key_type	./stl_multimap.h	/^      typedef _Key                                          key_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Key	access:public
key_type	./stl_multiset.h	/^      typedef _Key     key_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key	access:public
key_type	./stl_set.h	/^      typedef _Key     key_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key	access:public
key_type	./stl_tree.h	/^      typedef _Key key_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Key	access:public
left	./ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
left	./ios_base.h	/^  left(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
length	./basic_string.h	/^      length() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
length	./char_traits.h	/^      length(const char_type* __s);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:std::size_t	access:public	signature:(const char_type * __s)
length	./char_traits.h	/^    length(const char_type* __p)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:std::size_t	signature:(const char_type * __p)
length	./codecvt.h	/^      length(state_type& __state, const extern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:(state_type & __state,const extern_type * __from,const extern_type * __end,size_t __max) const
less	./stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
less_equal	./stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
lexicographical_compare	./stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
lexicographical_compare	./stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_Compare __comp)
lexicographical_compare	./stl_algobase.h	/^  lexicographical_compare(const char* __first1, const char* __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const char * __first1,const char * __last1,const char * __first2,const char * __last2)
lexicographical_compare	./stl_algobase.h	/^  lexicographical_compare(const unsigned char* __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const unsigned char * __first1,const unsigned char * __last1,const unsigned char * __first2,const unsigned char * __last2)
list	./stl_list.h	/^        list(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::list	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
list	./stl_list.h	/^      list(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::list	access:public	signature:(const allocator_type & __a=allocator_type ())
list	./stl_list.h	/^      list(const list& __x)$/;"	kind:function	language:C++	class:std::list	access:public	signature:(const list & __x)
list	./stl_list.h	/^      list(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::list	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
list	./stl_list.h	/^    class list : protected _List_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_List_base<_Tp,_Alloc>
locale	./locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
locale	./locale_classes.h	/^    locale() throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:()
locale	./locale_classes.h	/^    locale(_Impl*) throw();$/;"	kind:prototype	language:C++	class:std::locale	access:private	signature:(_Impl *)
locale	./locale_classes.h	/^    locale(const char* __s);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const char * __s)
locale	./locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
locale	./locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
locale	./locale_classes.h	/^    locale(const locale& __other) throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __other)
locale	./locale_classes.h	/^    locale::locale(const locale& __other, _Facet* __f)$/;"	kind:function	language:C++	class:std::locale	signature:(const locale & __other,_Facet * __f)
locale	./locale_classes.h	/^  class locale$/;"	kind:class	language:C++	namespace:std
logical_and	./stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
logical_not	./stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,bool>
logical_or	./stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
lower_bound	./stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
lower_bound	./stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
lower_bound	./stl_map.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
lower_bound	./stl_map.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
lower_bound	./stl_multimap.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
lower_bound	./stl_multimap.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
lower_bound	./stl_multiset.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
lower_bound	./stl_multiset.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
lower_bound	./stl_set.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
lower_bound	./stl_set.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
lower_bound	./stl_tree.h	/^      lower_bound(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
lower_bound	./stl_tree.h	/^      lower_bound(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
lower_bound	./stl_tree.h	/^    lower_bound(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
lower_bound	./stl_tree.h	/^    lower_bound(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
lt	./char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
make_heap	./stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
make_heap	./stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
make_pair	./stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
map	./stl_map.h	/^        map(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::map	access:public	signature:(_InputIterator __first,_InputIterator __last)
map	./stl_map.h	/^        map(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::map	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
map	./stl_map.h	/^      map()$/;"	kind:function	language:C++	class:std::map	access:public	signature:()
map	./stl_map.h	/^      map(const _Compare& __comp, const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::map	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
map	./stl_map.h	/^      map(const map& __x)$/;"	kind:function	language:C++	class:std::map	access:public	signature:(const map & __x)
map	./stl_map.h	/^    class map$/;"	kind:class	language:C++	namespace:std
mapped_type	./stl_map.h	/^      typedef _Tp                                           mapped_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Tp	access:public
mapped_type	./stl_multimap.h	/^      typedef _Tp                                           mapped_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Tp	access:public
mask	./locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
mask_array	./mask_array.h	/^      mask_array (const mask_array&);$/;"	kind:prototype	language:C++	class:std::mask_array	access:public	signature:(const mask_array &)
mask_array	./mask_array.h	/^      mask_array();$/;"	kind:prototype	language:C++	class:std::mask_array	access:private	signature:()
mask_array	./mask_array.h	/^      mask_array(_Array<_Tp>, size_t, _Array<bool>);$/;"	kind:prototype	language:C++	class:std::mask_array	access:private	signature:(_Array<_Tp>,size_t,_Array<bool>)
mask_array	./mask_array.h	/^    class mask_array$/;"	kind:class	language:C++	namespace:std
mask_array	./mask_array.h	/^    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)$/;"	kind:function	language:C++	class:std::mask_array	signature:(const mask_array<_Tp> & a)
mask_array	./mask_array.h	/^    mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)$/;"	kind:function	language:C++	class:std::mask_array	signature:(_Array<_Tp> __a,size_t __s,_Array<bool> __m)
max	./stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
max	./stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
max	./valarray_after.h	/^      value_type max() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
max	./valarray_after.h	/^    _Expr<_Clos, _Tp>::max() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
max_element	./stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
max_element	./stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Compare __comp)
max_length	./codecvt.h	/^      max_length() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:() const
max_size	./basic_string.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_bvector.h	/^    max_size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_deque.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_list.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_map.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_multimap.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_multiset.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_set.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_tree.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:() const
max_size	./stl_vector.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
mdy	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun1_ref_t	./stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	kind:function	language:C++	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_ref_t	./stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
mem_fun1_t	./stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	kind:function	language:C++	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_t	./stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun_ref_t	./stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	kind:function	language:C++	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_ref_t	./stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp,_Ret>
mem_fun_t	./stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	kind:function	language:C++	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_t	./stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp*,_Ret>
merge	./stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
merge	./stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
merge	./stl_list.h	/^        merge(list&, _StrictWeakOrdering);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list &,_StrictWeakOrdering)
merge	./stl_list.h	/^      merge(list& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list & __x)
messages	./locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
messages	./locale_facets.h	/^      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
messages	./locale_facets.h	/^      messages(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages	access:public	signature:(size_t __refs=0)
messages	./locale_facets.h	/^    class messages : public locale::facet, public messages_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,messages_base
messages_base	./locale_facets.h	/^  struct messages_base$/;"	kind:struct	language:C++	namespace:std
messages_byname	./locale_facets.h	/^      messages_byname(const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages_byname	access:public	signature:(const char * __s,size_t __refs=0)
messages_byname	./locale_facets.h	/^    class messages_byname : public messages<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:messages<_CharT>
min	./stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
min	./stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
min	./valarray_after.h	/^      value_type min() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
min	./valarray_after.h	/^    _Expr<_Clos, _Tp>::min() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
min_element	./stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
min_element	./stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Compare __comp)
minus	./stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
mismatch	./stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
mismatch	./stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
modulus	./stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
monetary	./locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
money_base	./locale_facets.h	/^  class money_base$/;"	kind:class	language:C++	namespace:std
money_get	./locale_facets.h	/^      money_get(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::money_get	access:public	signature:(size_t __refs=0)
money_get	./locale_facets.h	/^    class money_get : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
money_put	./locale_facets.h	/^      money_put(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::money_put	access:public	signature:(size_t __refs=0)
money_put	./locale_facets.h	/^    class money_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
moneypunct	./locale_facets.h	/^      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
moneypunct	./locale_facets.h	/^      moneypunct(__cache_type* __cache, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
moneypunct	./locale_facets.h	/^      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(size_t __refs=0)
moneypunct	./locale_facets.h	/^    class moneypunct : public locale::facet, public money_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,money_base
moneypunct_byname	./locale_facets.h	/^      moneypunct_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
moneypunct_byname	./locale_facets.h	/^    class moneypunct_byname : public moneypunct<_CharT, _Intl>$/;"	kind:class	language:C++	namespace:std	inherits:moneypunct<_CharT,_Intl>
move	./char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	kind:prototype	language:C++	struct:char_traits	typeref:typename:char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
move	./char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	kind:function	language:C++	class:char_traits	typeref:typename:char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
multimap	./stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(_InputIterator __first,_InputIterator __last)
multimap	./stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
multimap	./stl_multimap.h	/^      multimap()$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:()
multimap	./stl_multimap.h	/^      multimap(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
multimap	./stl_multimap.h	/^      multimap(const multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(const multimap & __x)
multimap	./stl_multimap.h	/^    class multimap$/;"	kind:class	language:C++	namespace:std
multiplies	./stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
multiset	./stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(_InputIterator __first,_InputIterator __last)
multiset	./stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
multiset	./stl_multiset.h	/^      multiset()$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:()
multiset	./stl_multiset.h	/^      multiset(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
multiset	./stl_multiset.h	/^      multiset(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc> & __x)
multiset	./stl_multiset.h	/^    class multiset$/;"	kind:class	language:C++	namespace:std
name	./locale_classes.h	/^    name() const;$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:string	access:public	signature:() const
narrow	./basic_ios.h	/^      narrow(char_type __c, char __dfault) const;$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	./locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	./locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	./locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
narrow	./locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
neg_format	./locale_facets.h	/^      neg_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:public	signature:() const
negate	./stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,_Tp>
negative_sign	./locale_facets.h	/^      negative_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
next_permutation	./stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
next_permutation	./stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Compare __comp)
no_order	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
noboolalpha	./ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noconv	./codecvt.h	/^      noconv$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
none	./locale_classes.h	/^    static const category none		= 0;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
none	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
noshowbase	./ios_base.h	/^  noshowbase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpoint	./ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpos	./ios_base.h	/^  noshowpos(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noskipws	./ios_base.h	/^  noskipws(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
not1	./stl_function.h	/^    not1(const _Predicate& __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:unary_negate<_Predicate>	signature:(const _Predicate & __pred)
not2	./stl_function.h	/^    not2(const _Predicate& __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binary_negate<_Predicate>	signature:(const _Predicate & __pred)
not_eof	./char_traits.h	/^      not_eof(const int_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
not_equal_to	./stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
nounitbuf	./ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
nouppercase	./ios_base.h	/^  nouppercase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
npos	./basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	kind:member	language:C++	class:std::basic_string	typeref:typename:const size_type	access:public
nth_element	./stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last)
nth_element	./stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Compare __comp)
num_get	./locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::num_get	access:public	signature:(size_t __refs=0)
num_get	./locale_facets.h	/^    class num_get : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
num_put	./locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::num_put	access:public	signature:(size_t __refs=0)
num_put	./locale_facets.h	/^    class num_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
numeric	./locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
numpunct	./locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
numpunct	./locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
numpunct	./locale_facets.h	/^      numpunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(size_t __refs=0)
numpunct	./locale_facets.h	/^    class numpunct : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
numpunct_byname	./locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
numpunct_byname	./locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:numpunct<_CharT>
oct	./ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
oct	./ios_base.h	/^  oct(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
off_type	./basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
off_type	./char_traits.h	/^      typedef std::streamoff  off_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::streamoff	access:public
off_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
ok	./codecvt.h	/^      ok,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
op	./stl_function.h	/^      _Operation op;$/;"	kind:member	language:C++	class:std::binder1st	typeref:typename:_Operation	access:protected
op	./stl_function.h	/^      _Operation op;$/;"	kind:member	language:C++	class:std::binder2nd	typeref:typename:_Operation	access:protected
open	./locale_facets.h	/^      open(const basic_string<char>& __s, const locale& __loc) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:catalog	access:public	signature:(const basic_string<char> & __s,const locale & __loc) const
open	./locale_facets.h	/^      open(const basic_string<char>&, const locale&, const char*) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:catalog	access:public	signature:(const basic_string<char> &,const locale &,const char *) const
open_mode	./ios_base.h	/^    typedef int open_mode;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
openmode	./ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
operator !	./basic_ios.h	/^      operator!() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
operator !	./valarray_after.h	/^      operator!() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__logical_not,std::_Expr,_Clos>,bool>	access:public	signature:() const
operator !	./valarray_after.h	/^    _Expr<_Dom, _Tp>::operator!() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__logical_not,_Expr,_Dom>,bool>	signature:() const
operator !=	./allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator !=	./allocator.h	/^    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_Tp> &,const allocator<_Tp> &)
operator !=	./basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	./basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator !=	./basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	./locale_classes.h	/^    operator!=(const locale& __other) const throw ()$/;"	kind:function	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
operator !=	./postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator !=	./stl_bvector.h	/^    operator!=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator !=	./stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator !=	./stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator !=	./stl_deque.h	/^    operator!=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator !=	./stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator !=	./stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator !=	./stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator !=	./stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator !=	./stl_list.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator !=	./stl_list.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator !=	./stl_list.h	/^    operator!=(const _List_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _List_iterator<_Val> & __x,const _List_const_iterator<_Val> & __y)
operator !=	./stl_list.h	/^    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator !=	./stl_map.h	/^    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator !=	./stl_multimap.h	/^    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator !=	./stl_multiset.h	/^    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator !=	./stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator !=	./stl_queue.h	/^    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator !=	./stl_relops.h	/^      operator!=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
operator !=	./stl_set.h	/^    operator!=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator !=	./stl_stack.h	/^    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator !=	./stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator !=	./stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator !=	./stl_tree.h	/^    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator !=	./stl_tree.h	/^    operator!=(const _Rb_tree_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree_iterator<_Val> & __x,const _Rb_tree_const_iterator<_Val> & __y)
operator !=	./stl_vector.h	/^    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator !=	./stream_iterator.h	/^    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __x,const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __y)
operator !=	./streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator %=	./gslice_array.h	/^        void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator %=	./gslice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator %=	./indirect_array.h	/^      void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator %=	./indirect_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator %=	./mask_array.h	/^        void operator%=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator %=	./mask_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator %=	./slice_array.h	/^	void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator %=	./slice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator &	./ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator &	./ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator &	./ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator &=	./gslice_array.h	/^        void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator &=	./gslice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator &=	./indirect_array.h	/^      void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator &=	./indirect_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator &=	./ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator &=	./ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator &=	./ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator &=	./mask_array.h	/^        void operator&=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator &=	./mask_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator &=	./slice_array.h	/^	void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator &=	./slice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator ()	./locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
operator ()	./stl_function.h	/^      operator()(_Arg __x) const$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
operator ()	./stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
operator ()	./stl_function.h	/^      operator()(_Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
operator ()	./stl_function.h	/^      operator()(_Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
operator ()	./stl_function.h	/^      operator()(_Tp& __r) const$/;"	kind:function	language:C++	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
operator ()	./stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	kind:function	language:C++	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
operator ()	./stl_function.h	/^      operator()(_Tp& __x) const$/;"	kind:function	language:C++	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
operator ()	./stl_function.h	/^      operator()(_Tp* __p) const$/;"	kind:function	language:C++	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
operator ()	./stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	kind:function	language:C++	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
operator ()	./stl_function.h	/^      operator()(const _Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
operator ()	./stl_function.h	/^      operator()(const _Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __r) const$/;"	kind:function	language:C++	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	kind:function	language:C++	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::logical_not	typeref:typename:bool	access:public	signature:(const _Tp & __x) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::negate	typeref:typename:_Tp	access:public	signature:(const _Tp & __x) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::divides	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::greater	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::less	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::less_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::logical_and	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::logical_or	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::minus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::modulus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::multiplies	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::not_equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./stl_function.h	/^      operator()(const _Tp* __p) const$/;"	kind:function	language:C++	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
operator ()	./stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	kind:function	language:C++	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
operator ()	./stl_function.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
operator ()	./stl_function.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
operator ()	./stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	kind:function	language:C++	class:std::unary_negate	typeref:typename:bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
operator ()	./stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	kind:function	language:C++	class:std::binary_negate	typeref:typename:bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
operator ()	./stl_function.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
operator ()	./stl_function.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
operator ()	./stl_map.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	kind:function	language:C++	class:std::map::value_compare	typeref:typename:bool	access:public	signature:(const value_type & __x,const value_type & __y) const
operator ()	./stl_multimap.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	kind:function	language:C++	class:std::multimap::value_compare	typeref:typename:bool	access:public	signature:(const value_type & __x,const value_type & __y) const
operator ()	./valarray_after.h	/^      const _Clos& operator()() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:const _Clos &	access:public	signature:() const
operator ()	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator()() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:const _Clos &	signature:() const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__abs	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__acos	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__asin	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__atan	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__bitwise_not	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__cos	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__cosh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__exp	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__log	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__log10	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__negate	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sin	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sinh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sqrt	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__tan	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__tanh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__unary_plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__atan2	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_and	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_or	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_xor	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__divides	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__minus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__modulus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__multiplies	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__pow	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__shift_left	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__shift_right	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x) const { return !__x; }$/;"	kind:function	language:C++	struct:std::__logical_not	typeref:typename:bool	access:public	signature:(const _Tp & __x) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__greater	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__greater_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__less	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__less_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__logical_and	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__logical_or	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__not_equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator *	./stl_bvector.h	/^    operator*() const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_reference	access:public	signature:() const
operator *	./stl_bvector.h	/^    operator*() const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_deque.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:()
operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:()
operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:()
operator *	./stl_list.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_list.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
operator *	./stl_tree.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stl_tree.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:reference	access:public	signature:() const
operator *	./stream_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:const _Tp &	access:public	signature:() const
operator *	./stream_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:()
operator *	./streambuf_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:char_type	access:public	signature:() const
operator *	./streambuf_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
operator *=	./gslice_array.h	/^        void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator *=	./gslice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator *=	./indirect_array.h	/^      void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator *=	./indirect_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator *=	./mask_array.h	/^        void operator*=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator *=	./mask_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator *=	./slice_array.h	/^	void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator *=	./slice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator +	./basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	./basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	./postypes.h	/^      operator+(streamoff __off) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator +	./stl_bvector.h	/^    operator+(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(difference_type __i) const
operator +	./stl_bvector.h	/^    operator+(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(difference_type __i) const
operator +	./stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Bit_const_iterator	signature:(ptrdiff_t __n,const _Bit_const_iterator & __x)
operator +	./stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_iterator& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Bit_iterator	signature:(ptrdiff_t __n,const _Bit_iterator & __x)
operator +	./stl_deque.h	/^      operator+(difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(difference_type __n) const
operator +	./stl_deque.h	/^    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_Ref,_Ptr>	signature:(ptrdiff_t __n,const _Deque_iterator<_Tp,_Ref,_Ptr> & __x)
operator +	./stl_iterator.h	/^      operator+(const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(const difference_type & __n) const
operator +	./stl_iterator.h	/^      operator+(difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(difference_type __n) const
operator +	./stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	kind:function	language:C++	typeref:typename:__normal_iterator<_Iterator,_Container>	signature:(typename __normal_iterator<_Iterator,_Container>::difference_type __n,const __normal_iterator<_Iterator,_Container> & __i)
operator +	./stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
operator +	./valarray_after.h	/^      operator+() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__unary_plus,std::_Expr,_Clos>,value_type>	access:public	signature:() const
operator ++	./stl_bvector.h	/^    operator++()$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:()
operator ++	./stl_bvector.h	/^    operator++()$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:()
operator ++	./stl_bvector.h	/^    operator++(int)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(int)
operator ++	./stl_bvector.h	/^    operator++(int)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(int)
operator ++	./stl_deque.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:()
operator ++	./stl_deque.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(int)
operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:()
operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:()
operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:()
operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:()
operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:()
operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(int)
operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator	access:public	signature:(int)
operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator	access:public	signature:(int)
operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(int)
operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(int)
operator ++	./stl_list.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self &	access:public	signature:()
operator ++	./stl_list.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self &	access:public	signature:()
operator ++	./stl_list.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self	access:public	signature:(int)
operator ++	./stl_list.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self	access:public	signature:(int)
operator ++	./stl_raw_storage_iter.h	/^      operator++()$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator<_ForwardIterator,_Tp> &	access:public	signature:()
operator ++	./stl_raw_storage_iter.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator<_ForwardIterator,_Tp>	access:public	signature:(int)
operator ++	./stl_tree.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self &	access:public	signature:()
operator ++	./stl_tree.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self &	access:public	signature:()
operator ++	./stl_tree.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self	access:public	signature:(int)
operator ++	./stl_tree.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self	access:public	signature:(int)
operator ++	./stream_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:istream_iterator &	access:public	signature:()
operator ++	./stream_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:()
operator ++	./stream_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:istream_iterator	access:public	signature:(int)
operator ++	./stream_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:(int)
operator ++	./streambuf_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
operator ++	./streambuf_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
operator ++	./streambuf_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
operator ++	./streambuf_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
operator +=	./basic_string.h	/^      operator+=(_CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator +=	./basic_string.h	/^      operator+=(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator +=	./basic_string.h	/^      operator+=(const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator +=	./gslice_array.h	/^        void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator +=	./gslice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator +=	./indirect_array.h	/^      void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator +=	./indirect_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator +=	./mask_array.h	/^        void operator+=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator +=	./mask_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator +=	./postypes.h	/^      operator+=(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator +=	./slice_array.h	/^	void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator +=	./slice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator +=	./stl_bvector.h	/^    operator+=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:(difference_type __i)
operator +=	./stl_bvector.h	/^    operator+=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:(difference_type __i)
operator +=	./stl_deque.h	/^      operator+=(difference_type __n)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:(difference_type __n)
operator +=	./stl_iterator.h	/^      operator+=(const difference_type& __n)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:(const difference_type & __n)
operator +=	./stl_iterator.h	/^      operator+=(difference_type __n)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(difference_type __n)
operator -	./postypes.h	/^      operator-(const fpos& __other) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
operator -	./postypes.h	/^      operator-(streamoff __off) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator -	./stl_bvector.h	/^    operator-(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(difference_type __i) const
operator -	./stl_bvector.h	/^    operator-(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(difference_type __i) const
operator -	./stl_bvector.h	/^  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Bit_iterator_base & __x,const _Bit_iterator_base & __y)
operator -	./stl_deque.h	/^      operator-(difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(difference_type __n) const
operator -	./stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_Ref,_Ptr>::difference_type	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator -	./stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_RefL,_PtrL>::difference_type	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator -	./stl_iterator.h	/^      operator-(const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(const difference_type & __n) const
operator -	./stl_iterator.h	/^      operator-(difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(difference_type __n) const
operator -	./stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:__normal_iterator<_Iterator,_Container>::difference_type	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator -	./stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:__normal_iterator<_IteratorL,_Container>::difference_type	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator -	./stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator -	./stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator -	./valarray_after.h	/^      operator-() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__negate,std::_Expr,_Clos>,value_type>	access:public	signature:() const
operator --	./stl_bvector.h	/^    operator--()$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:()
operator --	./stl_bvector.h	/^    operator--()$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:()
operator --	./stl_bvector.h	/^    operator--(int)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(int)
operator --	./stl_bvector.h	/^    operator--(int)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(int)
operator --	./stl_deque.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:()
operator --	./stl_deque.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(int)
operator --	./stl_iterator.h	/^      operator--()$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:()
operator --	./stl_iterator.h	/^      operator--()$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:()
operator --	./stl_iterator.h	/^      operator--(int)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator	access:public	signature:(int)
operator --	./stl_iterator.h	/^      operator--(int)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(int)
operator --	./stl_list.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self &	access:public	signature:()
operator --	./stl_list.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self &	access:public	signature:()
operator --	./stl_list.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self	access:public	signature:(int)
operator --	./stl_list.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self	access:public	signature:(int)
operator --	./stl_tree.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self &	access:public	signature:()
operator --	./stl_tree.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self &	access:public	signature:()
operator --	./stl_tree.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self	access:public	signature:(int)
operator --	./stl_tree.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self	access:public	signature:(int)
operator -=	./gslice_array.h	/^        void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator -=	./gslice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator -=	./indirect_array.h	/^      void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator -=	./indirect_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator -=	./mask_array.h	/^        void operator-=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator -=	./mask_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator -=	./postypes.h	/^      operator-=(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator -=	./slice_array.h	/^	void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator -=	./slice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator -=	./stl_bvector.h	/^    operator-=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:(difference_type __i)
operator -=	./stl_bvector.h	/^    operator-=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:(difference_type __i)
operator -=	./stl_deque.h	/^      operator-=(difference_type __n)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:(difference_type __n)
operator -=	./stl_iterator.h	/^      operator-=(const difference_type& __n)$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:__normal_iterator &	access:public	signature:(const difference_type & __n)
operator -=	./stl_iterator.h	/^      operator-=(difference_type __n)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(difference_type __n)
operator ->	./stl_deque.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_iterator.h	/^      operator->() const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_iterator.h	/^      operator->() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_list.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_list.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_tree.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stl_tree.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:pointer	access:public	signature:() const
operator ->	./stream_iterator.h	/^      operator->() const { return &(operator*()); }$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:const _Tp *	access:public	signature:() const
operator /=	./gslice_array.h	/^        void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator /=	./gslice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator /=	./indirect_array.h	/^      void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator /=	./indirect_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator /=	./mask_array.h	/^        void operator\/=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator /=	./mask_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator /=	./slice_array.h	/^	void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator /=	./slice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator <	./basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	./basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <	./basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	./stl_bvector.h	/^    operator<(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator <	./stl_bvector.h	/^    operator<(const _Bit_reference& __x) const$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:bool	access:public	signature:(const _Bit_reference & __x) const
operator <	./stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator <	./stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator <	./stl_deque.h	/^    operator<(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator <	./stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <	./stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <	./stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <	./stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <	./stl_list.h	/^    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator <	./stl_map.h	/^    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator <	./stl_multimap.h	/^    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator <	./stl_multiset.h	/^    operator<(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator <	./stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <	./stl_queue.h	/^    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator <	./stl_set.h	/^    operator<(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator <	./stl_stack.h	/^    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator <	./stl_tree.h	/^    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator <	./stl_vector.h	/^    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator <<	./basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
operator <<=	./gslice_array.h	/^        void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator <<=	./gslice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator <<=	./indirect_array.h	/^      void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator <<=	./indirect_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator <<=	./mask_array.h	/^        void operator<<=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator <<=	./mask_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator <<=	./slice_array.h	/^	void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator <<=	./slice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator <=	./basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	./basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <=	./basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	./stl_bvector.h	/^    operator<=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator <=	./stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator <=	./stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator <=	./stl_deque.h	/^    operator<=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator <=	./stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <=	./stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <=	./stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <=	./stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=	./stl_list.h	/^    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator <=	./stl_map.h	/^    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator <=	./stl_multimap.h	/^    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator <=	./stl_multiset.h	/^    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator <=	./stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <=	./stl_queue.h	/^    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator <=	./stl_relops.h	/^      operator<=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
operator <=	./stl_set.h	/^    operator<=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator <=	./stl_stack.h	/^    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator <=	./stl_tree.h	/^    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator <=	./stl_vector.h	/^    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator =	./basic_string.h	/^      operator=(_CharT __c) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator =	./basic_string.h	/^      operator=(const _CharT* __s) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator =	./basic_string.h	/^      operator=(const basic_string& __str) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator =	./gslice.h	/^    gslice& operator=(const gslice&);$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:gslice &	access:public	signature:(const gslice &)
operator =	./gslice.h	/^  gslice::operator= (const gslice& __g)$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:gslice &	signature:(const gslice & __g)
operator =	./gslice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator =	./gslice_array.h	/^      gslice_array& operator=(const gslice_array&);$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:gslice_array &	access:public	signature:(const gslice_array &)
operator =	./gslice_array.h	/^      gslice_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
operator =	./gslice_array.h	/^      void operator=(const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Tp &) const
operator =	./gslice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const _Tp & __t) const
operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const gslice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:gslice_array<_Tp> &	signature:(const gslice_array<_Tp> & __a)
operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
operator =	./indirect_array.h	/^      indirect_array& operator=(const indirect_array&);$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:indirect_array &	access:public	signature:(const indirect_array &)
operator =	./indirect_array.h	/^      indirect_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
operator =	./indirect_array.h	/^      void operator= (const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Tp &) const
operator =	./indirect_array.h	/^      void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator =	./indirect_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const _Tp & __t) const
operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const indirect_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:indirect_array<_Tp> &	signature:(const indirect_array<_Tp> & __a)
operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
operator =	./ios_base.h	/^    operator=(const ios_base&);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
operator =	./locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
operator =	./locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
operator =	./locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
operator =	./locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
operator =	./locale_facets.h	/^      operator=(const __moneypunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	typeref:typename:__moneypunct_cache &	access:private	signature:(const __moneypunct_cache &)
operator =	./locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
operator =	./locale_facets.h	/^      operator=(const __timepunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	typeref:typename:__timepunct_cache &	access:private	signature:(const __timepunct_cache &)
operator =	./mask_array.h	/^        void operator=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator =	./mask_array.h	/^      mask_array& operator=(const mask_array&);$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:mask_array &	access:public	signature:(const mask_array &)
operator =	./mask_array.h	/^      mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const _Expr<_Ex,_Tp> & __e) const
operator =	./mask_array.h	/^      void operator=(const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Tp &) const
operator =	./mask_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const _Tp & __t) const
operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const mask_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:mask_array<_Tp> &	signature:(const mask_array<_Tp> & __a)
operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
operator =	./slice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator =	./slice_array.h	/^      slice_array& operator=(const slice_array&);$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:slice_array &	access:public	signature:(const slice_array &)
operator =	./slice_array.h	/^      void operator=(const _Tp &) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Tp &) const
operator =	./slice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const _Tp & __t) const
operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:slice_array<_Tp> &	signature:(const slice_array<_Tp> & __a)
operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
operator =	./stl_bvector.h	/^    operator=(bool __x)$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_reference &	access:public	signature:(bool __x)
operator =	./stl_bvector.h	/^    operator=(const _Bit_reference& __x)$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_reference &	access:public	signature:(const _Bit_reference & __x)
operator =	./stl_bvector.h	/^    operator=(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:vector &	access:public	signature:(const vector & __x)
operator =	./stl_deque.h	/^      operator=(const deque& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:deque &	access:public	signature:(const deque & __x)
operator =	./stl_iterator.h	/^      operator=(const typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(const typename _Container::const_reference __value)
operator =	./stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	./stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	./stl_list.h	/^      operator=(const list& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:list &	access:public	signature:(const list & __x)
operator =	./stl_map.h	/^      operator=(const map& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:map &	access:public	signature:(const map & __x)
operator =	./stl_multimap.h	/^      operator=(const multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:multimap &	access:public	signature:(const multimap & __x)
operator =	./stl_multiset.h	/^      operator=(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:multiset<_Key,_Compare,_Alloc> &	access:public	signature:(const multiset<_Key,_Compare,_Alloc> & __x)
operator =	./stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(const _Tp & __element)
operator =	./stl_set.h	/^      operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:set<_Key,_Compare,_Alloc> &	access:public	signature:(const set<_Key,_Compare,_Alloc> & __x)
operator =	./stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:private	signature:(const _Temporary_buffer &)
operator =	./stl_tree.h	/^      operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> &	access:public	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
operator =	./stl_tree.h	/^    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> &	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
operator =	./stl_vector.h	/^      operator=(const vector& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:vector &	access:public	signature:(const vector & __x)
operator =	./stream_iterator.h	/^      operator=(const _Tp& __value)$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:(const _Tp & __value)
operator =	./streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
operator ==	./allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator ==	./allocator.h	/^    operator==(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_Tp> &,const allocator<_Tp> &)
operator ==	./basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	./basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator ==	./basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	./locale_classes.h	/^    operator==(const locale& __other) const throw ();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
operator ==	./postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator ==	./stl_bvector.h	/^    operator==(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator ==	./stl_bvector.h	/^    operator==(const _Bit_reference& __x) const$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:bool	access:public	signature:(const _Bit_reference & __x) const
operator ==	./stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator ==	./stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator ==	./stl_deque.h	/^    operator==(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator ==	./stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator ==	./stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator ==	./stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator ==	./stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator ==	./stl_list.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator ==	./stl_list.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator ==	./stl_list.h	/^    operator==(const _List_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _List_iterator<_Val> & __x,const _List_const_iterator<_Val> & __y)
operator ==	./stl_list.h	/^    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator ==	./stl_map.h	/^    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator ==	./stl_multimap.h	/^    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator ==	./stl_multiset.h	/^    operator==(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator ==	./stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator ==	./stl_queue.h	/^    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator ==	./stl_set.h	/^    operator==(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator ==	./stl_stack.h	/^    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator ==	./stl_tree.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator ==	./stl_tree.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
operator ==	./stl_tree.h	/^    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator ==	./stl_tree.h	/^    operator==(const _Rb_tree_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree_iterator<_Val> & __x,const _Rb_tree_const_iterator<_Val> & __y)
operator ==	./stl_vector.h	/^    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator ==	./stream_iterator.h	/^    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __x,const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __y)
operator ==	./streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator >	./basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	./basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >	./basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	./stl_bvector.h	/^    operator>(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator >	./stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator >	./stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator >	./stl_deque.h	/^    operator>(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator >	./stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >	./stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >	./stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >	./stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >	./stl_list.h	/^    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator >	./stl_map.h	/^    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator >	./stl_multimap.h	/^    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator >	./stl_multiset.h	/^    operator>(const multiset<_Key,_Compare,_Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator >	./stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >	./stl_queue.h	/^    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator >	./stl_relops.h	/^      operator>(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
operator >	./stl_set.h	/^    operator>(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator >	./stl_stack.h	/^    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator >	./stl_tree.h	/^    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator >	./stl_vector.h	/^    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator >=	./basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	./basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >=	./basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	./stl_bvector.h	/^    operator>=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
operator >=	./stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
operator >=	./stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
operator >=	./stl_deque.h	/^    operator>=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
operator >=	./stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >=	./stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	kind:function	language:C++	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >=	./stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >=	./stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >=	./stl_list.h	/^    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
operator >=	./stl_map.h	/^    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
operator >=	./stl_multimap.h	/^    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
operator >=	./stl_multiset.h	/^    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
operator >=	./stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >=	./stl_queue.h	/^    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
operator >=	./stl_relops.h	/^      operator>=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
operator >=	./stl_set.h	/^    operator>=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
operator >=	./stl_stack.h	/^    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
operator >=	./stl_tree.h	/^    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
operator >=	./stl_vector.h	/^    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
operator >>	./basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
operator >>	./basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
operator >>=	./gslice_array.h	/^        void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator >>=	./gslice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator >>=	./indirect_array.h	/^      void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator >>=	./indirect_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator >>=	./mask_array.h	/^        void operator>>=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator >>=	./mask_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator >>=	./slice_array.h	/^	void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator >>=	./slice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator []	./basic_string.h	/^      operator[](size_type __pos)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
operator []	./stl_bvector.h	/^    operator[](difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_reference	access:public	signature:(difference_type __i) const
operator []	./stl_bvector.h	/^    operator[](difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:reference	access:public	signature:(difference_type __i) const
operator []	./stl_bvector.h	/^    operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
operator []	./stl_bvector.h	/^    operator[](size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
operator []	./stl_deque.h	/^      operator[](difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:reference	access:public	signature:(difference_type __n) const
operator []	./stl_deque.h	/^      operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:(size_type __n) const
operator []	./stl_deque.h	/^      operator[](size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:(size_type __n)
operator []	./stl_iterator.h	/^      operator[](const difference_type& __n) const$/;"	kind:function	language:C++	class:__normal_iterator	typeref:typename:reference	access:public	signature:(const difference_type & __n) const
operator []	./stl_iterator.h	/^      operator[](difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reference	access:public	signature:(difference_type __n) const
operator []	./stl_map.h	/^      operator[](const key_type& __k)$/;"	kind:function	language:C++	class:std::map	typeref:typename:mapped_type &	access:public	signature:(const key_type & __k)
operator []	./stl_vector.h	/^      operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
operator []	./stl_vector.h	/^      operator[](size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
operator []	./valarray_after.h	/^      valarray<value_type> operator[](const gslice&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const gslice &) const
operator []	./valarray_after.h	/^      valarray<value_type> operator[](const valarray<bool>&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const valarray<bool> &) const
operator []	./valarray_after.h	/^      valarray<value_type> operator[](const valarray<size_t>&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const valarray<size_t> &) const
operator []	./valarray_after.h	/^      valarray<value_type> operator[](slice) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(slice) const
operator []	./valarray_after.h	/^      value_type operator[](size_t) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:(size_t) const
operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const gslice& __gs) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const gslice & __gs) const
operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<bool>& __m) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const valarray<bool> & __m) const
operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<size_t>& __i) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const valarray<size_t> & __i) const
operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:(size_t __i) const
operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](slice __s) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(slice __s) const
operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase1	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase2	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_FunBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_UnBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator [] 	./basic_string.h	/^      operator[] (size_type __pos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
operator [] 	./valarray_after.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_GBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator [] 	./valarray_after.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_IBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator [] 	./valarray_before.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_SBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
operator ^	./ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator ^	./ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator ^	./ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator ^=	./gslice_array.h	/^        void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator ^=	./gslice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator ^=	./indirect_array.h	/^      void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator ^=	./indirect_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator ^=	./ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator ^=	./ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator ^=	./ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator ^=	./mask_array.h	/^        void operator^=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator ^=	./mask_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator ^=	./slice_array.h	/^	void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator ^=	./slice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator bool	./stl_bvector.h	/^    operator bool() const$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:() const
operator streamoff	./postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:() const
operator void*	./basic_ios.h	/^      operator void*() const$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:() const
operator |	./ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator |	./ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator |	./ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator |=	./gslice_array.h	/^        void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator |=	./gslice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator |=	./indirect_array.h	/^      void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator |=	./indirect_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator |=	./ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator |=	./ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator |=	./ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator |=	./mask_array.h	/^        void operator|=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator |=	./mask_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator |=	./slice_array.h	/^	void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
operator |=	./slice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
operator ~	./ios_base.h	/^  operator~(_Ios_Fmtflags __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
operator ~	./ios_base.h	/^  operator~(_Ios_Iostate __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a)
operator ~	./ios_base.h	/^  operator~(_Ios_Openmode __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a)
operator ~	./valarray_after.h	/^      operator~() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__bitwise_not,std::_Expr,_Clos>,value_type>	access:public	signature:() const
ostream_iterator	./stream_iterator.h	/^      ostream_iterator(const ostream_iterator& __obj)$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(const ostream_iterator & __obj)
ostream_iterator	./stream_iterator.h	/^      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(ostream_type & __s)
ostream_iterator	./stream_iterator.h	/^      ostream_iterator(ostream_type& __s, const _CharT* __c)$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(ostream_type & __s,const _CharT * __c)
ostream_iterator	./stream_iterator.h	/^    class ostream_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
ostream_type	./stream_iterator.h	/^      typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
ostream_type	./streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
ostreambuf_iterator	./streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) throw ()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
ostreambuf_iterator	./streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) throw ()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
ostreambuf_iterator	./streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
other	./allocator.h	/^        { typedef allocator<_Tp1> other; };$/;"	kind:typedef	language:C++	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
out	./codecvt.h	/^      out(state_type& __state, const intern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
out	./ios_base.h	/^    static const openmode out =		_S_out;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
output_iterator_tag	./stl_iterator_base_types.h	/^  struct output_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std
pair	./stl_pair.h	/^        pair(const pair<_U1, _U2>& __p)$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
pair	./stl_pair.h	/^      pair()$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:()
pair	./stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
pair	./stl_pair.h	/^    struct pair$/;"	kind:struct	language:C++	namespace:std
part	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enum	language:C++	class:std::money_base	access:public
partial	./codecvt.h	/^      partial,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
partial_sort	./stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last)
partial_sort	./stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,_Compare __comp)
partial_sort_copy	./stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_InputIterator __first,_InputIterator __last,_RandomAccessIterator __result_first,_RandomAccessIterator __result_last)
partial_sort_copy	./stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_InputIterator __first,_InputIterator __last,_RandomAccessIterator __result_first,_RandomAccessIterator __result_last,_Compare __comp)
partial_sum	./stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
partial_sum	./stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryOperation __binary_op)
partition	./stl_algo.h	/^    partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
pattern	./locale_facets.h	/^    struct pattern { char field[4]; };$/;"	kind:struct	language:C++	class:std::money_base	access:public
plus	./stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
pointer	./allocator.h	/^      typedef _Tp*       pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp *	access:public
pointer	./allocator.h	/^      typedef void*       pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:void *	access:public
pointer	./basic_string.h	/^      typedef typename _CharT_alloc_type::pointer	    pointer;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::pointer	access:public
pointer	./stl_bvector.h	/^    typedef _Bit_reference*                              pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_reference *	access:public
pointer	./stl_bvector.h	/^    typedef _Bit_reference* pointer;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_reference *	access:public
pointer	./stl_bvector.h	/^    typedef const bool*          pointer;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const bool *	access:public
pointer	./stl_deque.h	/^      typedef _Ptr                            pointer;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Ptr	access:public
pointer	./stl_deque.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::pointer	access:public
pointer	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer     pointer;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::pointer	access:public
pointer	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer   pointer;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::pointer	access:public
pointer	./stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Pointer	access:public
pointer	./stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
pointer	./stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
pointer	./stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
pointer	./stl_list.h	/^      typedef _Tp*                               pointer;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp *	access:public
pointer	./stl_list.h	/^      typedef const _Tp*                         pointer;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _Tp *	access:public
pointer	./stl_list.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::pointer	access:public
pointer	./stl_map.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::pointer	access:public
pointer	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::pointer	access:public
pointer	./stl_multiset.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::pointer	access:public
pointer	./stl_set.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::pointer	access:public
pointer	./stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:value_type *	access:public
pointer	./stl_tree.h	/^      typedef _Tp* pointer;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp *	access:public
pointer	./stl_tree.h	/^      typedef const _Tp* pointer;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Tp *	access:public
pointer	./stl_tree.h	/^      typedef value_type* pointer;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:value_type *	access:public
pointer	./stl_vector.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::pointer	access:public
pointer_to_binary_function	./stl_function.h	/^      pointer_to_binary_function() {}$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	./stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
pointer_to_binary_function	./stl_function.h	/^    class pointer_to_binary_function$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
pointer_to_unary_function	./stl_function.h	/^      pointer_to_unary_function() {}$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	./stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
pointer_to_unary_function	./stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Arg,_Result>
pop	./stl_queue.h	/^      pop()$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:void	access:public	signature:()
pop	./stl_queue.h	/^      pop()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:void	access:public	signature:()
pop	./stl_stack.h	/^      pop()$/;"	kind:function	language:C++	class:std::stack	typeref:typename:void	access:public	signature:()
pop_back	./stl_bvector.h	/^    pop_back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
pop_back	./stl_deque.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
pop_back	./stl_list.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
pop_back	./stl_vector.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
pop_front	./stl_deque.h	/^      pop_front()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
pop_front	./stl_list.h	/^      pop_front()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
pop_heap	./stl_heap.h	/^    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
pop_heap	./stl_heap.h	/^    pop_heap(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
pos_format	./locale_facets.h	/^      pos_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:public	signature:() const
pos_type	./basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
pos_type	./char_traits.h	/^      typedef std::streampos  pos_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::streampos	access:public
pos_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
positive_sign	./locale_facets.h	/^      positive_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
precision	./ios_base.h	/^    precision() const { return _M_precision; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
precision	./ios_base.h	/^    precision(streamsize __prec)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
prev_permutation	./stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
prev_permutation	./stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Compare __comp)
priority_queue	./stl_queue.h	/^        priority_queue(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::priority_queue	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __x=_Compare (),const _Sequence & __s=_Sequence ())
priority_queue	./stl_queue.h	/^      priority_queue(const _Compare& __x = _Compare(),$/;"	kind:function	language:C++	class:std::priority_queue	access:public	signature:(const _Compare & __x=_Compare (),const _Sequence & __s=_Sequence ())
priority_queue	./stl_queue.h	/^    class priority_queue$/;"	kind:class	language:C++	namespace:std
ptr_fun	./stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:pointer_to_unary_function<_Arg,_Result>	signature:(_Result (* __x)(_Arg))
ptr_fun	./stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	kind:function	language:C++	namespace:std	typeref:typename:pointer_to_binary_function<_Arg1,_Arg2,_Result>	signature:(_Result (* __x)(_Arg1,_Arg2))
push	./stl_queue.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:void	access:public	signature:(const value_type & __x)
push	./stl_queue.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::queue	typeref:typename:void	access:public	signature:(const value_type & __x)
push	./stl_stack.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::stack	typeref:typename:void	access:public	signature:(const value_type & __x)
push_back	./basic_string.h	/^      push_back(_CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
push_back	./stl_bvector.h	/^    push_back(bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(bool __x)
push_back	./stl_deque.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(const value_type & __x)
push_back	./stl_list.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const value_type & __x)
push_back	./stl_vector.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(const value_type & __x)
push_front	./stl_deque.h	/^      push_front(const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(const value_type & __x)
push_front	./stl_list.h	/^      push_front(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const value_type & __x)
push_heap	./stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
push_heap	./stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
put	./locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,const string_type & __digits) const
put	./locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,long double __units) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,bool __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,double __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long long __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,const void * __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long double __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,unsigned long __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,unsigned long long __v) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	kind:prototype	language:C++	class:std::time_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,const _CharT * __beg,const _CharT * __end) const
put	./locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	kind:function	language:C++	class:std::time_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,char __format,char __mod=0) const
pword	./ios_base.h	/^    pword(int __ix)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
queue	./stl_queue.h	/^      queue(const _Sequence& __c = _Sequence()) : c(__c) {}$/;"	kind:function	language:C++	class:std::queue	access:public	signature:(const _Sequence & __c=_Sequence ())
queue	./stl_queue.h	/^    class queue$/;"	kind:class	language:C++	namespace:std
random_access_iterator_tag	./stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:bidirectional_iterator_tag
random_shuffle	./stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
random_shuffle	./stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomNumberGenerator & __rand)
raw_storage_iterator	./stl_raw_storage_iter.h	/^      raw_storage_iterator(_ForwardIterator __x)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
raw_storage_iterator	./stl_raw_storage_iter.h	/^    class raw_storage_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
rbegin	./basic_string.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./basic_string.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_bvector.h	/^    rbegin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_bvector.h	/^    rbegin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_deque.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_deque.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_list.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_list.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_map.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_map.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::map	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_multimap.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_multimap.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_multiset.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:reverse_iterator	access:public	signature:() const
rbegin	./stl_set.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:reverse_iterator	access:public	signature:() const
rbegin	./stl_tree.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_tree.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	./stl_vector.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	./stl_vector.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
rdbuf	./basic_ios.h	/^      rdbuf() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
rdbuf	./basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
rdstate	./basic_ios.h	/^      rdstate() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
rebind	./allocator.h	/^        struct rebind$/;"	kind:struct	language:C++	class:std::allocator	access:public
reference	./allocator.h	/^      typedef _Tp&       reference;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp &	access:public
reference	./basic_string.h	/^      typedef typename _CharT_alloc_type::reference	    reference;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::reference	access:public
reference	./stl_bvector.h	/^    typedef _Bit_reference                               reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_reference	access:public
reference	./stl_bvector.h	/^    typedef _Bit_reference  reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_reference	access:public
reference	./stl_bvector.h	/^    typedef bool                 reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:bool	access:public
reference	./stl_deque.h	/^      typedef _Ref                            reference;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Ref	access:public
reference	./stl_deque.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::reference	access:public
reference	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference   reference;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::reference	access:public
reference	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference reference;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::reference	access:public
reference	./stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Reference	access:public
reference	./stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
reference	./stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
reference	./stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	./stl_list.h	/^      typedef _Tp&                               reference;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp &	access:public
reference	./stl_list.h	/^      typedef const _Tp&                         reference;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _Tp &	access:public
reference	./stl_list.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::reference	access:public
reference	./stl_map.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::reference	access:public
reference	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::reference	access:public
reference	./stl_multiset.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::reference	access:public
reference	./stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::reference	access:public
reference	./stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::reference	access:public
reference	./stl_set.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::reference	access:public
reference	./stl_stack.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::reference	access:public
reference	./stl_tree.h	/^      typedef _Tp& reference;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp &	access:public
reference	./stl_tree.h	/^      typedef const _Tp& reference;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Tp &	access:public
reference	./stl_tree.h	/^      typedef value_type& reference;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:value_type &	access:public
reference	./stl_vector.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::reference	access:public
register_callback	./ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
rel_ops	./stl_relops.h	/^  namespace rel_ops$/;"	kind:namespace	language:C++	namespace:std
remove	./stl_algo.h	/^    remove(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
remove	./stl_list.h	/^      remove(const _Tp& __value);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const _Tp & __value)
remove_copy	./stl_algo.h	/^    remove_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,const _Tp & __value)
remove_copy_if	./stl_algo.h	/^    remove_copy_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_Predicate __pred)
remove_if	./stl_algo.h	/^    remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
remove_if	./stl_list.h	/^        remove_if(_Predicate);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_Predicate)
rend	./basic_string.h	/^      rend() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./basic_string.h	/^      rend()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_bvector.h	/^    rend() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_bvector.h	/^    rend()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_deque.h	/^      rend() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_deque.h	/^      rend()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_list.h	/^      rend() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_list.h	/^      rend()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_map.h	/^      rend() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_map.h	/^      rend()$/;"	kind:function	language:C++	class:std::map	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_multimap.h	/^      rend() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_multimap.h	/^      rend()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_multiset.h	/^      rend() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:reverse_iterator	access:public	signature:() const
rend	./stl_set.h	/^      rend() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:reverse_iterator	access:public	signature:() const
rend	./stl_tree.h	/^      rend() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_tree.h	/^      rend()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:reverse_iterator	access:public	signature:()
rend	./stl_vector.h	/^      rend() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	./stl_vector.h	/^      rend()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
replace	./basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_CharT * __k1,_CharT * __k2)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s,size_type __n)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const basic_string & __str)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,iterator __k1,iterator __k2)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,size_type __n,_CharT __c)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __k1,const _CharT * __k2)
replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const_iterator __k1,const_iterator __k2)
replace	./basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
replace	./basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2)
replace	./stl_algo.h	/^    replace(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __old_value,const _Tp & __new_value)
replace_copy	./stl_algo.h	/^    replace_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,const _Tp & __old_value,const _Tp & __new_value)
replace_copy_if	./stl_algo.h	/^    replace_copy_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_Predicate __pred,const _Tp & __new_value)
replace_if	./stl_algo.h	/^    replace_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,const _Tp & __new_value)
requested_size	./stl_tempbuf.h	/^      requested_size() const$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
reserve	./basic_string.h	/^      reserve(size_type __res_arg = 0);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg=0)
reserve	./stl_bvector.h	/^    reserve(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n)
reserve	./stl_vector.h	/^      reserve(size_type __n);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n)
resize	./basic_string.h	/^      resize(size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
resize	./basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
resize	./stl_bvector.h	/^    resize(size_type __new_size, bool __x = bool())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __new_size,bool __x=bool ())
resize	./stl_deque.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
resize	./stl_list.h	/^      resize(size_type __new_size, value_type __x = value_type());$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
resize	./stl_vector.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
result	./codecvt.h	/^      typedef codecvt_base::result	result;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:codecvt_base::result	access:public
result	./codecvt.h	/^      typedef codecvt_base::result	result;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:codecvt_base::result	access:public
result	./codecvt.h	/^    enum result$/;"	kind:enum	language:C++	class:std::codecvt_base	access:public
result_type	./stl_function.h	/^      typedef _Result result_type;         \/\/\/< type of the return type$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Result	access:public
result_type	./stl_function.h	/^      typedef _Result result_type;  \/\/\/< @c result_type is the return type$/;"	kind:typedef	language:C++	struct:std::unary_function	typeref:typename:_Result	access:public
result_type	./valarray_before.h	/^      typedef _Tp result_type;$/;"	kind:typedef	language:C++	struct:std::__fun	typeref:typename:_Tp	access:public
result_type	./valarray_before.h	/^      typedef bool result_type;$/;"	kind:typedef	language:C++	struct:std::__fun	typeref:typename:bool	access:public
reverse	./stl_algo.h	/^    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
reverse	./stl_list.h	/^      reverse()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
reverse	./stl_list.h	/^    reverse();$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:()
reverse_copy	./stl_algo.h	/^    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_OutputIterator __result)
reverse_iterator	./basic_string.h	/^      typedef std::reverse_iterator<iterator>		    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	./stl_bvector.h	/^    typedef std::reverse_iterator<iterator>              reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	./stl_deque.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	./stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter> & __x)
reverse_iterator	./stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:()
reverse_iterator	./stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(const reverse_iterator & __x)
reverse_iterator	./stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
reverse_iterator	./stl_iterator.h	/^    class reverse_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
reverse_iterator	./stl_list.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	./stl_map.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::reverse_iterator	access:public
reverse_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::reverse_iterator	access:public
reverse_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_reverse_iterator	access:public
reverse_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_reverse_iterator	access:public
reverse_iterator	./stl_tree.h	/^      typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	./stl_vector.h	/^      typedef std::reverse_iterator<iterator>		 reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<iterator>	access:public
rfind	./basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
rfind	./basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
rfind	./basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
rfind	./basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
right	./ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
right	./ios_base.h	/^  right(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
rotate	./stl_algo.h	/^    rotate(_ForwardIterator __first, _ForwardIterator __middle,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last)
rotate_copy	./stl_algo.h	/^    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last,_OutputIterator __result)
scan_is	./locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_is	./locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scan_not	./locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_not	./locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scientific	./ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
scientific	./ios_base.h	/^  scientific(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
search	./stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2)
search	./stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
search_n	./stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val)
search_n	./stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred)
second	./stl_pair.h	/^      _T2 second;                \/\/\/< @c second is a copy of the second object$/;"	kind:member	language:C++	struct:std::pair	typeref:typename:_T2	access:public
second_argument_type	./stl_function.h	/^      typedef _Arg2 second_argument_type;  \/\/\/< the type of the second argument$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Arg2	access:public
second_type	./stl_pair.h	/^      typedef _T2 second_type;   \/\/\/<  @c second_type is the second bound type$/;"	kind:typedef	language:C++	struct:std::pair	typeref:typename:_T2	access:public
seek_dir	./ios_base.h	/^    typedef int seek_dir;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
seekdir	./ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
set	./stl_set.h	/^        set(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::set	access:public	signature:(_InputIterator __first,_InputIterator __last)
set	./stl_set.h	/^        set(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::set	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
set	./stl_set.h	/^      set()$/;"	kind:function	language:C++	class:std::set	access:public	signature:()
set	./stl_set.h	/^      set(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::set	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
set	./stl_set.h	/^      set(const set<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc> & __x)
set	./stl_set.h	/^    class set$/;"	kind:class	language:C++	namespace:std
set_difference	./stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
set_difference	./stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
set_intersection	./stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
set_intersection	./stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
set_symmetric_difference	./stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
set_symmetric_difference	./stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
set_union	./stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
set_union	./stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
setf	./ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
setf	./ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
setstate	./basic_ios.h	/^      setstate(iostate __state)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
shift	./valarray_after.h	/^      valarray<value_type> shift(int) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(int) const
shift	./valarray_after.h	/^    _Expr<_Clos, _Tp>::shift(int __n) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(int __n) const
showbase	./ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
showbase	./ios_base.h	/^  showbase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpoint	./ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpoint	./ios_base.h	/^  showpoint(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpos	./ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpos	./ios_base.h	/^  showpos(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
sign	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
size	./basic_string.h	/^      size() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
size	./gslice.h	/^    valarray<size_t> size() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	access:public	signature:() const
size	./gslice.h	/^  gslice::size () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	signature:() const
size	./slice_array.h	/^    size_t size() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
size	./slice_array.h	/^  slice::size() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
size	./stl_bvector.h	/^    size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
size	./stl_deque.h	/^      size() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_type	access:public	signature:() const
size	./stl_list.h	/^      size() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:size_type	access:public	signature:() const
size	./stl_map.h	/^      size() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:() const
size	./stl_multimap.h	/^      size() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:() const
size	./stl_multiset.h	/^      size() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:() const
size	./stl_queue.h	/^      size() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:size_type	access:public	signature:() const
size	./stl_queue.h	/^      size() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:size_type	access:public	signature:() const
size	./stl_set.h	/^      size() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:() const
size	./stl_stack.h	/^      size() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:size_type	access:public	signature:() const
size	./stl_tempbuf.h	/^      size() const$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
size	./stl_tree.h	/^      size() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:() const
size	./stl_vector.h	/^      size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
size	./valarray_after.h	/^      size () const$/;"	kind:function	language:C++	class:std::_GBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_after.h	/^      size() const$/;"	kind:function	language:C++	class:std::_IBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_after.h	/^      size_t size() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:size_t	access:public	signature:() const
size	./valarray_after.h	/^    _Expr<_Clos, _Tp>::size() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:size_t	signature:() const
size	./valarray_before.h	/^      size() const$/;"	kind:function	language:C++	class:std::_SBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_before.h	/^      size_t size() const { return _M_expr.size ();}$/;"	kind:function	language:C++	class:std::_FunBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_before.h	/^      size_t size() const { return _M_expr.size(); }$/;"	kind:function	language:C++	class:std::_UnBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	kind:function	language:C++	class:std::_BinBase	typeref:typename:size_t	access:public	signature:() const
size	./valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	kind:function	language:C++	class:std::_BinBase2	typeref:typename:size_t	access:public	signature:() const
size	./valarray_before.h	/^      size_t size() const { return _M_expr2.size(); }$/;"	kind:function	language:C++	class:std::_BinBase1	typeref:typename:size_t	access:public	signature:() const
size_type	./allocator.h	/^      typedef size_t      size_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:size_t	access:public
size_type	./allocator.h	/^      typedef size_t     size_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:size_t	access:public
size_type	./basic_string.h	/^      typedef typename _CharT_alloc_type::size_type	    size_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::size_type	access:public
size_type	./stl_bvector.h	/^    typedef size_t                                       size_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:size_t	access:public
size_type	./stl_deque.h	/^      typedef size_t                             size_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:size_t	access:public
size_type	./stl_deque.h	/^      typedef size_t                          size_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:size_t	access:public
size_type	./stl_list.h	/^      typedef size_t                                     size_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:size_t	access:public
size_type	./stl_map.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::size_type	access:public
size_type	./stl_multimap.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::size_type	access:public
size_type	./stl_multiset.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::size_type	access:public
size_type	./stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::size_type	access:public
size_type	./stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::size_type	access:public
size_type	./stl_set.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::size_type	access:public
size_type	./stl_stack.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::size_type	access:public
size_type	./stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:ptrdiff_t	access:public
size_type	./stl_tree.h	/^      typedef size_t size_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:size_t	access:public
size_type	./stl_vector.h	/^      typedef size_t					 size_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:size_t	access:public
skipws	./ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
skipws	./ios_base.h	/^  skipws(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
slice	./slice_array.h	/^    slice();$/;"	kind:prototype	language:C++	class:std::slice	access:public	signature:()
slice	./slice_array.h	/^    slice(size_t, size_t, size_t);$/;"	kind:prototype	language:C++	class:std::slice	access:public	signature:(size_t,size_t,size_t)
slice	./slice_array.h	/^  class slice$/;"	kind:class	language:C++	namespace:std
slice	./slice_array.h	/^  slice::slice() {}$/;"	kind:function	language:C++	class:std::slice	signature:()
slice	./slice_array.h	/^  slice::slice(size_t __o, size_t __d, size_t __s)$/;"	kind:function	language:C++	class:std::slice	signature:(size_t __o,size_t __d,size_t __s)
slice_array	./slice_array.h	/^      slice_array();$/;"	kind:prototype	language:C++	class:std::slice_array	access:private	signature:()
slice_array	./slice_array.h	/^      slice_array(_Array<_Tp>, const slice&);$/;"	kind:prototype	language:C++	class:std::slice_array	access:private	signature:(_Array<_Tp>,const slice &)
slice_array	./slice_array.h	/^      slice_array(const slice_array&);$/;"	kind:prototype	language:C++	class:std::slice_array	access:public	signature:(const slice_array &)
slice_array	./slice_array.h	/^    class slice_array$/;"	kind:class	language:C++	namespace:std
slice_array	./slice_array.h	/^    slice_array<_Tp>::slice_array(_Array<_Tp> __a, const slice& __s)$/;"	kind:function	language:C++	class:std::slice_array	signature:(_Array<_Tp> __a,const slice & __s)
slice_array	./slice_array.h	/^    slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)$/;"	kind:function	language:C++	class:std::slice_array	signature:(const slice_array<_Tp> & a)
sort	./stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
sort	./stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
sort	./stl_list.h	/^        sort(_StrictWeakOrdering);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_StrictWeakOrdering)
sort	./stl_list.h	/^      sort();$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
sort_heap	./stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
sort_heap	./stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
space	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
splice	./stl_list.h	/^      splice(iterator __position, list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x)
splice	./stl_list.h	/^      splice(iterator __position, list& __x, iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x,iterator __first,iterator __last)
splice	./stl_list.h	/^      splice(iterator __position, list& __x, iterator __i)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x,iterator __i)
stable_partition	./stl_algo.h	/^    stable_partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
stable_sort	./stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
stable_sort	./stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
stack	./stl_stack.h	/^      stack(const _Sequence& __c = _Sequence())$/;"	kind:function	language:C++	class:std::stack	access:public	signature:(const _Sequence & __c=_Sequence ())
stack	./stl_stack.h	/^    class stack$/;"	kind:class	language:C++	namespace:std
start	./gslice.h	/^    size_t           start() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:size_t	access:public	signature:() const
start	./gslice.h	/^  gslice::start () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:size_t	signature:() const
start	./slice_array.h	/^    size_t start() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
start	./slice_array.h	/^  slice::start() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
state	./postypes.h	/^      state() const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
state	./postypes.h	/^      state(_StateT __st)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
state_type	./char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	kind:typedef	language:C++	struct:_Char_types	typeref:typename:std::mbstate_t	access:public
state_type	./char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	kind:typedef	language:C++	struct:char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
state_type	./codecvt.h	/^      typedef _StateT			state_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_StateT	access:public
state_type	./codecvt.h	/^      typedef _StateT			state_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_StateT	access:public
state_type	./codecvt.h	/^      typedef mbstate_t			state_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:mbstate_t	access:public
std	./allocator.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./basic_ios.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./basic_string.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./codecvt.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./functexcept.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./gslice.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./gslice_array.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./indirect_array.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./ios_base.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./locale_classes.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./locale_facets.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./localefwd.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./mask_array.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./ostream_insert.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./postypes.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./slice_array.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_algo.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_algobase.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_bvector.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_construct.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_deque.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_function.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_heap.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_iterator.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_iterator_base_funcs.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_iterator_base_types.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_list.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_map.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_multimap.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_multiset.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_numeric.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_pair.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_queue.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_raw_storage_iter.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_relops.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_set.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_stack.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_tempbuf.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_tree.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_uninitialized.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stl_vector.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stream_iterator.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./streambuf_iterator.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./stringfwd.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./valarray_after.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./valarray_array.h	/^namespace std {$/;"	kind:namespace	language:C++
std	./valarray_before.h	/^namespace std {$/;"	kind:namespace	language:C++
std::_Array	./valarray_array.h	/^    struct _Array$/;"	kind:struct	language:C++	namespace:std
std::_Array::_Array	./valarray_array.h	/^      _Array(const _Tp* __restrict__, size_t);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(const _Tp * __restrict__,size_t)
std::_Array::_Array	./valarray_array.h	/^      explicit _Array(_Tp* const __restrict__);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(_Tp * const __restrict__)
std::_Array::_Array	./valarray_array.h	/^      explicit _Array(const valarray<_Tp>&);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(const valarray<_Tp> &)
std::_Array::_Array	./valarray_array.h	/^      explicit _Array(size_t);$/;"	kind:prototype	language:C++	struct:std::_Array	access:public	signature:(size_t)
std::_Array::_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(_Tp* const __restrict__ __p)$/;"	kind:function	language:C++	class:std::_Array	signature:(_Tp * const __restrict__ __p)
std::_Array::_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(const _Tp* __restrict__ __b, size_t __s)$/;"	kind:function	language:C++	class:std::_Array	signature:(const _Tp * __restrict__ __b,size_t __s)
std::_Array::_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(const valarray<_Tp>& __v)$/;"	kind:function	language:C++	class:std::_Array	signature:(const valarray<_Tp> & __v)
std::_Array::_Array	./valarray_array.h	/^    _Array<_Tp>::_Array(size_t __n)$/;"	kind:function	language:C++	class:std::_Array	signature:(size_t __n)
std::_Array::_M_data	./valarray_array.h	/^      _Tp* const __restrict__ _M_data;$/;"	kind:member	language:C++	struct:std::_Array	typeref:typename:_Tp * const 	access:public
std::_Array::begin	./valarray_array.h	/^      _Tp* begin() const;$/;"	kind:prototype	language:C++	struct:std::_Array	typeref:typename:_Tp *	access:public	signature:() const
std::_Array::begin	./valarray_array.h	/^    _Array<_Tp>::begin () const$/;"	kind:function	language:C++	class:std::_Array	typeref:typename:_Tp *	signature:() const
std::_Array_copier	./valarray_array.h	/^    struct _Array_copier$/;"	kind:struct	language:C++	namespace:std
std::_Array_copier	./valarray_array.h	/^    struct _Array_copier<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
std::_Array_copier::_S_do_it	./valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)$/;"	kind:function	language:C++	struct:std::_Array_copier	typeref:typename:void	access:public	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b)
std::_Array_copy_ctor	./valarray_array.h	/^    struct _Array_copy_ctor$/;"	kind:struct	language:C++	namespace:std
std::_Array_copy_ctor	./valarray_array.h	/^    struct _Array_copy_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
std::_Array_copy_ctor::_S_do_it	./valarray_array.h	/^      _S_do_it(const _Tp* __restrict__ __b, const _Tp* __restrict__ __e,$/;"	kind:function	language:C++	struct:std::_Array_copy_ctor	typeref:typename:void	access:public	signature:(const _Tp * __restrict__ __b,const _Tp * __restrict__ __e,_Tp * __restrict__ __o)
std::_Array_default_ctor	./valarray_array.h	/^    struct _Array_default_ctor$/;"	kind:struct	language:C++	namespace:std
std::_Array_default_ctor	./valarray_array.h	/^    struct _Array_default_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
std::_Array_default_ctor::_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	struct:std::_Array_default_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
std::_Array_init_ctor	./valarray_array.h	/^    struct _Array_init_ctor$/;"	kind:struct	language:C++	namespace:std
std::_Array_init_ctor	./valarray_array.h	/^    struct _Array_init_ctor<_Tp, true>$/;"	kind:struct	language:C++	namespace:std
std::_Array_init_ctor::_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e,  const _Tp __t)$/;"	kind:function	language:C++	struct:std::_Array_init_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
std::_Array_init_ctor::_S_do_it	./valarray_array.h	/^      _S_do_it(_Tp* __restrict__ __b, _Tp* __restrict__ __e, const _Tp __t)$/;"	kind:function	language:C++	struct:std::_Array_init_ctor	typeref:typename:void	access:public	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
std::_BinBase	./valarray_before.h	/^    class _BinBase$/;"	kind:class	language:C++	namespace:std
std::_BinBase1	./valarray_before.h	/^    class _BinBase1$/;"	kind:class	language:C++	namespace:std
std::_BinBase1::_BinBase1	./valarray_before.h	/^      _BinBase1(const _Vt& __t, const _Clos& __e)$/;"	kind:function	language:C++	class:std::_BinBase1	access:public	signature:(const _Vt & __t,const _Clos & __e)
std::_BinBase1::_M_expr1	./valarray_before.h	/^      const _Vt& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase1	typeref:typename:const _Vt &	access:private
std::_BinBase1::_M_expr2	./valarray_before.h	/^      const _Clos& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase1	typeref:typename:const _Clos &	access:private
std::_BinBase1::_Vt	./valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase1	typeref:typename:_Clos::value_type	access:public
std::_BinBase1::operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase1	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_BinBase1::size	./valarray_before.h	/^      size_t size() const { return _M_expr2.size(); }$/;"	kind:function	language:C++	class:std::_BinBase1	typeref:typename:size_t	access:public	signature:() const
std::_BinBase1::value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase1	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
std::_BinBase2	./valarray_before.h	/^    class _BinBase2$/;"	kind:class	language:C++	namespace:std
std::_BinBase2::_BinBase2	./valarray_before.h	/^      _BinBase2(const _Clos& __e, const _Vt& __t)$/;"	kind:function	language:C++	class:std::_BinBase2	access:public	signature:(const _Clos & __e,const _Vt & __t)
std::_BinBase2::_M_expr1	./valarray_before.h	/^      const _Clos& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase2	typeref:typename:const _Clos &	access:private
std::_BinBase2::_M_expr2	./valarray_before.h	/^      const _Vt& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase2	typeref:typename:const _Vt &	access:private
std::_BinBase2::_Vt	./valarray_before.h	/^      typedef typename _Clos::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase2	typeref:typename:_Clos::value_type	access:public
std::_BinBase2::operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase2	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_BinBase2::size	./valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	kind:function	language:C++	class:std::_BinBase2	typeref:typename:size_t	access:public	signature:() const
std::_BinBase2::value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase2	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
std::_BinBase::_BinBase	./valarray_before.h	/^      _BinBase(const _FirstArg& __e1, const _SecondArg& __e2)$/;"	kind:function	language:C++	class:std::_BinBase	access:public	signature:(const _FirstArg & __e1,const _SecondArg & __e2)
std::_BinBase::_M_expr1	./valarray_before.h	/^      const _FirstArg& _M_expr1;$/;"	kind:member	language:C++	class:std::_BinBase	typeref:typename:const _FirstArg &	access:private
std::_BinBase::_M_expr2	./valarray_before.h	/^      const _SecondArg& _M_expr2;$/;"	kind:member	language:C++	class:std::_BinBase	typeref:typename:const _SecondArg &	access:private
std::_BinBase::_Vt	./valarray_before.h	/^      typedef typename _FirstArg::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_BinBase	typeref:typename:_FirstArg::value_type	access:public
std::_BinBase::operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_BinBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_BinBase::size	./valarray_before.h	/^      size_t size() const { return _M_expr1.size(); }$/;"	kind:function	language:C++	class:std::_BinBase	typeref:typename:size_t	access:public	signature:() const
std::_BinBase::value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _Expr, typename _Dom::value_type, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase1<_Oper,_Dom>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Constant, _ValArray, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase1<_Oper,valarray<_Tp>>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Constant, _Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase2<_Oper,_Dom>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _Expr, _Dom1, _Dom2>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,_Dom1,_Dom2>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _Expr, _ValArray, _Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,_Dom,valarray<typename_Dom::value_type>>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Constant, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase2<_Oper,valarray<_Tp>>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper, _ValArray, _Expr, typename _Dom::value_type, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,valarray<typename_Dom::value_type>,_Dom>
std::_BinClos	./valarray_before.h	/^    struct _BinClos<_Oper,_ValArray, _ValArray, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_BinBase<_Oper,valarray<_Tp>,valarray<_Tp>>
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase1<_Oper, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase1<_Oper,_Dom>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase1<_Oper, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase1<_Oper,valarray<_Tp>>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase2<_Oper,_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase2<_Oper,_Dom>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase2<_Oper,valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase2<_Oper,valarray<_Tp>>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, _Dom1, _Dom2> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,_Dom1,_Dom2>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,valarray<_Tp>,_Dom>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase<_Oper, valarray<_Tp>, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,valarray<_Tp>,valarray<_Tp>>	access:public
std::_BinClos::_Base	./valarray_before.h	/^      typedef _BinBase<_Oper,_Dom,valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_BinBase<_Oper,_Dom,valarray<_Tp>>	access:public
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const _Dom& __e1, const _Tp& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom & __e1,const _Tp & __e2)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const _Dom& __e1, const valarray<_Tp>& __e2)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom & __e1,const valarray<_Tp> & __e2)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const _Dom1& __e1, const _Dom2& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Dom1 & __e1,const _Dom2 & __e2)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const _Tp& __e1, const _Dom& __e2) : _Base(__e1, __e2) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Tp & __e1,const _Dom & __e2)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const _Tp& __t, const valarray<_Tp>& __v) : _Base(__t, __v) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const _Tp & __t,const valarray<_Tp> & __v)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __e1, const _Dom& __e2)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __e1,const _Dom & __e2)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const _Tp& __t) : _Base(__v, __t) {}$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __v,const _Tp & __t)
std::_BinClos::_BinClos	./valarray_before.h	/^      _BinClos(const valarray<_Tp>& __v, const valarray<_Tp>& __w)$/;"	kind:function	language:C++	struct:std::_BinClos	access:public	signature:(const valarray<_Tp> & __v,const valarray<_Tp> & __w)
std::_BinClos::_Tp	./valarray_before.h	/^      typedef typename _Dom::value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_Dom::value_type	access:public
std::_BinClos::value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_Base::value_type	access:public
std::_Bit_const_iterator	./stl_bvector.h	/^  struct _Bit_const_iterator : public _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Bit_iterator_base
std::_Bit_const_iterator::_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:()
std::_Bit_const_iterator::_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:(_Bit_type * __x,unsigned int __y)
std::_Bit_const_iterator::_Bit_const_iterator	./stl_bvector.h	/^    _Bit_const_iterator(const _Bit_iterator& __x)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	access:public	signature:(const _Bit_iterator & __x)
std::_Bit_const_iterator::const_iterator	./stl_bvector.h	/^    typedef _Bit_const_iterator  const_iterator;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:_Bit_const_iterator	access:public
std::_Bit_const_iterator::const_reference	./stl_bvector.h	/^    typedef bool                 const_reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:bool	access:public
std::_Bit_const_iterator::operator *	./stl_bvector.h	/^    operator*() const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_reference	access:public	signature:() const
std::_Bit_const_iterator::operator +	./stl_bvector.h	/^    operator+(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator ++	./stl_bvector.h	/^    operator++()$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:()
std::_Bit_const_iterator::operator ++	./stl_bvector.h	/^    operator++(int)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator +=	./stl_bvector.h	/^    operator+=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator -	./stl_bvector.h	/^    operator-(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::operator --	./stl_bvector.h	/^    operator--()$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:()
std::_Bit_const_iterator::operator --	./stl_bvector.h	/^    operator--(int)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator	access:public	signature:(int)
std::_Bit_const_iterator::operator -=	./stl_bvector.h	/^    operator-=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_iterator &	access:public	signature:(difference_type __i)
std::_Bit_const_iterator::operator []	./stl_bvector.h	/^    operator[](difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const_reference	access:public	signature:(difference_type __i) const
std::_Bit_const_iterator::pointer	./stl_bvector.h	/^    typedef const bool*          pointer;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:const bool *	access:public
std::_Bit_const_iterator::reference	./stl_bvector.h	/^    typedef bool                 reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_const_iterator	typeref:typename:bool	access:public
std::_Bit_iterator	./stl_bvector.h	/^  struct _Bit_iterator : public _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Bit_iterator_base
std::_Bit_iterator::_Bit_iterator	./stl_bvector.h	/^    _Bit_iterator() : _Bit_iterator_base(0, 0) { }$/;"	kind:function	language:C++	struct:std::_Bit_iterator	access:public	signature:()
std::_Bit_iterator::_Bit_iterator	./stl_bvector.h	/^    _Bit_iterator(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	access:public	signature:(_Bit_type * __x,unsigned int __y)
std::_Bit_iterator::iterator	./stl_bvector.h	/^    typedef _Bit_iterator   iterator;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_iterator	access:public
std::_Bit_iterator::operator *	./stl_bvector.h	/^    operator*() const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:reference	access:public	signature:() const
std::_Bit_iterator::operator +	./stl_bvector.h	/^    operator+(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator ++	./stl_bvector.h	/^    operator++()$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:()
std::_Bit_iterator::operator ++	./stl_bvector.h	/^    operator++(int)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(int)
std::_Bit_iterator::operator +=	./stl_bvector.h	/^    operator+=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator -	./stl_bvector.h	/^    operator-(difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(difference_type __i) const
std::_Bit_iterator::operator --	./stl_bvector.h	/^    operator--()$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:()
std::_Bit_iterator::operator --	./stl_bvector.h	/^    operator--(int)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator	access:public	signature:(int)
std::_Bit_iterator::operator -=	./stl_bvector.h	/^    operator-=(difference_type __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:iterator &	access:public	signature:(difference_type __i)
std::_Bit_iterator::operator []	./stl_bvector.h	/^    operator[](difference_type __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator	typeref:typename:reference	access:public	signature:(difference_type __i) const
std::_Bit_iterator::pointer	./stl_bvector.h	/^    typedef _Bit_reference* pointer;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_reference *	access:public
std::_Bit_iterator::reference	./stl_bvector.h	/^    typedef _Bit_reference  reference;$/;"	kind:typedef	language:C++	struct:std::_Bit_iterator	typeref:typename:_Bit_reference	access:public
std::_Bit_iterator_base	./stl_bvector.h	/^  struct _Bit_iterator_base$/;"	kind:struct	language:C++	namespace:std	inherits:std::iterator<std::random_access_iterator_tag,bool>
std::_Bit_iterator_base::_Bit_iterator_base	./stl_bvector.h	/^    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	access:public	signature:(_Bit_type * __x,unsigned int __y)
std::_Bit_iterator_base::_M_bump_down	./stl_bvector.h	/^    _M_bump_down()$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:()
std::_Bit_iterator_base::_M_bump_up	./stl_bvector.h	/^    _M_bump_up()$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:()
std::_Bit_iterator_base::_M_incr	./stl_bvector.h	/^    _M_incr(ptrdiff_t __i)$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:void	access:public	signature:(ptrdiff_t __i)
std::_Bit_iterator_base::_M_offset	./stl_bvector.h	/^    unsigned int _M_offset;$/;"	kind:member	language:C++	struct:std::_Bit_iterator_base	typeref:typename:unsigned int	access:public
std::_Bit_iterator_base::_M_p	./stl_bvector.h	/^    _Bit_type * _M_p;$/;"	kind:member	language:C++	struct:std::_Bit_iterator_base	typeref:typename:_Bit_type *	access:public
std::_Bit_iterator_base::operator !=	./stl_bvector.h	/^    operator!=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_iterator_base::operator <	./stl_bvector.h	/^    operator<(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_iterator_base::operator <=	./stl_bvector.h	/^    operator<=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_iterator_base::operator ==	./stl_bvector.h	/^    operator==(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_iterator_base::operator >	./stl_bvector.h	/^    operator>(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_iterator_base::operator >=	./stl_bvector.h	/^    operator>=(const _Bit_iterator_base& __i) const$/;"	kind:function	language:C++	struct:std::_Bit_iterator_base	typeref:typename:bool	access:public	signature:(const _Bit_iterator_base & __i) const
std::_Bit_reference	./stl_bvector.h	/^  struct _Bit_reference$/;"	kind:struct	language:C++	namespace:std
std::_Bit_reference::_Bit_reference	./stl_bvector.h	/^    _Bit_reference() : _M_p(0), _M_mask(0) { }$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:()
std::_Bit_reference::_Bit_reference	./stl_bvector.h	/^    _Bit_reference(_Bit_type * __x, _Bit_type __y)$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:(_Bit_type * __x,_Bit_type __y)
std::_Bit_reference::_M_mask	./stl_bvector.h	/^    _Bit_type _M_mask;$/;"	kind:member	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_type	access:public
std::_Bit_reference::_M_p	./stl_bvector.h	/^    _Bit_type * _M_p;$/;"	kind:member	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_type *	access:public
std::_Bit_reference::flip	./stl_bvector.h	/^    flip()$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:void	access:public	signature:()
std::_Bit_reference::operator <	./stl_bvector.h	/^    operator<(const _Bit_reference& __x) const$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:bool	access:public	signature:(const _Bit_reference & __x) const
std::_Bit_reference::operator =	./stl_bvector.h	/^    operator=(bool __x)$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_reference &	access:public	signature:(bool __x)
std::_Bit_reference::operator =	./stl_bvector.h	/^    operator=(const _Bit_reference& __x)$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:_Bit_reference &	access:public	signature:(const _Bit_reference & __x)
std::_Bit_reference::operator ==	./stl_bvector.h	/^    operator==(const _Bit_reference& __x) const$/;"	kind:function	language:C++	struct:std::_Bit_reference	typeref:typename:bool	access:public	signature:(const _Bit_reference & __x) const
std::_Bit_reference::operator bool	./stl_bvector.h	/^    operator bool() const$/;"	kind:function	language:C++	struct:std::_Bit_reference	access:public	signature:() const
std::_Bit_type	./stl_bvector.h	/^  typedef unsigned long _Bit_type;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:unsigned long
std::_Bvector_base	./stl_bvector.h	/^    struct _Bvector_base$/;"	kind:struct	language:C++	namespace:std
std::_Bvector_base::_Bit_alloc_type	./stl_bvector.h	/^        _Bit_alloc_type;$/;"	kind:typedef	language:C++	struct:std::_Bvector_base	typeref:typename:_Alloc::template rebind<_Bit_type>::other	access:public
std::_Bvector_base::_Bvector_base	./stl_bvector.h	/^      _Bvector_base(const allocator_type& __a) : _M_impl(__a) { }$/;"	kind:function	language:C++	struct:std::_Bvector_base	access:public	signature:(const allocator_type & __a)
std::_Bvector_base::_Bvector_impl	./stl_bvector.h	/^      struct _Bvector_impl$/;"	kind:struct	language:C++	struct:std::_Bvector_base	inherits:_Bit_alloc_type	access:public
std::_Bvector_base::_Bvector_impl::_Bvector_impl	./stl_bvector.h	/^	_Bvector_impl(const _Bit_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_Bvector_base::_Bvector_impl	access:public	signature:(const _Bit_alloc_type & __a)
std::_Bvector_base::_Bvector_impl::_M_end_of_storage	./stl_bvector.h	/^	_Bit_type* 	_M_end_of_storage;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_type *	access:public
std::_Bvector_base::_Bvector_impl::_M_finish	./stl_bvector.h	/^	_Bit_iterator 	_M_finish;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_iterator	access:public
std::_Bvector_base::_Bvector_impl::_M_start	./stl_bvector.h	/^	_Bit_iterator 	_M_start;$/;"	kind:member	language:C++	struct:std::_Bvector_base::_Bvector_impl	typeref:typename:_Bit_iterator	access:public
std::_Bvector_base::_M_allocate	./stl_bvector.h	/^      _M_allocate(size_t __n)$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:_Bit_type *	access:protected	signature:(size_t __n)
std::_Bvector_base::_M_deallocate	./stl_bvector.h	/^      _M_deallocate()$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:void	access:protected	signature:()
std::_Bvector_base::_M_get_Bit_allocator	./stl_bvector.h	/^      _M_get_Bit_allocator() const$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:const _Bit_alloc_type &	access:public	signature:() const
std::_Bvector_base::_M_get_Bit_allocator	./stl_bvector.h	/^      _M_get_Bit_allocator()$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:_Bit_alloc_type &	access:public	signature:()
std::_Bvector_base::_M_impl	./stl_bvector.h	/^      _Bvector_impl _M_impl;$/;"	kind:member	language:C++	struct:std::_Bvector_base	typeref:typename:_Bvector_impl	access:protected
std::_Bvector_base::allocator_type	./stl_bvector.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	struct:std::_Bvector_base	typeref:typename:_Alloc	access:public
std::_Bvector_base::get_allocator	./stl_bvector.h	/^      get_allocator() const$/;"	kind:function	language:C++	struct:std::_Bvector_base	typeref:typename:allocator_type	access:public	signature:() const
std::_Bvector_base::~_Bvector_base	./stl_bvector.h	/^      ~_Bvector_base()$/;"	kind:function	language:C++	struct:std::_Bvector_base	access:public	signature:()
std::_Construct	./stl_construct.h	/^    _Construct(_T1* __p)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_T1 * __p)
std::_Construct	./stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
std::_Deque_base	./stl_deque.h	/^    class _Deque_base$/;"	kind:class	language:C++	namespace:std
std::_Deque_base::_Deque_base	./stl_deque.h	/^      _Deque_base(const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_Deque_base	access:public	signature:(const allocator_type & __a)
std::_Deque_base::_Deque_base	./stl_deque.h	/^      _Deque_base(const allocator_type& __a, size_t __num_elements)$/;"	kind:function	language:C++	class:std::_Deque_base	access:public	signature:(const allocator_type & __a,size_t __num_elements)
std::_Deque_base::_Deque_impl	./stl_deque.h	/^      struct _Deque_impl$/;"	kind:struct	language:C++	class:std::_Deque_base	inherits:_Tp_alloc_type	access:protected
std::_Deque_base::_Deque_impl::_Deque_impl	./stl_deque.h	/^	_Deque_impl(const _Tp_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_Deque_base::_Deque_impl	access:public	signature:(const _Tp_alloc_type & __a)
std::_Deque_base::_Deque_impl::_M_finish	./stl_deque.h	/^	iterator _M_finish;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:iterator	access:public
std::_Deque_base::_Deque_impl::_M_map	./stl_deque.h	/^	_Tp** _M_map;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:_Tp **	access:public
std::_Deque_base::_Deque_impl::_M_map_size	./stl_deque.h	/^	size_t _M_map_size;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:size_t	access:public
std::_Deque_base::_Deque_impl::_M_start	./stl_deque.h	/^	iterator _M_start;$/;"	kind:member	language:C++	struct:std::_Deque_base::_Deque_impl	typeref:typename:iterator	access:public
std::_Deque_base::_M_allocate_map	./stl_deque.h	/^      _M_allocate_map(size_t __n)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp **	access:protected	signature:(size_t __n)
std::_Deque_base::_M_allocate_node	./stl_deque.h	/^      _M_allocate_node()$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp *	access:protected	signature:()
std::_Deque_base::_M_create_nodes	./stl_deque.h	/^      void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __nstart,_Tp ** __nfinish)
std::_Deque_base::_M_create_nodes	./stl_deque.h	/^    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(_Tp ** __nstart,_Tp ** __nfinish)
std::_Deque_base::_M_deallocate_map	./stl_deque.h	/^      _M_deallocate_map(_Tp** __p, size_t __n)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __p,size_t __n)
std::_Deque_base::_M_deallocate_node	./stl_deque.h	/^      _M_deallocate_node(_Tp* __p)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp * __p)
std::_Deque_base::_M_destroy_nodes	./stl_deque.h	/^      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(_Tp ** __nstart,_Tp ** __nfinish)
std::_Deque_base::_M_destroy_nodes	./stl_deque.h	/^    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(_Tp ** __nstart,_Tp ** __nfinish)
std::_Deque_base::_M_get_Tp_allocator	./stl_deque.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:const _Tp_alloc_type &	access:protected	signature:() const
std::_Deque_base::_M_get_Tp_allocator	./stl_deque.h	/^      _M_get_Tp_allocator()$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Tp_alloc_type &	access:protected	signature:()
std::_Deque_base::_M_get_map_allocator	./stl_deque.h	/^      _M_get_map_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:_Map_alloc_type	access:protected	signature:() const
std::_Deque_base::_M_impl	./stl_deque.h	/^      _Deque_impl _M_impl;$/;"	kind:member	language:C++	class:std::_Deque_base	typeref:typename:_Deque_impl	access:protected
std::_Deque_base::_M_initialize_map	./stl_deque.h	/^      void _M_initialize_map(size_t);$/;"	kind:prototype	language:C++	class:std::_Deque_base	typeref:typename:void	access:protected	signature:(size_t)
std::_Deque_base::_M_initialize_map	./stl_deque.h	/^    _M_initialize_map(size_t __num_elements)$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:void	signature:(size_t __num_elements)
std::_Deque_base::_Map_alloc_type	./stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc::template rebind<_Tp * >::other	access:protected
std::_Deque_base::_S_initial_map_size	./stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	kind:enumerator	language:C++	enum:std::_Deque_base::__anon40b17a5e0103	access:public
std::_Deque_base::_Tp_alloc_type	./stl_deque.h	/^      typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:protected
std::_Deque_base::__anon40b17a5e0103	./stl_deque.h	/^      enum { _S_initial_map_size = 8 };$/;"	kind:enum	language:C++	class:std::_Deque_base	access:protected
std::_Deque_base::allocator_type	./stl_deque.h	/^      typedef _Alloc                  allocator_type;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Alloc	access:public
std::_Deque_base::const_iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Deque_iterator<_Tp,const _Tp &,const _Tp * >	access:public
std::_Deque_base::get_allocator	./stl_deque.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_Deque_base	typeref:typename:allocator_type	access:public	signature:() const
std::_Deque_base::iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	kind:typedef	language:C++	class:std::_Deque_base	typeref:typename:_Deque_iterator<_Tp,_Tp &,_Tp * >	access:public
std::_Deque_base::~_Deque_base	./stl_deque.h	/^      ~_Deque_base();$/;"	kind:prototype	language:C++	class:std::_Deque_base	access:public	signature:()
std::_Deque_base::~_Deque_base	./stl_deque.h	/^    ~_Deque_base()$/;"	kind:function	language:C++	class:std::_Deque_base	signature:()
std::_Deque_iterator	./stl_deque.h	/^    struct _Deque_iterator$/;"	kind:struct	language:C++	namespace:std
std::_Deque_iterator::_Deque_iterator	./stl_deque.h	/^      _Deque_iterator() : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) {}$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:()
std::_Deque_iterator::_Deque_iterator	./stl_deque.h	/^      _Deque_iterator(_Tp* __x, _Map_pointer __y)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:(_Tp * __x,_Map_pointer __y)
std::_Deque_iterator::_Deque_iterator	./stl_deque.h	/^      _Deque_iterator(const iterator& __x)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	access:public	signature:(const iterator & __x)
std::_Deque_iterator::_M_cur	./stl_deque.h	/^      _Tp* _M_cur;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
std::_Deque_iterator::_M_first	./stl_deque.h	/^      _Tp* _M_first;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
std::_Deque_iterator::_M_last	./stl_deque.h	/^      _Tp* _M_last;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp *	access:public
std::_Deque_iterator::_M_node	./stl_deque.h	/^      _Map_pointer _M_node;$/;"	kind:member	language:C++	struct:std::_Deque_iterator	typeref:typename:_Map_pointer	access:public
std::_Deque_iterator::_M_set_node	./stl_deque.h	/^      _M_set_node(_Map_pointer __new_node)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:void	access:public	signature:(_Map_pointer __new_node)
std::_Deque_iterator::_Map_pointer	./stl_deque.h	/^      typedef _Tp**                           _Map_pointer;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp **	access:public
std::_Deque_iterator::_S_buffer_size	./stl_deque.h	/^      static size_t _S_buffer_size()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:size_t	access:public	signature:()
std::_Deque_iterator::_Self	./stl_deque.h	/^      typedef _Deque_iterator                 _Self;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator	access:public
std::_Deque_iterator::const_iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator<_Tp,const _Tp &,const _Tp * >	access:public
std::_Deque_iterator::difference_type	./stl_deque.h	/^      typedef ptrdiff_t                       difference_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:ptrdiff_t	access:public
std::_Deque_iterator::iterator	./stl_deque.h	/^      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Deque_iterator<_Tp,_Tp &,_Tp * >	access:public
std::_Deque_iterator::iterator_category	./stl_deque.h	/^      typedef std::random_access_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:std::random_access_iterator_tag	access:public
std::_Deque_iterator::operator *	./stl_deque.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:reference	access:public	signature:() const
std::_Deque_iterator::operator +	./stl_deque.h	/^      operator+(difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator ++	./stl_deque.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Deque_iterator::operator ++	./stl_deque.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Deque_iterator::operator +=	./stl_deque.h	/^      operator+=(difference_type __n)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator -	./stl_deque.h	/^      operator-(difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(difference_type __n) const
std::_Deque_iterator::operator --	./stl_deque.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Deque_iterator::operator --	./stl_deque.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Deque_iterator::operator -=	./stl_deque.h	/^      operator-=(difference_type __n)$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:_Self &	access:public	signature:(difference_type __n)
std::_Deque_iterator::operator ->	./stl_deque.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:pointer	access:public	signature:() const
std::_Deque_iterator::operator []	./stl_deque.h	/^      operator[](difference_type __n) const$/;"	kind:function	language:C++	struct:std::_Deque_iterator	typeref:typename:reference	access:public	signature:(difference_type __n) const
std::_Deque_iterator::pointer	./stl_deque.h	/^      typedef _Ptr                            pointer;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Ptr	access:public
std::_Deque_iterator::reference	./stl_deque.h	/^      typedef _Ref                            reference;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Ref	access:public
std::_Deque_iterator::size_type	./stl_deque.h	/^      typedef size_t                          size_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:size_t	access:public
std::_Deque_iterator::value_type	./stl_deque.h	/^      typedef _Tp                             value_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp	access:public
std::_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator __alloc)
std::_Destroy	./stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp>)
std::_Destroy	./stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __pointer)
std::_Expr	./valarray_after.h	/^    class _Expr$/;"	kind:class	language:C++	namespace:std
std::_Expr::_Expr	./valarray_after.h	/^      _Expr(const _Clos&);$/;"	kind:prototype	language:C++	class:std::_Expr	access:public	signature:(const _Clos &)
std::_Expr::_Expr	./valarray_after.h	/^    _Expr<_Clos, _Tp>::_Expr(const _Clos& __c) : _M_closure(__c) {}$/;"	kind:function	language:C++	class:std::_Expr	signature:(const _Clos & __c)
std::_Expr::_M_closure	./valarray_after.h	/^      const _Clos _M_closure;$/;"	kind:member	language:C++	class:std::_Expr	typeref:typename:const _Clos	access:private
std::_Expr::apply	./valarray_after.h	/^      valarray<value_type> apply(value_type (*)(const value_type&)) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(value_type (*)(const value_type &)) const
std::_Expr::apply	./valarray_after.h	/^      valarray<value_type> apply(value_type (*)(value_type)) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(value_type (*)(value_type)) const
std::_Expr::apply	./valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(_Tp)) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(_Tp __f (_Tp)) const
std::_Expr::apply	./valarray_after.h	/^    _Expr<_Clos, _Tp>::apply(_Tp __f(const _Tp&)) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(_Tp __f (const _Tp &)) const
std::_Expr::cshift	./valarray_after.h	/^      valarray<value_type> cshift(int) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(int) const
std::_Expr::cshift	./valarray_after.h	/^    _Expr<_Clos, _Tp>::cshift(int __n) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(int __n) const
std::_Expr::max	./valarray_after.h	/^      value_type max() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
std::_Expr::max	./valarray_after.h	/^    _Expr<_Clos, _Tp>::max() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
std::_Expr::min	./valarray_after.h	/^      value_type min() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
std::_Expr::min	./valarray_after.h	/^    _Expr<_Clos, _Tp>::min() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
std::_Expr::operator !	./valarray_after.h	/^      operator!() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__logical_not,std::_Expr,_Clos>,bool>	access:public	signature:() const
std::_Expr::operator !	./valarray_after.h	/^    _Expr<_Dom, _Tp>::operator!() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__logical_not,_Expr,_Dom>,bool>	signature:() const
std::_Expr::operator ()	./valarray_after.h	/^      const _Clos& operator()() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:const _Clos &	access:public	signature:() const
std::_Expr::operator ()	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator()() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:const _Clos &	signature:() const
std::_Expr::operator +	./valarray_after.h	/^      operator+() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__unary_plus,std::_Expr,_Clos>,value_type>	access:public	signature:() const
std::_Expr::operator -	./valarray_after.h	/^      operator-() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__negate,std::_Expr,_Clos>,value_type>	access:public	signature:() const
std::_Expr::operator []	./valarray_after.h	/^      valarray<value_type> operator[](const gslice&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const gslice &) const
std::_Expr::operator []	./valarray_after.h	/^      valarray<value_type> operator[](const valarray<bool>&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const valarray<bool> &) const
std::_Expr::operator []	./valarray_after.h	/^      valarray<value_type> operator[](const valarray<size_t>&) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(const valarray<size_t> &) const
std::_Expr::operator []	./valarray_after.h	/^      valarray<value_type> operator[](slice) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(slice) const
std::_Expr::operator []	./valarray_after.h	/^      value_type operator[](size_t) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:(size_t) const
std::_Expr::operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const gslice& __gs) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const gslice & __gs) const
std::_Expr::operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<bool>& __m) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const valarray<bool> & __m) const
std::_Expr::operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](const valarray<size_t>& __i) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(const valarray<size_t> & __i) const
std::_Expr::operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:(size_t __i) const
std::_Expr::operator []	./valarray_after.h	/^    _Expr<_Clos, _Tp>::operator[](slice __s) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(slice __s) const
std::_Expr::operator ~	./valarray_after.h	/^      operator~() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:_Expr<_UnClos<__bitwise_not,std::_Expr,_Clos>,value_type>	access:public	signature:() const
std::_Expr::shift	./valarray_after.h	/^      valarray<value_type> shift(int) const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:valarray<value_type>	access:public	signature:(int) const
std::_Expr::shift	./valarray_after.h	/^    _Expr<_Clos, _Tp>::shift(int __n) const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:valarray<_Tp>	signature:(int __n) const
std::_Expr::size	./valarray_after.h	/^      size_t size() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:size_t	access:public	signature:() const
std::_Expr::size	./valarray_after.h	/^    _Expr<_Clos, _Tp>::size() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:size_t	signature:() const
std::_Expr::sum	./valarray_after.h	/^      value_type sum() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
std::_Expr::sum	./valarray_after.h	/^    _Expr<_Clos, _Tp>::sum() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
std::_Expr::value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_Expr	typeref:typename:_Tp	access:public
std::_FunBase	./valarray_before.h	/^    class _FunBase$/;"	kind:class	language:C++	namespace:std
std::_FunBase::_FunBase	./valarray_before.h	/^      _FunBase(const _Dom& __e, value_type __f(_Arg))$/;"	kind:function	language:C++	class:std::_FunBase	access:public	signature:(const _Dom & __e,value_type __f (_Arg))
std::_FunBase::_M_expr	./valarray_before.h	/^      const _Dom& _M_expr;$/;"	kind:member	language:C++	class:std::_FunBase	typeref:typename:const _Dom &	access:private
std::_FunBase::_M_func	./valarray_before.h	/^      value_type (*_M_func)(_Arg);$/;"	kind:member	language:C++	class:std::_FunBase	typeref:typename:value_type (*)(_Arg)	access:private
std::_FunBase::operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_FunBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_FunBase::size	./valarray_before.h	/^      size_t size() const { return _M_expr.size ();}$/;"	kind:function	language:C++	class:std::_FunBase	typeref:typename:size_t	access:public	signature:() const
std::_FunBase::value_type	./valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_FunBase	typeref:typename:_Dom::value_type	access:public
std::_GBase	./valarray_after.h	/^    class _GBase$/;"	kind:class	language:C++	namespace:std
std::_GBase	./valarray_after.h	/^    class _GBase<_Array<_Tp> >$/;"	kind:class	language:C++	namespace:std
std::_GBase::_GBase	./valarray_after.h	/^      _GBase (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_GBase	access:public	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
std::_GBase::_GBase	./valarray_after.h	/^      _GBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_GBase	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
std::_GBase::_M_array	./valarray_after.h	/^      const _Array<_Tp>       _M_array;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const _Array<_Tp>	access:private
std::_GBase::_M_expr	./valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const _Dom &	access:private
std::_GBase::_M_index	./valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::_GBase	typeref:typename:const valarray<size_t> &	access:private
std::_GBase::operator [] 	./valarray_after.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_GBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_GBase::size	./valarray_after.h	/^      size () const$/;"	kind:function	language:C++	class:std::_GBase	typeref:typename:size_t	access:public	signature:() const
std::_GBase::value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_GBase	typeref:typename:_Tp	access:public
std::_GBase::value_type	./valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_GBase	typeref:typename:_Dom::value_type	access:public
std::_GClos	./valarray_after.h	/^    struct _GClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_GBase<_Dom>
std::_GClos	./valarray_after.h	/^    struct _GClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_GBase<_Array<_Tp>>
std::_GClos::_Base	./valarray_after.h	/^      typedef _GBase<_Array<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_GBase<_Array<_Tp>>	access:public
std::_GClos::_Base	./valarray_after.h	/^      typedef _GBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_GBase<_Dom>	access:public
std::_GClos::_GClos	./valarray_after.h	/^      _GClos (_Array<_Tp> __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_GClos	access:public	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
std::_GClos::_GClos	./valarray_after.h	/^      _GClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_GClos	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
std::_GClos::value_type	./valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_Base::value_type	access:public
std::_IBase	./valarray_after.h	/^    class _IBase$/;"	kind:class	language:C++	namespace:std
std::_IBase::_IBase	./valarray_after.h	/^      _IBase (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	class:std::_IBase	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
std::_IBase::_M_expr	./valarray_after.h	/^      const _Dom&	      _M_expr;$/;"	kind:member	language:C++	class:std::_IBase	typeref:typename:const _Dom &	access:private
std::_IBase::_M_index	./valarray_after.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::_IBase	typeref:typename:const valarray<size_t> &	access:private
std::_IBase::operator [] 	./valarray_after.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_IBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_IBase::size	./valarray_after.h	/^      size() const$/;"	kind:function	language:C++	class:std::_IBase	typeref:typename:size_t	access:public	signature:() const
std::_IBase::value_type	./valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_IBase	typeref:typename:_Dom::value_type	access:public
std::_IClos	./valarray_after.h	/^    struct _IClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_IBase<_Dom>
std::_IClos	./valarray_after.h	/^    struct _IClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_IBase<valarray<_Tp>>
std::_IClos::_Base	./valarray_after.h	/^      typedef _IBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_IBase<_Dom>	access:public
std::_IClos::_Base	./valarray_after.h	/^      typedef _IBase<valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_IBase<valarray<_Tp>>	access:public
std::_IClos::_IClos	./valarray_after.h	/^      _IClos (const _Dom& __e, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_IClos	access:public	signature:(const _Dom & __e,const valarray<size_t> & __i)
std::_IClos::_IClos	./valarray_after.h	/^      _IClos (const valarray<_Tp>& __a, const valarray<size_t>& __i)$/;"	kind:function	language:C++	struct:std::_IClos	access:public	signature:(const valarray<_Tp> & __a,const valarray<size_t> & __i)
std::_IClos::value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_Tp	access:public
std::_IClos::value_type	./valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_Base::value_type	access:public
std::_Identity	./stl_function.h	/^    struct _Identity : public unary_function<_Tp,_Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,_Tp>
std::_Identity::operator ()	./stl_function.h	/^      operator()(_Tp& __x) const$/;"	kind:function	language:C++	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
std::_Identity::operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
std::_Ios_Fmtflags	./ios_base.h	/^  enum _Ios_Fmtflags $/;"	kind:enum	language:C++	namespace:std
std::_Ios_Iostate	./ios_base.h	/^  enum _Ios_Iostate$/;"	kind:enum	language:C++	namespace:std
std::_Ios_Openmode	./ios_base.h	/^  enum _Ios_Openmode $/;"	kind:enum	language:C++	namespace:std
std::_Ios_Seekdir	./ios_base.h	/^  enum _Ios_Seekdir $/;"	kind:enum	language:C++	namespace:std
std::_List_base	./stl_list.h	/^    class _List_base$/;"	kind:class	language:C++	namespace:std
std::_List_base::_List_base	./stl_list.h	/^      _List_base(const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_List_base	access:public	signature:(const allocator_type & __a)
std::_List_base::_List_impl	./stl_list.h	/^      struct _List_impl $/;"	kind:struct	language:C++	class:std::_List_base	inherits:_Node_alloc_type	access:protected
std::_List_base::_List_impl::_List_impl	./stl_list.h	/^	_List_impl(const _Node_alloc_type& __a)$/;"	kind:function	language:C++	struct:std::_List_base::_List_impl	access:public	signature:(const _Node_alloc_type & __a)
std::_List_base::_List_impl::_M_node	./stl_list.h	/^	_List_node_base _M_node;$/;"	kind:member	language:C++	struct:std::_List_base::_List_impl	typeref:typename:_List_node_base	access:public
std::_List_base::_M_clear	./stl_list.h	/^      _M_clear();$/;"	kind:prototype	language:C++	class:std::_List_base	typeref:typename:void	access:public	signature:()
std::_List_base::_M_get_Node_allocator	./stl_list.h	/^      _M_get_Node_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:const _Node_alloc_type &	access:public	signature:() const
std::_List_base::_M_get_Node_allocator	./stl_list.h	/^      _M_get_Node_allocator()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_Node_alloc_type &	access:public	signature:()
std::_List_base::_M_get_Tp_allocator	./stl_list.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_Tp_alloc_type	access:public	signature:() const
std::_List_base::_M_get_node	./stl_list.h	/^      _M_get_node()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:_List_node<_Tp> *	access:protected	signature:()
std::_List_base::_M_impl	./stl_list.h	/^      _List_impl _M_impl;$/;"	kind:member	language:C++	class:std::_List_base	typeref:typename:_List_impl	access:protected
std::_List_base::_M_init	./stl_list.h	/^      _M_init()$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:void	access:public	signature:()
std::_List_base::_M_put_node	./stl_list.h	/^      _M_put_node(_List_node<_Tp>* __p)$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:void	access:protected	signature:(_List_node<_Tp> * __p)
std::_List_base::_Node_alloc_type	./stl_list.h	/^        _Node_alloc_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc::template rebind<_List_node<_Tp>>::other	access:protected
std::_List_base::_Tp_alloc_type	./stl_list.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:protected
std::_List_base::allocator_type	./stl_list.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	class:std::_List_base	typeref:typename:_Alloc	access:public
std::_List_base::get_allocator	./stl_list.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_List_base	typeref:typename:allocator_type	access:public	signature:() const
std::_List_base::~_List_base	./stl_list.h	/^      ~_List_base()$/;"	kind:function	language:C++	class:std::_List_base	access:public	signature:()
std::_List_const_iterator	./stl_list.h	/^    struct _List_const_iterator$/;"	kind:struct	language:C++	namespace:std
std::_List_const_iterator::_List_const_iterator	./stl_list.h	/^      _List_const_iterator()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:()
std::_List_const_iterator::_List_const_iterator	./stl_list.h	/^      _List_const_iterator(const _List_node_base* __x)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:(const _List_node_base * __x)
std::_List_const_iterator::_List_const_iterator	./stl_list.h	/^      _List_const_iterator(const iterator& __x)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	access:public	signature:(const iterator & __x)
std::_List_const_iterator::_M_node	./stl_list.h	/^      const _List_node_base* _M_node;$/;"	kind:member	language:C++	struct:std::_List_const_iterator	typeref:typename:const _List_node_base *	access:public
std::_List_const_iterator::_Node	./stl_list.h	/^      typedef const _List_node<_Tp>              _Node;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _List_node<_Tp>	access:public
std::_List_const_iterator::_Self	./stl_list.h	/^      typedef _List_const_iterator<_Tp>          _Self;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_List_const_iterator<_Tp>	access:public
std::_List_const_iterator::difference_type	./stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:ptrdiff_t	access:public
std::_List_const_iterator::iterator	./stl_list.h	/^      typedef _List_iterator<_Tp>                iterator;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_List_iterator<_Tp>	access:public
std::_List_const_iterator::iterator_category	./stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:std::bidirectional_iterator_tag	access:public
std::_List_const_iterator::operator !=	./stl_list.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_List_const_iterator::operator *	./stl_list.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:reference	access:public	signature:() const
std::_List_const_iterator::operator ++	./stl_list.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self &	access:public	signature:()
std::_List_const_iterator::operator ++	./stl_list.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_List_const_iterator::operator --	./stl_list.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self &	access:public	signature:()
std::_List_const_iterator::operator --	./stl_list.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_List_const_iterator::operator ->	./stl_list.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:pointer	access:public	signature:() const
std::_List_const_iterator::operator ==	./stl_list.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_List_const_iterator::pointer	./stl_list.h	/^      typedef const _Tp*                         pointer;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _Tp *	access:public
std::_List_const_iterator::reference	./stl_list.h	/^      typedef const _Tp&                         reference;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:const _Tp &	access:public
std::_List_const_iterator::value_type	./stl_list.h	/^      typedef _Tp                                value_type;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_Tp	access:public
std::_List_iterator	./stl_list.h	/^    struct _List_iterator$/;"	kind:struct	language:C++	namespace:std
std::_List_iterator::_List_iterator	./stl_list.h	/^      _List_iterator()$/;"	kind:function	language:C++	struct:std::_List_iterator	access:public	signature:()
std::_List_iterator::_List_iterator	./stl_list.h	/^      _List_iterator(_List_node_base* __x)$/;"	kind:function	language:C++	struct:std::_List_iterator	access:public	signature:(_List_node_base * __x)
std::_List_iterator::_M_node	./stl_list.h	/^      _List_node_base* _M_node;$/;"	kind:member	language:C++	struct:std::_List_iterator	typeref:typename:_List_node_base *	access:public
std::_List_iterator::_Node	./stl_list.h	/^      typedef _List_node<_Tp>                    _Node;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_List_node<_Tp>	access:public
std::_List_iterator::_Self	./stl_list.h	/^      typedef _List_iterator<_Tp>                _Self;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_List_iterator<_Tp>	access:public
std::_List_iterator::difference_type	./stl_list.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:ptrdiff_t	access:public
std::_List_iterator::iterator_category	./stl_list.h	/^      typedef std::bidirectional_iterator_tag    iterator_category;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:std::bidirectional_iterator_tag	access:public
std::_List_iterator::operator !=	./stl_list.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_List_iterator::operator *	./stl_list.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:reference	access:public	signature:() const
std::_List_iterator::operator ++	./stl_list.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self &	access:public	signature:()
std::_List_iterator::operator ++	./stl_list.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_List_iterator::operator --	./stl_list.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self &	access:public	signature:()
std::_List_iterator::operator --	./stl_list.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_List_iterator::operator ->	./stl_list.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:pointer	access:public	signature:() const
std::_List_iterator::operator ==	./stl_list.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_List_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_List_iterator::pointer	./stl_list.h	/^      typedef _Tp*                               pointer;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp *	access:public
std::_List_iterator::reference	./stl_list.h	/^      typedef _Tp&                               reference;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp &	access:public
std::_List_iterator::value_type	./stl_list.h	/^      typedef _Tp                                value_type;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp	access:public
std::_List_node	./stl_list.h	/^    struct _List_node : public _List_node_base$/;"	kind:struct	language:C++	namespace:std	inherits:_List_node_base
std::_List_node::_M_data	./stl_list.h	/^      _Tp _M_data;                \/\/\/< User's data.$/;"	kind:member	language:C++	struct:std::_List_node	typeref:typename:_Tp	access:public
std::_List_node_base	./stl_list.h	/^  struct _List_node_base$/;"	kind:struct	language:C++	namespace:std
std::_List_node_base::_M_next	./stl_list.h	/^    _List_node_base* _M_next;   \/\/\/< Self-explanatory$/;"	kind:member	language:C++	struct:std::_List_node_base	typeref:typename:_List_node_base *	access:public
std::_List_node_base::_M_prev	./stl_list.h	/^    _List_node_base* _M_prev;   \/\/\/< Self-explanatory$/;"	kind:member	language:C++	struct:std::_List_node_base	typeref:typename:_List_node_base *	access:public
std::_List_node_base::hook	./stl_list.h	/^    hook(_List_node_base * const __position);$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base * const __position)
std::_List_node_base::reverse	./stl_list.h	/^    reverse();$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:()
std::_List_node_base::swap	./stl_list.h	/^    swap(_List_node_base& __x, _List_node_base& __y);$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base & __x,_List_node_base & __y)
std::_List_node_base::transfer	./stl_list.h	/^    transfer(_List_node_base * const __first,$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base * const __first,_List_node_base * const __last)
std::_List_node_base::unhook	./stl_list.h	/^    unhook();$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:()
std::_Rb_tree	./stl_tree.h	/^    class _Rb_tree$/;"	kind:class	language:C++	namespace:std
std::_Rb_tree::_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base* _Base_ptr;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node_base *	access:protected
std::_Rb_tree::_Const_Base_ptr	./stl_tree.h	/^      typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const _Rb_tree_node_base *	access:protected
std::_Rb_tree::_Const_Link_type	./stl_tree.h	/^      typedef const _Rb_tree_node* _Const_Link_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const _Rb_tree_node *	access:public
std::_Rb_tree::_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node* _Link_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node *	access:public
std::_Rb_tree::_M_begin	./stl_tree.h	/^      _M_begin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:() const
std::_Rb_tree::_M_begin	./stl_tree.h	/^      _M_begin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:()
std::_Rb_tree::_M_clone_node	./stl_tree.h	/^      _M_clone_node(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::_M_copy	./stl_tree.h	/^      _M_copy(_Const_Link_type __x, _Link_type __p);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:private	signature:(_Const_Link_type __x,_Link_type __p)
std::_Rb_tree::_M_copy	./stl_tree.h	/^    _M_copy(_Const_Link_type __x, _Link_type __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KoV,_Compare,_Alloc>::_Link_type	signature:(_Const_Link_type __x,_Link_type __p)
std::_Rb_tree::_M_create_node	./stl_tree.h	/^      _M_create_node(const value_type& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(const value_type & __x)
std::_Rb_tree::_M_destroy_node	./stl_tree.h	/^      _M_destroy_node(_Link_type __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:protected	signature:(_Link_type __p)
std::_Rb_tree::_M_end	./stl_tree.h	/^      _M_end() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:() const
std::_Rb_tree::_M_end	./stl_tree.h	/^      _M_end()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:()
std::_Rb_tree::_M_erase	./stl_tree.h	/^      _M_erase(_Link_type __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:private	signature:(_Link_type __x)
std::_Rb_tree::_M_erase	./stl_tree.h	/^    _M_erase(_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_Link_type __x)
std::_Rb_tree::_M_get_Node_allocator	./stl_tree.h	/^      _M_get_Node_allocator() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Node_allocator &	access:public	signature:() const
std::_Rb_tree::_M_get_Node_allocator	./stl_tree.h	/^      _M_get_Node_allocator()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Node_allocator &	access:public	signature:()
std::_Rb_tree::_M_get_node	./stl_tree.h	/^      _M_get_node()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node *	access:protected	signature:()
std::_Rb_tree::_M_impl	./stl_tree.h	/^      _Rb_tree_impl<_Compare> _M_impl;$/;"	kind:member	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_impl<_Compare>	access:protected
std::_Rb_tree::_M_insert	./stl_tree.h	/^      _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:private	signature:(_Base_ptr __x,_Base_ptr __y,const value_type & __v)
std::_Rb_tree::_M_insert	./stl_tree.h	/^      _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:private	signature:(_Const_Base_ptr __x,_Const_Base_ptr __y,const value_type & __v)
std::_Rb_tree::_M_insert	./stl_tree.h	/^    _M_insert(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(_Base_ptr __x,_Base_ptr __p,const _Val & __v)
std::_Rb_tree::_M_insert	./stl_tree.h	/^    _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(_Const_Base_ptr __x,_Const_Base_ptr __p,const _Val & __v)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^        _M_insert_equal(_InputIterator __first, _InputIterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(_II __first, _II __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_II __first,_II __last)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const value_type & __x)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(const_iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const_iterator __position,const value_type & __x)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^      _M_insert_equal(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Val & __v)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(const_iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const_iterator __position,const _Val & __v)
std::_Rb_tree::_M_insert_equal	./stl_tree.h	/^    _M_insert_equal(iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(iterator __position,const _Val & __v)
std::_Rb_tree::_M_insert_equal_lower	./stl_tree.h	/^      _M_insert_equal_lower(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const value_type & __x)
std::_Rb_tree::_M_insert_equal_lower	./stl_tree.h	/^    _M_insert_equal_lower(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Val & __v)
std::_Rb_tree::_M_insert_lower	./stl_tree.h	/^      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:private	signature:(_Base_ptr __x,_Base_ptr __y,const value_type & __v)
std::_Rb_tree::_M_insert_lower	./stl_tree.h	/^    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(_Base_ptr __x,_Base_ptr __p,const _Val & __v)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^        _M_insert_unique(_InputIterator __first, _InputIterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(_II __first, _II __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_II __first,_II __last)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<iterator,bool>	access:public	signature:(const value_type & __x)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(const_iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const_iterator __position,const value_type & __x)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^      _M_insert_unique(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:pair<typename _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator,bool>	signature:(const _Val & __v)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(const_iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const_iterator __position,const _Val & __v)
std::_Rb_tree::_M_insert_unique	./stl_tree.h	/^    _M_insert_unique(iterator __position, const _Val& __v)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(iterator __position,const _Val & __v)
std::_Rb_tree::_M_leftmost	./stl_tree.h	/^      _M_leftmost() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
std::_Rb_tree::_M_leftmost	./stl_tree.h	/^      _M_leftmost()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
std::_Rb_tree::_M_put_node	./stl_tree.h	/^      _M_put_node(_Rb_tree_node* __p)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:protected	signature:(_Rb_tree_node * __p)
std::_Rb_tree::_M_rightmost	./stl_tree.h	/^      _M_rightmost() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
std::_Rb_tree::_M_rightmost	./stl_tree.h	/^      _M_rightmost()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
std::_Rb_tree::_M_root	./stl_tree.h	/^      _M_root() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:() const
std::_Rb_tree::_M_root	./stl_tree.h	/^      _M_root()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr &	access:protected	signature:()
std::_Rb_tree::_Node_allocator	./stl_tree.h	/^              _Node_allocator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Alloc::template rebind<_Rb_tree_node<_Val>>::other	access:private
std::_Rb_tree::_Rb_tree	./stl_tree.h	/^      _Rb_tree()$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree::_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Compare& __comp)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Compare & __comp)
std::_Rb_tree::_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Compare& __comp, const allocator_type& __a)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Compare & __comp,const allocator_type & __a)
std::_Rb_tree::_Rb_tree	./stl_tree.h	/^      _Rb_tree(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
std::_Rb_tree::_Rb_tree_impl	./stl_tree.h	/^        struct _Rb_tree_impl : public _Node_allocator$/;"	kind:struct	language:C++	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
std::_Rb_tree::_Rb_tree_impl	./stl_tree.h	/^        struct _Rb_tree_impl<_Key_compare, true> : public _Node_allocator $/;"	kind:struct	language:C++	class:std::_Rb_tree	inherits:_Node_allocator	access:protected
std::_Rb_tree::_Rb_tree_impl::_M_header	./stl_tree.h	/^	  _Rb_tree_node_base 	_M_header;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Rb_tree_node_base	access:public
std::_Rb_tree::_Rb_tree_impl::_M_key_compare	./stl_tree.h	/^	  _Key_compare		_M_key_compare;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Key_compare	access:public
std::_Rb_tree::_Rb_tree_impl::_M_key_compare	./stl_tree.h	/^	  _Key_compare 		_M_key_compare;$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:_Key_compare	access:public
std::_Rb_tree::_Rb_tree_impl::_M_node_count	./stl_tree.h	/^	  size_type 		_M_node_count; \/\/ Keeps track of size of tree.$/;"	kind:member	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	typeref:typename:size_type	access:public
std::_Rb_tree::_Rb_tree_impl::_Rb_tree_impl	./stl_tree.h	/^	  _Rb_tree_impl(const _Node_allocator& __a = _Node_allocator(),$/;"	kind:function	language:C++	struct:std::_Rb_tree::_Rb_tree_impl	access:public	signature:(const _Node_allocator & __a=_Node_allocator (),const _Key_compare & __comp=_Key_compare ())
std::_Rb_tree::_Rb_tree_node	./stl_tree.h	/^      typedef _Rb_tree_node<_Val> _Rb_tree_node;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_node<_Val>	access:protected
std::_Rb_tree::_S_key	./stl_tree.h	/^      _S_key(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Key &	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_key	./stl_tree.h	/^      _S_key(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const _Key &	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::_S_left	./stl_tree.h	/^      _S_left(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_left	./stl_tree.h	/^      _S_left(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_maximum	./stl_tree.h	/^      _S_maximum(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_maximum	./stl_tree.h	/^      _S_maximum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_minimum	./stl_tree.h	/^      _S_minimum(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Base_ptr	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_minimum	./stl_tree.h	/^      _S_minimum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Base_ptr	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_right	./stl_tree.h	/^      _S_right(_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Link_type	access:protected	signature:(_Base_ptr __x)
std::_Rb_tree::_S_right	./stl_tree.h	/^      _S_right(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Const_Link_type	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_value	./stl_tree.h	/^      _S_value(_Const_Base_ptr __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reference	access:protected	signature:(_Const_Base_ptr __x)
std::_Rb_tree::_S_value	./stl_tree.h	/^      _S_value(_Const_Link_type __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reference	access:protected	signature:(_Const_Link_type __x)
std::_Rb_tree::__rb_verify	./stl_tree.h	/^      __rb_verify() const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:bool	access:public	signature:() const
std::_Rb_tree::__rb_verify	./stl_tree.h	/^    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:bool	signature:() const
std::_Rb_tree::allocator_type	./stl_tree.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Alloc	access:public
std::_Rb_tree::begin	./stl_tree.h	/^      begin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:() const
std::_Rb_tree::begin	./stl_tree.h	/^      begin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:()
std::_Rb_tree::clear	./stl_tree.h	/^      clear()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:()
std::_Rb_tree::const_iterator	./stl_tree.h	/^      typedef _Rb_tree_const_iterator<value_type> const_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_const_iterator<value_type>	access:public
std::_Rb_tree::const_pointer	./stl_tree.h	/^      typedef const value_type* const_pointer;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const value_type *	access:public
std::_Rb_tree::const_reference	./stl_tree.h	/^      typedef const value_type& const_reference;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:const value_type &	access:public
std::_Rb_tree::const_reverse_iterator	./stl_tree.h	/^      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::_Rb_tree::count	./stl_tree.h	/^      count(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
std::_Rb_tree::count	./stl_tree.h	/^    count(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type	signature:(const _Key & __k) const
std::_Rb_tree::difference_type	./stl_tree.h	/^      typedef ptrdiff_t difference_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:ptrdiff_t	access:public
std::_Rb_tree::empty	./stl_tree.h	/^      empty() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:bool	access:public	signature:() const
std::_Rb_tree::end	./stl_tree.h	/^      end() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:() const
std::_Rb_tree::end	./stl_tree.h	/^      end()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:()
std::_Rb_tree::equal_range	./stl_tree.h	/^      equal_range(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
std::_Rb_tree::equal_range	./stl_tree.h	/^      equal_range(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:pair<iterator,iterator>	access:public	signature:(const key_type & __x)
std::_Rb_tree::equal_range	./stl_tree.h	/^    equal_range(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	signature:(const _Key & __k) const
std::_Rb_tree::equal_range	./stl_tree.h	/^    equal_range(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	signature:(const _Key & __k)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:(const key_type & __x)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(const key_type* __first, const key_type* __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const key_type * __first,const key_type * __last)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(const_iterator __first, const_iterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const_iterator __first,const_iterator __last)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(const_iterator __position);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(const_iterator __position)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
std::_Rb_tree::erase	./stl_tree.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(iterator __position)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(const _Key& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::size_type	signature:(const _Key & __x)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(const _Key* __first, const _Key* __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const _Key * __first,const _Key * __last)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(const_iterator __first, const_iterator __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const_iterator __first,const_iterator __last)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(const_iterator __position)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(const_iterator __position)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(iterator __first,iterator __last)
std::_Rb_tree::erase	./stl_tree.h	/^    erase(iterator __position)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(iterator __position)
std::_Rb_tree::find	./stl_tree.h	/^      find(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::_Rb_tree::find	./stl_tree.h	/^      find(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::_Rb_tree::find	./stl_tree.h	/^    find(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
std::_Rb_tree::find	./stl_tree.h	/^    find(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
std::_Rb_tree::get_allocator	./stl_tree.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:allocator_type	access:public	signature:() const
std::_Rb_tree::iterator	./stl_tree.h	/^      typedef _Rb_tree_iterator<value_type>       iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree_iterator<value_type>	access:public
std::_Rb_tree::key_comp	./stl_tree.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Compare	access:public	signature:() const
std::_Rb_tree::key_type	./stl_tree.h	/^      typedef _Key key_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Key	access:public
std::_Rb_tree::lower_bound	./stl_tree.h	/^      lower_bound(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::_Rb_tree::lower_bound	./stl_tree.h	/^      lower_bound(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::_Rb_tree::lower_bound	./stl_tree.h	/^    lower_bound(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
std::_Rb_tree::lower_bound	./stl_tree.h	/^    lower_bound(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
std::_Rb_tree::max_size	./stl_tree.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:() const
std::_Rb_tree::operator =	./stl_tree.h	/^      operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> &	access:public	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
std::_Rb_tree::operator =	./stl_tree.h	/^    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> &	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x)
std::_Rb_tree::pointer	./stl_tree.h	/^      typedef value_type* pointer;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:value_type *	access:public
std::_Rb_tree::rbegin	./stl_tree.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::_Rb_tree::rbegin	./stl_tree.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:reverse_iterator	access:public	signature:()
std::_Rb_tree::reference	./stl_tree.h	/^      typedef value_type& reference;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:value_type &	access:public
std::_Rb_tree::rend	./stl_tree.h	/^      rend() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::_Rb_tree::rend	./stl_tree.h	/^      rend()$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:reverse_iterator	access:public	signature:()
std::_Rb_tree::reverse_iterator	./stl_tree.h	/^      typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:std::reverse_iterator<iterator>	access:public
std::_Rb_tree::size	./stl_tree.h	/^      size() const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:size_type	access:public	signature:() const
std::_Rb_tree::size_type	./stl_tree.h	/^      typedef size_t size_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:size_t	access:public
std::_Rb_tree::swap	./stl_tree.h	/^      swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __t)
std::_Rb_tree::swap	./stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __t)
std::_Rb_tree::upper_bound	./stl_tree.h	/^      upper_bound(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::_Rb_tree::upper_bound	./stl_tree.h	/^      upper_bound(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::_Rb_tree::upper_bound	./stl_tree.h	/^    upper_bound(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
std::_Rb_tree::upper_bound	./stl_tree.h	/^    upper_bound(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
std::_Rb_tree::value_type	./stl_tree.h	/^      typedef _Val value_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Val	access:public
std::_Rb_tree::~_Rb_tree	./stl_tree.h	/^      ~_Rb_tree()$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:()
std::_Rb_tree_black_count	./stl_tree.h	/^  _Rb_tree_black_count(const _Rb_tree_node_base* __node,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:unsigned int	signature:(const _Rb_tree_node_base * __node,const _Rb_tree_node_base * __root)
std::_Rb_tree_color	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enum	language:C++	namespace:std
std::_Rb_tree_const_iterator	./stl_tree.h	/^    struct _Rb_tree_const_iterator$/;"	kind:struct	language:C++	namespace:std
std::_Rb_tree_const_iterator::_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_node_base::_Const_Base_ptr	access:public
std::_Rb_tree_const_iterator::_Link_type	./stl_tree.h	/^      typedef const _Rb_tree_node<_Tp>*           _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Rb_tree_node<_Tp> *	access:public
std::_Rb_tree_const_iterator::_M_node	./stl_tree.h	/^      _Base_ptr _M_node;$/;"	kind:member	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Base_ptr	access:public
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:()
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator(_Link_type __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:(_Link_type __x)
std::_Rb_tree_const_iterator::_Rb_tree_const_iterator	./stl_tree.h	/^      _Rb_tree_const_iterator(const iterator& __it)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	access:public	signature:(const iterator & __it)
std::_Rb_tree_const_iterator::_Self	./stl_tree.h	/^      typedef _Rb_tree_const_iterator<_Tp>        _Self;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_const_iterator<_Tp>	access:public
std::_Rb_tree_const_iterator::difference_type	./stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:ptrdiff_t	access:public
std::_Rb_tree_const_iterator::iterator	./stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp> iterator;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Rb_tree_iterator<_Tp>	access:public
std::_Rb_tree_const_iterator::iterator_category	./stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bidirectional_iterator_tag	access:public
std::_Rb_tree_const_iterator::operator !=	./stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_Rb_tree_const_iterator::operator *	./stl_tree.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:reference	access:public	signature:() const
std::_Rb_tree_const_iterator::operator ++	./stl_tree.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Rb_tree_const_iterator::operator ++	./stl_tree.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Rb_tree_const_iterator::operator --	./stl_tree.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Rb_tree_const_iterator::operator --	./stl_tree.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Rb_tree_const_iterator::operator ->	./stl_tree.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:pointer	access:public	signature:() const
std::_Rb_tree_const_iterator::operator ==	./stl_tree.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_Rb_tree_const_iterator::pointer	./stl_tree.h	/^      typedef const _Tp* pointer;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Tp *	access:public
std::_Rb_tree_const_iterator::reference	./stl_tree.h	/^      typedef const _Tp& reference;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:const _Tp &	access:public
std::_Rb_tree_const_iterator::value_type	./stl_tree.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Tp	access:public
std::_Rb_tree_decrement	./stl_tree.h	/^  _Rb_tree_decrement(_Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * __x)
std::_Rb_tree_decrement	./stl_tree.h	/^  _Rb_tree_decrement(const _Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Rb_tree_node_base *	signature:(const _Rb_tree_node_base * __x)
std::_Rb_tree_increment	./stl_tree.h	/^  _Rb_tree_increment(_Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * __x)
std::_Rb_tree_increment	./stl_tree.h	/^  _Rb_tree_increment(const _Rb_tree_node_base* __x);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Rb_tree_node_base *	signature:(const _Rb_tree_node_base * __x)
std::_Rb_tree_insert_and_rebalance	./stl_tree.h	/^  _Rb_tree_insert_and_rebalance(const bool __insert_left,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const bool __insert_left,_Rb_tree_node_base * __x,_Rb_tree_node_base * __p,_Rb_tree_node_base & __header)
std::_Rb_tree_iterator	./stl_tree.h	/^    struct _Rb_tree_iterator$/;"	kind:struct	language:C++	namespace:std
std::_Rb_tree_iterator::_Base_ptr	./stl_tree.h	/^      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_node_base::_Base_ptr	access:public
std::_Rb_tree_iterator::_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node<_Tp>*           _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_node<_Tp> *	access:public
std::_Rb_tree_iterator::_M_node	./stl_tree.h	/^      _Base_ptr _M_node;$/;"	kind:member	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Base_ptr	access:public
std::_Rb_tree_iterator::_Rb_tree_iterator	./stl_tree.h	/^      _Rb_tree_iterator()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	access:public	signature:()
std::_Rb_tree_iterator::_Rb_tree_iterator	./stl_tree.h	/^      _Rb_tree_iterator(_Link_type __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	access:public	signature:(_Link_type __x)
std::_Rb_tree_iterator::_Self	./stl_tree.h	/^      typedef _Rb_tree_iterator<_Tp>        _Self;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Rb_tree_iterator<_Tp>	access:public
std::_Rb_tree_iterator::difference_type	./stl_tree.h	/^      typedef ptrdiff_t                  difference_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:ptrdiff_t	access:public
std::_Rb_tree_iterator::iterator_category	./stl_tree.h	/^      typedef bidirectional_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bidirectional_iterator_tag	access:public
std::_Rb_tree_iterator::operator !=	./stl_tree.h	/^      operator!=(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_Rb_tree_iterator::operator *	./stl_tree.h	/^      operator*() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:reference	access:public	signature:() const
std::_Rb_tree_iterator::operator ++	./stl_tree.h	/^      operator++()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Rb_tree_iterator::operator ++	./stl_tree.h	/^      operator++(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Rb_tree_iterator::operator --	./stl_tree.h	/^      operator--()$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self &	access:public	signature:()
std::_Rb_tree_iterator::operator --	./stl_tree.h	/^      operator--(int)$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Self	access:public	signature:(int)
std::_Rb_tree_iterator::operator ->	./stl_tree.h	/^      operator->() const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:pointer	access:public	signature:() const
std::_Rb_tree_iterator::operator ==	./stl_tree.h	/^      operator==(const _Self& __x) const$/;"	kind:function	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:bool	access:public	signature:(const _Self & __x) const
std::_Rb_tree_iterator::pointer	./stl_tree.h	/^      typedef _Tp* pointer;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp *	access:public
std::_Rb_tree_iterator::reference	./stl_tree.h	/^      typedef _Tp& reference;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp &	access:public
std::_Rb_tree_iterator::value_type	./stl_tree.h	/^      typedef _Tp  value_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp	access:public
std::_Rb_tree_node	./stl_tree.h	/^    struct _Rb_tree_node : public _Rb_tree_node_base$/;"	kind:struct	language:C++	namespace:std	inherits:_Rb_tree_node_base
std::_Rb_tree_node::_Link_type	./stl_tree.h	/^      typedef _Rb_tree_node<_Val>* _Link_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node	typeref:typename:_Rb_tree_node<_Val> *	access:public
std::_Rb_tree_node::_M_value_field	./stl_tree.h	/^      _Val _M_value_field;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node	typeref:typename:_Val	access:public
std::_Rb_tree_node_base	./stl_tree.h	/^  struct _Rb_tree_node_base$/;"	kind:struct	language:C++	namespace:std
std::_Rb_tree_node_base::_Base_ptr	./stl_tree.h	/^    typedef _Rb_tree_node_base* _Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Rb_tree_node_base *	access:public
std::_Rb_tree_node_base::_Const_Base_ptr	./stl_tree.h	/^    typedef const _Rb_tree_node_base* _Const_Base_ptr;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:const _Rb_tree_node_base *	access:public
std::_Rb_tree_node_base::_M_color	./stl_tree.h	/^    _Rb_tree_color	_M_color;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Rb_tree_color	access:public
std::_Rb_tree_node_base::_M_left	./stl_tree.h	/^    _Base_ptr		_M_left;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
std::_Rb_tree_node_base::_M_parent	./stl_tree.h	/^    _Base_ptr		_M_parent;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
std::_Rb_tree_node_base::_M_right	./stl_tree.h	/^    _Base_ptr		_M_right;$/;"	kind:member	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public
std::_Rb_tree_node_base::_S_maximum	./stl_tree.h	/^    _S_maximum(_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_node_base::_S_maximum	./stl_tree.h	/^    _S_maximum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Const_Base_ptr	access:public	signature:(_Const_Base_ptr __x)
std::_Rb_tree_node_base::_S_minimum	./stl_tree.h	/^    _S_minimum(_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Base_ptr	access:public	signature:(_Base_ptr __x)
std::_Rb_tree_node_base::_S_minimum	./stl_tree.h	/^    _S_minimum(_Const_Base_ptr __x)$/;"	kind:function	language:C++	struct:std::_Rb_tree_node_base	typeref:typename:_Const_Base_ptr	access:public	signature:(_Const_Base_ptr __x)
std::_Rb_tree_rebalance_for_erase	./stl_tree.h	/^  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_Rb_tree_node_base *	signature:(_Rb_tree_node_base * const __z,_Rb_tree_node_base & __header)
std::_Rb_tree_rotate_left	./stl_tree.h	/^  _Rb_tree_rotate_left(_Rb_tree_node_base* const __x,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree_node_base * const __x,_Rb_tree_node_base * & __root)
std::_Rb_tree_rotate_right	./stl_tree.h	/^  _Rb_tree_rotate_right(_Rb_tree_node_base* const __x,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree_node_base * const __x,_Rb_tree_node_base * & __root)
std::_RefFunClos	./valarray_before.h	/^    struct _RefFunClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<_Dom,consttypename_Dom::value_type&>
std::_RefFunClos	./valarray_before.h	/^    struct _RefFunClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<valarray<_Tp>,const_Tp&>
std::_RefFunClos::_Base	./valarray_before.h	/^      typedef _FunBase<_Dom, const typename _Dom::value_type&> _Base;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_FunBase<_Dom,const typename _Dom::value_type &>	access:public
std::_RefFunClos::_Base	./valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, const _Tp&> _Base;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_FunBase<valarray<_Tp>,const _Tp &>	access:public
std::_RefFunClos::_RefFunClos	./valarray_before.h	/^      _RefFunClos(const _Dom& __e, _Tp __f(const _Tp&))$/;"	kind:function	language:C++	struct:std::_RefFunClos	access:public	signature:(const _Dom & __e,_Tp __f (const _Tp &))
std::_RefFunClos::_RefFunClos	./valarray_before.h	/^      _RefFunClos(const valarray<_Tp>& __v, _Tp __f(const _Tp&))$/;"	kind:function	language:C++	struct:std::_RefFunClos	access:public	signature:(const valarray<_Tp> & __v,_Tp __f (const _Tp &))
std::_RefFunClos::_Tp	./valarray_before.h	/^      typedef value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:value_type	access:public
std::_RefFunClos::value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_Tp	access:public
std::_RefFunClos::value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_Base::value_type	access:public
std::_SBase	./valarray_before.h	/^    class _SBase$/;"	kind:class	language:C++	namespace:std
std::_SBase	./valarray_before.h	/^    class _SBase<_Array<_Tp> >$/;"	kind:class	language:C++	namespace:std
std::_SBase::_M_array	./valarray_before.h	/^      const _Array<_Tp> _M_array;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const _Array<_Tp>	access:private
std::_SBase::_M_expr	./valarray_before.h	/^      const _Dom& _M_expr;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const _Dom &	access:private
std::_SBase::_M_size	./valarray_before.h	/^      const size_t _M_size;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const size_t	access:private
std::_SBase::_M_slice	./valarray_before.h	/^      const slice& _M_slice;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const slice &	access:private
std::_SBase::_M_stride	./valarray_before.h	/^      const size_t _M_stride;$/;"	kind:member	language:C++	class:std::_SBase	typeref:typename:const size_t	access:private
std::_SBase::_SBase	./valarray_before.h	/^      _SBase (_Array<_Tp> __a, const slice& __s)$/;"	kind:function	language:C++	class:std::_SBase	access:public	signature:(_Array<_Tp> __a,const slice & __s)
std::_SBase::_SBase	./valarray_before.h	/^      _SBase (const _Dom& __e, const slice& __s)$/;"	kind:function	language:C++	class:std::_SBase	access:public	signature:(const _Dom & __e,const slice & __s)
std::_SBase::operator [] 	./valarray_before.h	/^      operator[] (size_t __i) const$/;"	kind:function	language:C++	class:std::_SBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_SBase::size	./valarray_before.h	/^      size() const$/;"	kind:function	language:C++	class:std::_SBase	typeref:typename:size_t	access:public	signature:() const
std::_SBase::value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_SBase	typeref:typename:_Tp	access:public
std::_SBase::value_type	./valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_SBase	typeref:typename:_Dom::value_type	access:public
std::_SClos	./valarray_before.h	/^    struct _SClos<_Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_SBase<_Dom>
std::_SClos	./valarray_before.h	/^    struct _SClos<_ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_SBase<_Array<_Tp>>
std::_SClos::_Base	./valarray_before.h	/^      typedef  _SBase<_Array<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_SBase<_Array<_Tp>>	access:public
std::_SClos::_Base	./valarray_before.h	/^      typedef _SBase<_Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_SBase<_Dom>	access:public
std::_SClos::_SClos	./valarray_before.h	/^      _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}$/;"	kind:function	language:C++	struct:std::_SClos	access:public	signature:(_Array<_Tp> __a,const slice & __s)
std::_SClos::_SClos	./valarray_before.h	/^      _SClos (const _Dom& __e, const slice& __s) : _Base (__e, __s) {}$/;"	kind:function	language:C++	struct:std::_SClos	access:public	signature:(const _Dom & __e,const slice & __s)
std::_SClos::value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_Tp	access:public
std::_SClos::value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_Base::value_type	access:public
std::_S_adjustfield	./ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_app	./ios_base.h	/^      _S_app 		= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_ate	./ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_badbit	./ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
std::_S_basefield	./ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_beg	./ios_base.h	/^      _S_beg = 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
std::_S_bin	./ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_black	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enumerator	language:C++	enum:std::_Rb_tree_color	access:public
std::_S_boolalpha	./ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_chunk_size	./stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	kind:enumerator	language:C++	enum:std::__anon6048a8ad0203	access:public
std::_S_cur	./ios_base.h	/^      _S_cur = SEEK_CUR,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
std::_S_dec	./ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_end	./ios_base.h	/^      _S_end = SEEK_END,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
std::_S_eofbit	./ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
std::_S_failbit	./ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
std::_S_fixed	./ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_floatfield	./ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_goodbit	./ios_base.h	/^      _S_goodbit 		= 0,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
std::_S_hex	./ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_in	./ios_base.h	/^      _S_in 		= 1L << 3,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_internal	./ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_end	./ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_iostate_end	./ios_base.h	/^      _S_ios_iostate_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Iostate	access:public
std::_S_ios_openmode_end	./ios_base.h	/^      _S_ios_openmode_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_ios_seekdir_end	./ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	kind:enumerator	language:C++	enum:std::_Ios_Seekdir	access:public
std::_S_left	./ios_base.h	/^      _S_left 		= 1L << 5,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_oct	./ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_out	./ios_base.h	/^      _S_out 		= 1L << 4,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_red	./stl_tree.h	/^  enum _Rb_tree_color { _S_red = false, _S_black = true };$/;"	kind:enumerator	language:C++	enum:std::_Rb_tree_color	access:public
std::_S_right	./ios_base.h	/^      _S_right 		= 1L << 7,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_scientific	./ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_showbase	./ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_showpoint	./ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_showpos	./ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_skipws	./ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_threshold	./stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	kind:enumerator	language:C++	enum:std::__anon6048a8ad0103	access:public
std::_S_trunc	./ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Openmode	access:public
std::_S_unitbuf	./ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_uppercase	./ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	kind:enumerator	language:C++	enum:std::_Ios_Fmtflags	access:public
std::_S_word_bit	./stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	kind:enumerator	language:C++	enum:std::__anon35db5b7f0103	access:public
std::_Select1st	./stl_function.h	/^    struct _Select1st : public unary_function<_Pair,$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
std::_Select1st::operator ()	./stl_function.h	/^      operator()(_Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
std::_Select1st::operator ()	./stl_function.h	/^      operator()(const _Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
std::_Select2nd	./stl_function.h	/^    struct _Select2nd : public unary_function<_Pair,$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
std::_Select2nd::operator ()	./stl_function.h	/^      operator()(_Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
std::_Select2nd::operator ()	./stl_function.h	/^      operator()(const _Pair& __x) const$/;"	kind:function	language:C++	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
std::_Temporary_buffer	./stl_tempbuf.h	/^    class _Temporary_buffer$/;"	kind:class	language:C++	namespace:std
std::_Temporary_buffer::_M_buffer	./stl_tempbuf.h	/^      pointer    _M_buffer;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:pointer	access:protected
std::_Temporary_buffer::_M_initialize_buffer	./stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp& __val, __false_type)$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:protected	signature:(const _Tp & __val,__false_type)
std::_Temporary_buffer::_M_initialize_buffer	./stl_tempbuf.h	/^      _M_initialize_buffer(const _Tp&, __true_type) { }$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:protected	signature:(const _Tp &,__true_type)
std::_Temporary_buffer::_M_len	./stl_tempbuf.h	/^      size_type  _M_len;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
std::_Temporary_buffer::_M_original_len	./stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	kind:member	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
std::_Temporary_buffer::_Temporary_buffer	./stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Temporary_buffer::_Temporary_buffer	./stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer &)
std::_Temporary_buffer::_Temporary_buffer	./stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	class:std::_Temporary_buffer	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Temporary_buffer::begin	./stl_tempbuf.h	/^      begin()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
std::_Temporary_buffer::end	./stl_tempbuf.h	/^      end()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
std::_Temporary_buffer::iterator	./stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:pointer	access:public
std::_Temporary_buffer::operator =	./stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	kind:prototype	language:C++	class:std::_Temporary_buffer	typeref:typename:void	access:private	signature:(const _Temporary_buffer &)
std::_Temporary_buffer::pointer	./stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:value_type *	access:public
std::_Temporary_buffer::requested_size	./stl_tempbuf.h	/^      requested_size() const$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
std::_Temporary_buffer::size	./stl_tempbuf.h	/^      size() const$/;"	kind:function	language:C++	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
std::_Temporary_buffer::size_type	./stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:ptrdiff_t	access:public
std::_Temporary_buffer::value_type	./stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:_Tp	access:public
std::_Temporary_buffer::~_Temporary_buffer	./stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	access:public	signature:()
std::_UnBase	./valarray_before.h	/^    class _UnBase$/;"	kind:class	language:C++	namespace:std
std::_UnBase::_M_expr	./valarray_before.h	/^      const _Arg& _M_expr;$/;"	kind:member	language:C++	class:std::_UnBase	typeref:typename:const _Arg &	access:private
std::_UnBase::_UnBase	./valarray_before.h	/^      _UnBase(const _Arg& __e) : _M_expr(__e) {}$/;"	kind:function	language:C++	class:std::_UnBase	access:public	signature:(const _Arg & __e)
std::_UnBase::_Vt	./valarray_before.h	/^      typedef typename _Arg::value_type _Vt;$/;"	kind:typedef	language:C++	class:std::_UnBase	typeref:typename:_Arg::value_type	access:public
std::_UnBase::operator []	./valarray_before.h	/^      value_type operator[](size_t __i) const$/;"	kind:function	language:C++	class:std::_UnBase	typeref:typename:value_type	access:public	signature:(size_t __i) const
std::_UnBase::size	./valarray_before.h	/^      size_t size() const { return _M_expr.size(); }$/;"	kind:function	language:C++	class:std::_UnBase	typeref:typename:size_t	access:public	signature:() const
std::_UnBase::value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_UnBase	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
std::_UnClos	./valarray_before.h	/^    struct _UnClos<_Oper, _Expr, _Dom>$/;"	kind:struct	language:C++	namespace:std	inherits:_UnBase<_Oper,_Dom>
std::_UnClos	./valarray_before.h	/^    struct _UnClos<_Oper, _ValArray, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_UnBase<_Oper,valarray<_Tp>>
std::_UnClos::_Arg	./valarray_before.h	/^      typedef _Dom _Arg;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_Dom	access:public
std::_UnClos::_Arg	./valarray_before.h	/^      typedef valarray<_Tp> _Arg;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:valarray<_Tp>	access:public
std::_UnClos::_Base	./valarray_before.h	/^      typedef _UnBase<_Oper, _Dom> _Base;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_UnBase<_Oper,_Dom>	access:public
std::_UnClos::_Base	./valarray_before.h	/^      typedef _UnBase<_Oper, valarray<_Tp> > _Base;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_UnBase<_Oper,valarray<_Tp>>	access:public
std::_UnClos::_UnClos	./valarray_before.h	/^      _UnClos(const _Arg& __e) : _Base(__e) {}$/;"	kind:function	language:C++	struct:std::_UnClos	access:public	signature:(const _Arg & __e)
std::_UnClos::value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_Base::value_type	access:public
std::_ValFunClos	./valarray_before.h	/^    struct _ValFunClos<_Expr,_Dom> : _FunBase<_Dom, typename _Dom::value_type>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<_Dom,typename_Dom::value_type>
std::_ValFunClos	./valarray_before.h	/^    struct _ValFunClos<_ValArray,_Tp> : _FunBase<valarray<_Tp>, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:_FunBase<valarray<_Tp>,_Tp>
std::_ValFunClos::_Base	./valarray_before.h	/^      typedef _FunBase<_Dom, typename _Dom::value_type> _Base;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_FunBase<_Dom,typename _Dom::value_type>	access:public
std::_ValFunClos::_Base	./valarray_before.h	/^      typedef _FunBase<valarray<_Tp>, _Tp> _Base;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_FunBase<valarray<_Tp>,_Tp>	access:public
std::_ValFunClos::_Tp	./valarray_before.h	/^      typedef value_type _Tp;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:value_type	access:public
std::_ValFunClos::_ValFunClos	./valarray_before.h	/^      _ValFunClos(const _Dom& __e, _Tp __f(_Tp)) : _Base(__e, __f) {}$/;"	kind:function	language:C++	struct:std::_ValFunClos	access:public	signature:(const _Dom & __e,_Tp __f (_Tp))
std::_ValFunClos::_ValFunClos	./valarray_before.h	/^      _ValFunClos(const valarray<_Tp>& __v, _Tp __f(_Tp)) : _Base(__v, __f) {}$/;"	kind:function	language:C++	struct:std::_ValFunClos	access:public	signature:(const valarray<_Tp> & __v,_Tp __f (_Tp))
std::_ValFunClos::value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_Tp	access:public
std::_ValFunClos::value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_Base::value_type	access:public
std::_Vector_base	./stl_vector.h	/^    struct _Vector_base$/;"	kind:struct	language:C++	namespace:std
std::_Vector_base::_M_allocate	./stl_vector.h	/^      _M_allocate(size_t __n)$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:_Tp *	access:public	signature:(size_t __n)
std::_Vector_base::_M_deallocate	./stl_vector.h	/^      _M_deallocate(_Tp* __p, size_t __n)$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
std::_Vector_base::_M_get_Tp_allocator	./stl_vector.h	/^      _M_get_Tp_allocator() const$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:const _Tp_alloc_type &	access:public	signature:() const
std::_Vector_base::_M_get_Tp_allocator	./stl_vector.h	/^      _M_get_Tp_allocator()$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:_Tp_alloc_type &	access:public	signature:()
std::_Vector_base::_M_impl	./stl_vector.h	/^      _Vector_impl _M_impl;$/;"	kind:member	language:C++	struct:std::_Vector_base	typeref:typename:_Vector_impl	access:public
std::_Vector_base::_Tp_alloc_type	./stl_vector.h	/^      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;$/;"	kind:typedef	language:C++	struct:std::_Vector_base	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
std::_Vector_base::_Vector_base	./stl_vector.h	/^      _Vector_base(const allocator_type& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:(const allocator_type & __a)
std::_Vector_base::_Vector_base	./stl_vector.h	/^      _Vector_base(size_t __n, const allocator_type& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:(size_t __n,const allocator_type & __a)
std::_Vector_base::_Vector_impl	./stl_vector.h	/^      struct _Vector_impl $/;"	kind:struct	language:C++	struct:std::_Vector_base	inherits:_Tp_alloc_type	access:public
std::_Vector_base::_Vector_impl::_M_end_of_storage	./stl_vector.h	/^	_Tp*           _M_end_of_storage;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
std::_Vector_base::_Vector_impl::_M_finish	./stl_vector.h	/^	_Tp*           _M_finish;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
std::_Vector_base::_Vector_impl::_M_start	./stl_vector.h	/^	_Tp*           _M_start;$/;"	kind:member	language:C++	struct:std::_Vector_base::_Vector_impl	typeref:typename:_Tp *	access:public
std::_Vector_base::_Vector_impl::_Vector_impl	./stl_vector.h	/^	_Vector_impl(_Tp_alloc_type const& __a)$/;"	kind:function	language:C++	struct:std::_Vector_base::_Vector_impl	access:public	signature:(_Tp_alloc_type const & __a)
std::_Vector_base::allocator_type	./stl_vector.h	/^      typedef _Alloc allocator_type;$/;"	kind:typedef	language:C++	struct:std::_Vector_base	typeref:typename:_Alloc	access:public
std::_Vector_base::get_allocator	./stl_vector.h	/^      get_allocator() const$/;"	kind:function	language:C++	struct:std::_Vector_base	typeref:typename:allocator_type	access:public	signature:() const
std::_Vector_base::~_Vector_base	./stl_vector.h	/^      ~_Vector_base()$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:()
std::__abs	./valarray_before.h	/^  struct __abs$/;"	kind:struct	language:C++	namespace:std
std::__abs::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__abs	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__acos	./valarray_before.h	/^  struct __acos$/;"	kind:struct	language:C++	namespace:std
std::__acos::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__acos	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__add_grouping	./locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
std::__adjust_heap	./stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __len,_Tp __value)
std::__adjust_heap	./stl_heap.h	/^    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __len,_Tp __value,_Compare __comp)
std::__advance	./stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
std::__advance	./stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
std::__advance	./stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
std::__alloc_swap	./allocator.h	/^    struct __alloc_swap$/;"	kind:struct	language:C++	namespace:std
std::__alloc_swap	./allocator.h	/^    struct __alloc_swap<_Alloc, false>$/;"	kind:struct	language:C++	namespace:std
std::__alloc_swap::_S_do_it	./allocator.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two)$/;"	kind:function	language:C++	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_swap::_S_do_it	./allocator.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) { } };$/;"	kind:function	language:C++	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
std::__anon35db5b7f0103	./stl_bvector.h	/^  enum { _S_word_bit = int(CHAR_BIT * sizeof(_Bit_type)) };$/;"	kind:enum	language:C++	namespace:std
std::__anon6048a8ad0103	./stl_algo.h	/^  enum { _S_threshold = 16 };$/;"	kind:enum	language:C++	namespace:std
std::__anon6048a8ad0203	./stl_algo.h	/^  enum { _S_chunk_size = 7 };$/;"	kind:enum	language:C++	namespace:std
std::__asin	./valarray_before.h	/^  struct __asin$/;"	kind:struct	language:C++	namespace:std
std::__asin::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__asin	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__atan	./valarray_before.h	/^  struct __atan$/;"	kind:struct	language:C++	namespace:std
std::__atan2	./valarray_before.h	/^  struct __atan2$/;"	kind:struct	language:C++	namespace:std
std::__atan2::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__atan2	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__atan::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__atan	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__bitwise_and	./valarray_before.h	/^  struct __bitwise_and$/;"	kind:struct	language:C++	namespace:std
std::__bitwise_and::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_and	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__bitwise_not	./valarray_before.h	/^  struct __bitwise_not$/;"	kind:struct	language:C++	namespace:std
std::__bitwise_not::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__bitwise_not	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__bitwise_or	./valarray_before.h	/^  struct __bitwise_or$/;"	kind:struct	language:C++	namespace:std
std::__bitwise_or::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_or	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__bitwise_xor	./valarray_before.h	/^  struct __bitwise_xor$/;"	kind:struct	language:C++	namespace:std
std::__bitwise_xor::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__bitwise_xor	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__check_facet	./localefwd.h	/^    __check_facet(const _Facet* __f)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Facet &	signature:(const _Facet * __f)
std::__chunk_insertion_sort	./stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Distance __chunk_size)
std::__chunk_insertion_sort	./stl_algo.h	/^    __chunk_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Distance __chunk_size,_Compare __comp)
std::__codecvt_abstract_base	./codecvt.h	/^    class __codecvt_abstract_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,codecvt_base
std::__codecvt_abstract_base::__codecvt_abstract_base	./codecvt.h	/^      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	access:protected	signature:(size_t __refs=0)
std::__codecvt_abstract_base::always_noconv	./codecvt.h	/^      always_noconv() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:bool	access:public	signature:() const
std::__codecvt_abstract_base::do_always_noconv	./codecvt.h	/^      do_always_noconv() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:bool	access:protected	signature:() const
std::__codecvt_abstract_base::do_encoding	./codecvt.h	/^      do_encoding() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:() const
std::__codecvt_abstract_base::do_in	./codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
std::__codecvt_abstract_base::do_length	./codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
std::__codecvt_abstract_base::do_max_length	./codecvt.h	/^      do_max_length() const throw() = 0;$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:protected	signature:() const
std::__codecvt_abstract_base::do_out	./codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::__codecvt_abstract_base::do_unshift	./codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	kind:prototype	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::__codecvt_abstract_base::encoding	./codecvt.h	/^      encoding() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:() const
std::__codecvt_abstract_base::extern_type	./codecvt.h	/^      typedef _ExternT			extern_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_ExternT	access:public
std::__codecvt_abstract_base::in	./codecvt.h	/^      in(state_type& __state, const extern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
std::__codecvt_abstract_base::intern_type	./codecvt.h	/^      typedef _InternT			intern_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_InternT	access:public
std::__codecvt_abstract_base::length	./codecvt.h	/^      length(state_type& __state, const extern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:(state_type & __state,const extern_type * __from,const extern_type * __end,size_t __max) const
std::__codecvt_abstract_base::max_length	./codecvt.h	/^      max_length() const throw()$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:int	access:public	signature:() const
std::__codecvt_abstract_base::out	./codecvt.h	/^      out(state_type& __state, const intern_type* __from,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::__codecvt_abstract_base::result	./codecvt.h	/^      typedef codecvt_base::result	result;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:codecvt_base::result	access:public
std::__codecvt_abstract_base::state_type	./codecvt.h	/^      typedef _StateT			state_type;$/;"	kind:typedef	language:C++	class:std::__codecvt_abstract_base	typeref:typename:_StateT	access:public
std::__codecvt_abstract_base::unshift	./codecvt.h	/^      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::__codecvt_abstract_base::~__codecvt_abstract_base	./codecvt.h	/^      ~__codecvt_abstract_base() { }$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	access:protected	signature:()
std::__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char * __in,_Tv & __out,ios_base::iostate & __err,const __c_locale & __cloc)
std::__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	./locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
std::__copy	./stl_algobase.h	/^    struct __copy$/;"	kind:struct	language:C++	namespace:std
std::__copy	./stl_algobase.h	/^    struct __copy<_BoolType, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
std::__copy	./stl_algobase.h	/^    struct __copy<true, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
std::__copy::copy	./stl_algobase.h	/^        copy(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	struct:std::__copy	typeref:typename:_OI	access:public	signature:(_II __first,_II __last,_OI __result)
std::__copy::copy	./stl_algobase.h	/^        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	kind:function	language:C++	struct:std::__copy	typeref:typename:_Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
std::__copy_aux	./stl_algobase.h	/^    __copy_aux(_CharT*, _CharT*, ostreambuf_iterator<_CharT>);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT>)
std::__copy_aux	./stl_algobase.h	/^    __copy_aux(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_aux	./stl_algobase.h	/^    __copy_aux(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT>);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT>)
std::__copy_aux	./stl_algobase.h	/^    __copy_aux(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,_CharT *)
std::__copy_aux	./streambuf_iterator.h	/^    __copy_aux(_CharT* __first, _CharT* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_aux	./streambuf_iterator.h	/^    __copy_aux(const _CharT* __first, const _CharT* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_aux	./streambuf_iterator.h	/^    __copy_aux(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
std::__copy_backward	./stl_algobase.h	/^    struct __copy_backward$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward	./stl_algobase.h	/^    struct __copy_backward<_BoolType, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward	./stl_algobase.h	/^    struct __copy_backward<true, random_access_iterator_tag>$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward::__copy_b	./stl_algobase.h	/^        __copy_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	struct:std::__copy_backward	typeref:typename:_BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_backward::__copy_b	./stl_algobase.h	/^        __copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	kind:function	language:C++	struct:std::__copy_backward	typeref:typename:_Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
std::__copy_backward_aux	./stl_algobase.h	/^    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<false, true>$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<true, false>$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward_normal	./stl_algobase.h	/^    struct __copy_backward_normal<true, true>$/;"	kind:struct	language:C++	namespace:std
std::__copy_backward_normal::__copy_b_n	./stl_algobase.h	/^        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	struct:std::__copy_backward_normal	typeref:typename:_BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_normal	./stl_algobase.h	/^    struct __copy_normal$/;"	kind:struct	language:C++	namespace:std
std::__copy_normal	./stl_algobase.h	/^    struct __copy_normal<false, true>$/;"	kind:struct	language:C++	namespace:std
std::__copy_normal	./stl_algobase.h	/^    struct __copy_normal<true, false>$/;"	kind:struct	language:C++	namespace:std
std::__copy_normal	./stl_algobase.h	/^    struct __copy_normal<true, true>$/;"	kind:struct	language:C++	namespace:std
std::__copy_normal::__copy_n	./stl_algobase.h	/^        __copy_n(_II __first, _II __last, _OI __result)$/;"	kind:function	language:C++	struct:std::__copy_normal	typeref:typename:_OI	access:public	signature:(_II __first,_II __last,_OI __result)
std::__cos	./valarray_before.h	/^  struct __cos$/;"	kind:struct	language:C++	namespace:std
std::__cos::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__cos	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__cosh	./valarray_before.h	/^  struct __cosh$/;"	kind:struct	language:C++	namespace:std
std::__cosh::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__cosh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__ctype_abstract_base	./locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,ctype_base
std::__ctype_abstract_base::__ctype_abstract_base	./locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
std::__ctype_abstract_base::char_type	./locale_facets.h	/^      typedef _CharT char_type;$/;"	kind:typedef	language:C++	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
std::__ctype_abstract_base::do_is	./locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::do_is	./locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::do_narrow	./locale_facets.h	/^      do_narrow(char_type, char __dfault) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
std::__ctype_abstract_base::do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __dest) const
std::__ctype_abstract_base::do_scan_is	./locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_scan_not	./locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_tolower	./locale_facets.h	/^      do_tolower(char_type) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type) const
std::__ctype_abstract_base::do_tolower	./locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_toupper	./locale_facets.h	/^      do_toupper(char_type) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type) const
std::__ctype_abstract_base::do_toupper	./locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_widen	./locale_facets.h	/^      do_widen(char) const = 0;$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char) const
std::__ctype_abstract_base::do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi,$/;"	kind:prototype	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
std::__ctype_abstract_base::is	./locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::is	./locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::narrow	./locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::__ctype_abstract_base::narrow	./locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::__ctype_abstract_base::scan_is	./locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::scan_not	./locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::tolower	./locale_facets.h	/^      tolower(char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::tolower	./locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	./locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	./locale_facets.h	/^      toupper(char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::widen	./locale_facets.h	/^      widen(char __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
std::__ctype_abstract_base::widen	./locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::__ctype_abstract_base::~__ctype_abstract_base	./locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	access:protected	signature:()
std::__deque_buf_size	./stl_deque.h	/^  __deque_buf_size(size_t __size)$/;"	kind:function	language:C++	namespace:std	typeref:typename:size_t	signature:(size_t __size)
std::__destroy_aux	./stl_construct.h	/^    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,__false_type)
std::__destroy_aux	./stl_construct.h	/^    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator,_ForwardIterator,__true_type)
std::__distance	./stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
std::__distance	./stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
std::__divides	./valarray_before.h	/^  struct __divides$/;"	kind:struct	language:C++	namespace:std
std::__divides::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__divides	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__equal_to	./valarray_before.h	/^  struct __equal_to$/;"	kind:struct	language:C++	namespace:std
std::__equal_to::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__exp	./valarray_before.h	/^  struct __exp$/;"	kind:struct	language:C++	namespace:std
std::__exp::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__exp	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__fill	./stl_algobase.h	/^    struct __fill$/;"	kind:struct	language:C++	namespace:std
std::__fill	./stl_algobase.h	/^    struct __fill<true>$/;"	kind:struct	language:C++	namespace:std
std::__fill::fill	./stl_algobase.h	/^        fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	struct:std::__fill	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::__fill_bvector	./stl_bvector.h	/^  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Bit_iterator __first,_Bit_iterator __last,bool __x)
std::__fill_n	./stl_algobase.h	/^    struct __fill_n$/;"	kind:struct	language:C++	namespace:std
std::__fill_n	./stl_algobase.h	/^    struct __fill_n<true>$/;"	kind:struct	language:C++	namespace:std
std::__fill_n::fill_n	./stl_algobase.h	/^        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	kind:function	language:C++	struct:std::__fill_n	typeref:typename:_OutputIterator	access:public	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
std::__final_insertion_sort	./stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::__final_insertion_sort	./stl_algo.h	/^    __final_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::__find	./stl_algo.h	/^    __find(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __val,input_iterator_tag)
std::__find	./stl_algo.h	/^    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,const _Tp & __val,random_access_iterator_tag)
std::__find_end	./stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,bidirectional_iterator_tag,bidirectional_iterator_tag)
std::__find_end	./stl_algo.h	/^    __find_end(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,bidirectional_iterator_tag,bidirectional_iterator_tag,_BinaryPredicate __comp)
std::__find_end	./stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,forward_iterator_tag,forward_iterator_tag)
std::__find_end	./stl_algo.h	/^    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,forward_iterator_tag,forward_iterator_tag,_BinaryPredicate __comp)
std::__find_if	./stl_algo.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
std::__find_if	./stl_algo.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
std::__fun	./valarray_before.h	/^    struct __fun$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__equal_to, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__greater, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__greater_equal, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__less, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__less_equal, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__logical_and, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__logical_not, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__logical_or, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun	./valarray_before.h	/^    struct __fun<__not_equal_to, _Tp>$/;"	kind:struct	language:C++	namespace:std
std::__fun::result_type	./valarray_before.h	/^      typedef _Tp result_type;$/;"	kind:typedef	language:C++	struct:std::__fun	typeref:typename:_Tp	access:public
std::__fun::result_type	./valarray_before.h	/^      typedef bool result_type;$/;"	kind:typedef	language:C++	struct:std::__fun	typeref:typename:bool	access:public
std::__gcd	./stl_algo.h	/^    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_EuclideanRingElement	signature:(_EuclideanRingElement __m,_EuclideanRingElement __n)
std::__greater	./valarray_before.h	/^  struct __greater$/;"	kind:struct	language:C++	namespace:std
std::__greater::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__greater	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__greater_equal	./valarray_before.h	/^  struct __greater_equal$/;"	kind:struct	language:C++	namespace:std
std::__greater_equal::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__greater_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__heap_select	./stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last)
std::__heap_select	./stl_algo.h	/^    __heap_select(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,_Compare __comp)
std::__inplace_stable_partition	./stl_algo.h	/^    __inplace_stable_partition(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,_Distance __len)
std::__inplace_stable_sort	./stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::__inplace_stable_sort	./stl_algo.h	/^    __inplace_stable_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::__insertion_sort	./stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::__insertion_sort	./stl_algo.h	/^    __insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::__introselect	./stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Size __depth_limit)
std::__introselect	./stl_algo.h	/^    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Size __depth_limit,_Compare __comp)
std::__introsort_loop	./stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Size __depth_limit)
std::__introsort_loop	./stl_algo.h	/^    __introsort_loop(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Size __depth_limit,_Compare __comp)
std::__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _Distance __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_Distance __n)
std::__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_StrictWeakOrdering __comp)
std::__is_heap	./stl_heap.h	/^    __is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_RandomAccessIterator __first,_StrictWeakOrdering __comp,_Distance __n)
std::__iter_swap	./stl_algobase.h	/^    struct __iter_swap$/;"	kind:struct	language:C++	namespace:std
std::__iter_swap	./stl_algobase.h	/^    struct __iter_swap<true>$/;"	kind:struct	language:C++	namespace:std
std::__iter_swap::iter_swap	./stl_algobase.h	/^        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	kind:function	language:C++	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::__iterator_category	./stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
std::__less	./valarray_before.h	/^  struct __less$/;"	kind:struct	language:C++	namespace:std
std::__less::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__less	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__less_equal	./valarray_before.h	/^  struct __less_equal$/;"	kind:struct	language:C++	namespace:std
std::__less_equal::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__less_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__lg	./stl_algo.h	/^    __lg(_Size __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Size	signature:(_Size __n)
std::__log	./valarray_before.h	/^  struct __log$/;"	kind:struct	language:C++	namespace:std
std::__log10	./valarray_before.h	/^  struct __log10$/;"	kind:struct	language:C++	namespace:std
std::__log10::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__log10	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__log::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__log	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__logical_and	./valarray_before.h	/^  struct __logical_and$/;"	kind:struct	language:C++	namespace:std
std::__logical_and::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__logical_and	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__logical_not	./valarray_before.h	/^  struct __logical_not$/;"	kind:struct	language:C++	namespace:std
std::__logical_not::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x) const { return !__x; }$/;"	kind:function	language:C++	struct:std::__logical_not	typeref:typename:bool	access:public	signature:(const _Tp & __x) const
std::__logical_or	./valarray_before.h	/^  struct __logical_or$/;"	kind:struct	language:C++	namespace:std
std::__logical_or::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__logical_or	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__median	./stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,const _Tp & __c)
std::__median	./stl_algo.h	/^    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,const _Tp & __c,_Compare __comp)
std::__merge_adaptive	./stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Pointer __buffer,_Distance __buffer_size)
std::__merge_adaptive	./stl_algo.h	/^    __merge_adaptive(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Pointer __buffer,_Distance __buffer_size,_Compare __comp)
std::__merge_backward	./stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator3	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,_BidirectionalIterator3 __result)
std::__merge_backward	./stl_algo.h	/^    __merge_backward(_BidirectionalIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator3	signature:(_BidirectionalIterator1 __first1,_BidirectionalIterator1 __last1,_BidirectionalIterator2 __first2,_BidirectionalIterator2 __last2,_BidirectionalIterator3 __result,_Compare __comp)
std::__merge_sort_loop	./stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator1 __first,_RandomAccessIterator1 __last,_RandomAccessIterator2 __result,_Distance __step_size)
std::__merge_sort_loop	./stl_algo.h	/^    __merge_sort_loop(_RandomAccessIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator1 __first,_RandomAccessIterator1 __last,_RandomAccessIterator2 __result,_Distance __step_size,_Compare __comp)
std::__merge_sort_with_buffer	./stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer)
std::__merge_sort_with_buffer	./stl_algo.h	/^    __merge_sort_with_buffer(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Compare __comp)
std::__merge_without_buffer	./stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2)
std::__merge_without_buffer	./stl_algo.h	/^    __merge_without_buffer(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Distance __len1,_Distance __len2,_Compare __comp)
std::__minus	./valarray_before.h	/^  struct __minus$/;"	kind:struct	language:C++	namespace:std
std::__minus::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__minus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__modulus	./valarray_before.h	/^  struct __modulus$/;"	kind:struct	language:C++	namespace:std
std::__modulus::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__modulus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__moneypunct_cache	./locale_facets.h	/^    struct __moneypunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
std::__moneypunct_cache::_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:bool	access:public
std::__moneypunct_cache::_M_atoms	./locale_facets.h	/^      _CharT				_M_atoms[money_base::_S_end];$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT[]	access:public
std::__moneypunct_cache::_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
std::__moneypunct_cache::_M_curr_symbol	./locale_facets.h	/^      const _CharT*			_M_curr_symbol;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
std::__moneypunct_cache::_M_curr_symbol_size	./locale_facets.h	/^      size_t                            _M_curr_symbol_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
std::__moneypunct_cache::_M_decimal_point	./locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT	access:public
std::__moneypunct_cache::_M_frac_digits	./locale_facets.h	/^      int				_M_frac_digits;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:int	access:public
std::__moneypunct_cache::_M_grouping	./locale_facets.h	/^      const char*			_M_grouping;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const char *	access:public
std::__moneypunct_cache::_M_grouping_size	./locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
std::__moneypunct_cache::_M_neg_format	./locale_facets.h	/^      money_base::pattern	        _M_neg_format;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:money_base::pattern	access:public
std::__moneypunct_cache::_M_negative_sign	./locale_facets.h	/^      const _CharT*			_M_negative_sign;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
std::__moneypunct_cache::_M_negative_sign_size	./locale_facets.h	/^      size_t                            _M_negative_sign_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
std::__moneypunct_cache::_M_pos_format	./locale_facets.h	/^      money_base::pattern		_M_pos_format;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:money_base::pattern	access:public
std::__moneypunct_cache::_M_positive_sign	./locale_facets.h	/^      const _CharT*			_M_positive_sign;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:const _CharT *	access:public
std::__moneypunct_cache::_M_positive_sign_size	./locale_facets.h	/^      size_t                            _M_positive_sign_size;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:size_t	access:public
std::__moneypunct_cache::_M_thousands_sep	./locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:_CharT	access:public
std::__moneypunct_cache::_M_use_grouping	./locale_facets.h	/^      bool				_M_use_grouping;$/;"	kind:member	language:C++	struct:std::__moneypunct_cache	typeref:typename:bool	access:public
std::__moneypunct_cache::__moneypunct_cache	./locale_facets.h	/^      __moneypunct_cache(const __moneypunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	access:private	signature:(const __moneypunct_cache &)
std::__moneypunct_cache::__moneypunct_cache	./locale_facets.h	/^      __moneypunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__moneypunct_cache	access:public	signature:(size_t __refs=0)
std::__moneypunct_cache::operator =	./locale_facets.h	/^      operator=(const __moneypunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	typeref:typename:__moneypunct_cache &	access:private	signature:(const __moneypunct_cache &)
std::__moneypunct_cache::~__moneypunct_cache	./locale_facets.h	/^      ~__moneypunct_cache();$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	access:public	signature:()
std::__moneypunct_cache::~__moneypunct_cache	./locale_facets.h	/^    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()$/;"	kind:function	language:C++	class:std::__moneypunct_cache	signature:()
std::__multiplies	./valarray_before.h	/^  struct __multiplies$/;"	kind:struct	language:C++	namespace:std
std::__multiplies::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__multiplies	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__negate	./valarray_before.h	/^  struct __negate$/;"	kind:struct	language:C++	namespace:std
std::__negate::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__negate	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__not_equal_to	./valarray_before.h	/^  struct __not_equal_to$/;"	kind:struct	language:C++	namespace:std
std::__not_equal_to::operator ()	./valarray_before.h	/^      bool operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__not_equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__num_base	./locale_facets.h	/^  class __num_base$/;"	kind:class	language:C++	namespace:std
std::__num_base::_S_atoms_in	./locale_facets.h	/^    static const char* _S_atoms_in;$/;"	kind:member	language:C++	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_atoms_out	./locale_facets.h	/^    static const char* _S_atoms_out;$/;"	kind:member	language:C++	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_format_float	./locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod);$/;"	kind:prototype	language:C++	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
std::__num_base::_S_iE	./locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_iX	./locale_facets.h	/^      _S_iX,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_ie	./locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_iend	./locale_facets.h	/^      _S_iend = 26$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_iminus	./locale_facets.h	/^      _S_iminus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_iplus	./locale_facets.h	/^      _S_iplus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_ix	./locale_facets.h	/^      _S_ix,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_izero	./locale_facets.h	/^      _S_izero,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0203	access:public
std::__num_base::_S_oE	./locale_facets.h	/^        _S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oX	./locale_facets.h	/^        _S_oX,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_odigits	./locale_facets.h	/^        _S_odigits,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_odigits_end	./locale_facets.h	/^        _S_odigits_end = _S_odigits + 16,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oe	./locale_facets.h	/^        _S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oend	./locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_ominus	./locale_facets.h	/^        _S_ominus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oplus	./locale_facets.h	/^        _S_oplus,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oudigits	./locale_facets.h	/^        _S_oudigits = _S_odigits_end,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_oudigits_end	./locale_facets.h	/^        _S_oudigits_end = _S_oudigits + 16,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::_S_ox	./locale_facets.h	/^        _S_ox,$/;"	kind:enumerator	language:C++	enum:std::__num_base::__anon39ebb53d0103	access:public
std::__num_base::__anon39ebb53d0103	./locale_facets.h	/^      {$/;"	kind:enum	language:C++	class:std::__num_base	access:public
std::__num_base::__anon39ebb53d0203	./locale_facets.h	/^    {$/;"	kind:enum	language:C++	class:std::__num_base	access:public
std::__numpunct_cache	./locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
std::__numpunct_cache::_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::_M_atoms_in	./locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_atoms_out	./locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
std::__numpunct_cache::_M_decimal_point	./locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_falsename	./locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_falsename_size	./locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_grouping	./locale_facets.h	/^      const char*			_M_grouping;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
std::__numpunct_cache::_M_grouping_size	./locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_thousands_sep	./locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_truename	./locale_facets.h	/^      const _CharT*			_M_truename;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_truename_size	./locale_facets.h	/^      size_t                            _M_truename_size;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_use_grouping	./locale_facets.h	/^      bool				_M_use_grouping;$/;"	kind:member	language:C++	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::__numpunct_cache	./locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::__numpunct_cache	./locale_facets.h	/^      __numpunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
std::__numpunct_cache::operator =	./locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::~__numpunct_cache	./locale_facets.h	/^      ~__numpunct_cache();$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	access:public	signature:()
std::__numpunct_cache::~__numpunct_cache	./locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	kind:function	language:C++	class:std::__numpunct_cache	signature:()
std::__ostream_fill	./ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
std::__ostream_insert	./ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__ostream_write	./ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__pad	./locale_facets.h	/^    struct __pad$/;"	kind:struct	language:C++	namespace:std
std::__pad::_S_pad	./locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	kind:prototype	language:C++	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,const streamsize __newlen,const streamsize __oldlen,const bool __num)
std::__partition	./stl_algo.h	/^    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Predicate __pred,bidirectional_iterator_tag)
std::__partition	./stl_algo.h	/^    __partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,forward_iterator_tag)
std::__plus	./valarray_before.h	/^  struct __plus$/;"	kind:struct	language:C++	namespace:std
std::__plus::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__pop_heap	./stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomAccessIterator __result,_Tp __value)
std::__pop_heap	./stl_heap.h	/^    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomAccessIterator __result,_Tp __value,_Compare __comp)
std::__pow	./valarray_before.h	/^  struct __pow$/;"	kind:struct	language:C++	namespace:std
std::__pow::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__pow	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__push_heap	./stl_heap.h	/^    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __topIndex,_Tp __value,_Compare __comp)
std::__push_heap	./stl_heap.h	/^    __push_heap(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_Distance __holeIndex,_Distance __topIndex,_Tp __value)
std::__reverse	./stl_algo.h	/^    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,bidirectional_iterator_tag)
std::__reverse	./stl_algo.h	/^    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
std::__rotate	./stl_algo.h	/^    __rotate(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,bidirectional_iterator_tag)
std::__rotate	./stl_algo.h	/^    __rotate(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last,forward_iterator_tag)
std::__rotate	./stl_algo.h	/^    __rotate(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,random_access_iterator_tag)
std::__rotate_adaptive	./stl_algo.h	/^    __rotate_adaptive(_BidirectionalIterator1 __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BidirectionalIterator1	signature:(_BidirectionalIterator1 __first,_BidirectionalIterator1 __middle,_BidirectionalIterator1 __last,_Distance __len1,_Distance __len2,_BidirectionalIterator2 __buffer,_Distance __buffer_size)
std::__search_n	./stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred,std::forward_iterator_tag)
std::__search_n	./stl_algo.h	/^    __search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,std::forward_iterator_tag)
std::__search_n	./stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIter	signature:(_RandomAccessIter __first,_RandomAccessIter __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred,std::random_access_iterator_tag)
std::__search_n	./stl_algo.h	/^    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIter	signature:(_RandomAccessIter __first,_RandomAccessIter __last,_Integer __count,const _Tp & __val,std::random_access_iterator_tag)
std::__shift_left	./valarray_before.h	/^  struct __shift_left$/;"	kind:struct	language:C++	namespace:std
std::__shift_left::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__shift_left	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__shift_right	./valarray_before.h	/^  struct __shift_right$/;"	kind:struct	language:C++	namespace:std
std::__shift_right::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::__shift_right	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::__sin	./valarray_before.h	/^  struct __sin$/;"	kind:struct	language:C++	namespace:std
std::__sin::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sin	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__sinh	./valarray_before.h	/^  struct __sinh$/;"	kind:struct	language:C++	namespace:std
std::__sinh::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sinh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__sqrt	./valarray_before.h	/^  struct __sqrt$/;"	kind:struct	language:C++	namespace:std
std::__sqrt::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__sqrt	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__stable_partition_adaptive	./stl_algo.h	/^    __stable_partition_adaptive(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,_Distance __len,_Pointer __buffer,_Distance __buffer_size)
std::__stable_sort_adaptive	./stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Distance __buffer_size)
std::__stable_sort_adaptive	./stl_algo.h	/^    __stable_sort_adaptive(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Pointer __buffer,_Distance __buffer_size,_Compare __comp)
std::__tan	./valarray_before.h	/^  struct __tan$/;"	kind:struct	language:C++	namespace:std
std::__tan::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__tan	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__tanh	./valarray_before.h	/^  struct __tanh$/;"	kind:struct	language:C++	namespace:std
std::__tanh::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__tanh	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__throw_bad_alloc	./functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_cast	./functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_exception	./functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_typeid	./functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(void)
std::__throw_domain_error	./functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_invalid_argument	./functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_ios_failure	./functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_length_error	./functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_logic_error	./functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_out_of_range	./functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_overflow_error	./functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_range_error	./functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_runtime_error	./functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_underflow_error	./functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const char *)
std::__timepunct	./locale_facets.h	/^    class __timepunct : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::__timepunct::_M_am_pm	./locale_facets.h	/^      _M_am_pm(const _CharT** __ampm) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __ampm) const
std::__timepunct::_M_am_pm_format	./locale_facets.h	/^      _M_am_pm_format(const _CharT* __ampm) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT * __ampm) const
std::__timepunct::_M_c_locale_timepunct	./locale_facets.h	/^      __c_locale			_M_c_locale_timepunct;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:__c_locale	access:protected
std::__timepunct::_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:__cache_type *	access:protected
std::__timepunct::_M_date_formats	./locale_facets.h	/^      _M_date_formats(const _CharT** __date) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __date) const
std::__timepunct::_M_date_time_formats	./locale_facets.h	/^      _M_date_time_formats(const _CharT** __dt) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __dt) const
std::__timepunct::_M_days	./locale_facets.h	/^      _M_days(const _CharT** __days) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __days) const
std::__timepunct::_M_days_abbreviated	./locale_facets.h	/^      _M_days_abbreviated(const _CharT** __days) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __days) const
std::__timepunct::_M_initialize_timepunct	./locale_facets.h	/^      _M_initialize_timepunct(__c_locale __cloc = NULL);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL)
std::__timepunct::_M_initialize_timepunct	./locale_facets.h	/^    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(__c_locale __cloc)
std::__timepunct::_M_initialize_timepunct	./locale_facets.h	/^    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(__c_locale __cloc)
std::__timepunct::_M_months	./locale_facets.h	/^      _M_months(const _CharT** __months) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __months) const
std::__timepunct::_M_months_abbreviated	./locale_facets.h	/^      _M_months_abbreviated(const _CharT** __months) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __months) const
std::__timepunct::_M_name_timepunct	./locale_facets.h	/^      const char*			_M_name_timepunct;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:const char *	access:protected
std::__timepunct::_M_put	./locale_facets.h	/^      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(_CharT * __s,size_t __maxlen,const _CharT * __format,const tm * __tm) const
std::__timepunct::_M_put	./locale_facets.h	/^    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const;$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(char *,size_t,const char *,const tm *) const
std::__timepunct::_M_put	./locale_facets.h	/^    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,$/;"	kind:prototype	language:C++	class:std::__timepunct	typeref:typename:void	signature:(wchar_t *,size_t,const wchar_t *,const tm *) const
std::__timepunct::_M_time_formats	./locale_facets.h	/^      _M_time_formats(const _CharT** __time) const$/;"	kind:function	language:C++	class:std::__timepunct	typeref:typename:void	access:public	signature:(const _CharT ** __time) const
std::__timepunct::__cache_type	./locale_facets.h	/^      typedef __timepunct_cache<_CharT>	__cache_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:__timepunct_cache<_CharT>	access:public
std::__timepunct::__char_type	./locale_facets.h	/^      typedef _CharT			__char_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:_CharT	access:public
std::__timepunct::__string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	kind:typedef	language:C++	class:std::__timepunct	typeref:typename:basic_string<_CharT>	access:public
std::__timepunct::__timepunct	./locale_facets.h	/^      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
std::__timepunct::__timepunct	./locale_facets.h	/^      __timepunct(__cache_type* __cache, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
std::__timepunct::__timepunct	./locale_facets.h	/^      __timepunct(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::__timepunct	access:public	signature:(size_t __refs=0)
std::__timepunct::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::__timepunct	typeref:typename:locale::id	access:public
std::__timepunct::~__timepunct	./locale_facets.h	/^      ~__timepunct();$/;"	kind:prototype	language:C++	class:std::__timepunct	access:protected	signature:()
std::__timepunct<_CharT>::id	./locale_facets.h	/^    locale::id __timepunct<_CharT>::id;$/;"	kind:member	language:C++	class:std::__timepunct<_CharT>	typeref:typename:locale::id
std::__timepunct_cache	./locale_facets.h	/^    struct __timepunct_cache : public locale::facet$/;"	kind:struct	language:C++	namespace:std	inherits:locale::facet
std::__timepunct_cache::_M_aday1	./locale_facets.h	/^      const _CharT*			_M_aday1;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday2	./locale_facets.h	/^      const _CharT*			_M_aday2;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday3	./locale_facets.h	/^      const _CharT*			_M_aday3;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday4	./locale_facets.h	/^      const _CharT*			_M_aday4;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday5	./locale_facets.h	/^      const _CharT*			_M_aday5;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday6	./locale_facets.h	/^      const _CharT*			_M_aday6;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_aday7	./locale_facets.h	/^      const _CharT*			_M_aday7;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_allocated	./locale_facets.h	/^      bool				_M_allocated;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:bool	access:public
std::__timepunct_cache::_M_am	./locale_facets.h	/^      const _CharT*			_M_am;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_am_pm_format	./locale_facets.h	/^      const _CharT*			_M_am_pm_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth01	./locale_facets.h	/^      const _CharT*			_M_amonth01;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth02	./locale_facets.h	/^      const _CharT*			_M_amonth02;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth03	./locale_facets.h	/^      const _CharT*			_M_amonth03;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth04	./locale_facets.h	/^      const _CharT*			_M_amonth04;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth05	./locale_facets.h	/^      const _CharT*			_M_amonth05;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth06	./locale_facets.h	/^      const _CharT*			_M_amonth06;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth07	./locale_facets.h	/^      const _CharT*			_M_amonth07;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth08	./locale_facets.h	/^      const _CharT*			_M_amonth08;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth09	./locale_facets.h	/^      const _CharT*			_M_amonth09;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth10	./locale_facets.h	/^      const _CharT*			_M_amonth10;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth11	./locale_facets.h	/^      const _CharT*			_M_amonth11;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_amonth12	./locale_facets.h	/^      const _CharT*			_M_amonth12;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_cache	./locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
std::__timepunct_cache::_M_date_era_format	./locale_facets.h	/^      const _CharT*			_M_date_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_date_format	./locale_facets.h	/^      const _CharT*			_M_date_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_date_time_era_format	./locale_facets.h	/^      const _CharT*			_M_date_time_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_date_time_format	./locale_facets.h	/^      const _CharT*			_M_date_time_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day1	./locale_facets.h	/^      const _CharT*			_M_day1;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day2	./locale_facets.h	/^      const _CharT*			_M_day2;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day3	./locale_facets.h	/^      const _CharT*			_M_day3;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day4	./locale_facets.h	/^      const _CharT*			_M_day4;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day5	./locale_facets.h	/^      const _CharT*			_M_day5;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day6	./locale_facets.h	/^      const _CharT*			_M_day6;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_day7	./locale_facets.h	/^      const _CharT*			_M_day7;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month01	./locale_facets.h	/^      const _CharT*			_M_month01;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month02	./locale_facets.h	/^      const _CharT*			_M_month02;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month03	./locale_facets.h	/^      const _CharT*			_M_month03;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month04	./locale_facets.h	/^      const _CharT*			_M_month04;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month05	./locale_facets.h	/^      const _CharT*			_M_month05;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month06	./locale_facets.h	/^      const _CharT*			_M_month06;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month07	./locale_facets.h	/^      const _CharT*			_M_month07;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month08	./locale_facets.h	/^      const _CharT*			_M_month08;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month09	./locale_facets.h	/^      const _CharT*			_M_month09;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month10	./locale_facets.h	/^      const _CharT*			_M_month10;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month11	./locale_facets.h	/^      const _CharT*			_M_month11;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_month12	./locale_facets.h	/^      const _CharT*			_M_month12;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_pm	./locale_facets.h	/^      const _CharT*			_M_pm;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_time_era_format	./locale_facets.h	/^      const _CharT*			_M_time_era_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_M_time_format	./locale_facets.h	/^      const _CharT*			_M_time_format;$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT *	access:public
std::__timepunct_cache::_S_timezones	./locale_facets.h	/^      static const _CharT*		_S_timezones[14];$/;"	kind:member	language:C++	struct:std::__timepunct_cache	typeref:typename:const _CharT * [14]	access:public
std::__timepunct_cache::__timepunct_cache	./locale_facets.h	/^      __timepunct_cache(const __timepunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	access:private	signature:(const __timepunct_cache &)
std::__timepunct_cache::__timepunct_cache	./locale_facets.h	/^      __timepunct_cache(size_t __refs = 0) : facet(__refs),$/;"	kind:function	language:C++	struct:std::__timepunct_cache	access:public	signature:(size_t __refs=0)
std::__timepunct_cache::operator =	./locale_facets.h	/^      operator=(const __timepunct_cache&);$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	typeref:typename:__timepunct_cache &	access:private	signature:(const __timepunct_cache &)
std::__timepunct_cache::~__timepunct_cache	./locale_facets.h	/^      ~__timepunct_cache();$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	access:public	signature:()
std::__timepunct_cache::~__timepunct_cache	./locale_facets.h	/^    __timepunct_cache<_CharT>::~__timepunct_cache()$/;"	kind:function	language:C++	class:std::__timepunct_cache	signature:()
std::__timepunct_cache<_CharT>::_S_timezones	./locale_facets.h	/^    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<_CharT>	typeref:typename:const _CharT * [14]
std::__timepunct_cache<char>::_S_timezones	./locale_facets.h	/^    __timepunct_cache<char>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<char>	typeref:typename:const char * [14]
std::__timepunct_cache<wchar_t>::_S_timezones	./locale_facets.h	/^    __timepunct_cache<wchar_t>::_S_timezones[14];$/;"	kind:member	language:C++	class:std::__timepunct_cache<wchar_t>	typeref:typename:const wchar_t * [14]
std::__unary_plus	./valarray_before.h	/^  struct __unary_plus$/;"	kind:struct	language:C++	namespace:std
std::__unary_plus::operator ()	./valarray_before.h	/^      _Tp operator()(const _Tp& __t) const$/;"	kind:function	language:C++	struct:std::__unary_plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __t) const
std::__unguarded_insertion_sort	./stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::__unguarded_insertion_sort	./stl_algo.h	/^    __unguarded_insertion_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::__unguarded_linear_insert	./stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __last,_Tp __val)
std::__unguarded_linear_insert	./stl_algo.h	/^    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __last,_Tp __val,_Compare __comp)
std::__unguarded_partition	./stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Tp __pivot)
std::__unguarded_partition	./stl_algo.h	/^    __unguarded_partition(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Tp __pivot,_Compare __comp)
std::__uninitialized_copy_a	./stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator __alloc)
std::__uninitialized_copy_a	./stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,allocator<_Tp>)
std::__uninitialized_copy_aux	./stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,__false_type)
std::__uninitialized_copy_aux	./stl_uninitialized.h	/^    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,__true_type)
std::__uninitialized_copy_copy	./stl_uninitialized.h	/^    __uninitialized_copy_copy(_InputIterator1 __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator __alloc)
std::__uninitialized_copy_fill	./stl_uninitialized.h	/^    __uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,const _Tp & __x,_Allocator __alloc)
std::__uninitialized_fill_a	./stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,_Allocator __alloc)
std::__uninitialized_fill_a	./stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,allocator<_Tp2>)
std::__uninitialized_fill_aux	./stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,__false_type)
std::__uninitialized_fill_aux	./stl_uninitialized.h	/^    __uninitialized_fill_aux(_ForwardIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,__true_type)
std::__uninitialized_fill_copy	./stl_uninitialized.h	/^    __uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __result,_ForwardIterator __mid,const _Tp & __x,_InputIterator __first,_InputIterator __last,_Allocator __alloc)
std::__uninitialized_fill_n_a	./stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,_Allocator __alloc)
std::__uninitialized_fill_n_a	./stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, $/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,allocator<_Tp2>)
std::__uninitialized_fill_n_aux	./stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,__false_type)
std::__uninitialized_fill_n_aux	./stl_uninitialized.h	/^    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,__true_type)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred,forward_iterator_tag,output_iterator_tag)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_OutputIterator __result,forward_iterator_tag,output_iterator_tag)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_BinaryPredicate __binary_pred,input_iterator_tag,forward_iterator_tag)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,input_iterator_tag,forward_iterator_tag)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred,input_iterator_tag,output_iterator_tag)
std::__unique_copy	./stl_algo.h	/^    __unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,input_iterator_tag,output_iterator_tag)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<_Tp> __b, size_t __n, size_t __s)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<_Tp> __b,size_t __n,size_t __s)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,_Array<_Tp> __b,size_t __n)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,_Array<_Tp> __b)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,_Array<_Tp> __b,_Array<size_t> __i)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s, _Array<_Tp> __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,_Array<_Tp> __b)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __a, size_t __n, size_t __s1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s1,_Array<_Tp> __b,size_t __s2)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(_Array<_Tp> __src, size_t __n, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __src,size_t __n,_Array<size_t> __i,_Array<_Tp> __dst,_Array<size_t> __j)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, _Tp* __restrict__ __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,_Tp * __restrict__ __b,size_t __n,size_t __s)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n, size_t __s,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,size_t __s,_Tp * __restrict__ __b)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,_Tp * __restrict__ __b,const size_t * __restrict__ __i)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,const size_t * __restrict__ __i,_Tp * __restrict__ __b,size_t __n)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n, size_t __s1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __src,size_t __n,size_t __s1,_Tp * __restrict__ __dst,size_t __s2)
std::__valarray_copy	./valarray_array.h	/^    __valarray_copy(const _Tp* __restrict__ __src, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __src,size_t __n,const size_t * __restrict__ __i,_Tp * __restrict__ __dst,const size_t * __restrict__ __j)
std::__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,size_t __n,size_t __s,_Tp * __restrict__ __o)
std::__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct (const _Tp* __restrict__ __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __a,const size_t * __restrict__ __i,_Tp * __restrict__ __o,size_t __n)
std::__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,_Array<_Tp> __b,size_t __n)
std::__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(_Array<_Tp> __a, size_t __n, size_t __s,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,_Array<_Tp> __b)
std::__valarray_copy_construct	./valarray_array.h	/^    __valarray_copy_construct(const _Tp* __restrict__ __b,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(const _Tp * __restrict__ __b,const _Tp * __restrict__ __e,_Tp * __restrict__ __o)
std::__valarray_default_construct	./valarray_array.h	/^    __valarray_default_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
std::__valarray_destroy_elements	./valarray_array.h	/^    __valarray_destroy_elements(_Tp* __restrict__ __b, _Tp* __restrict__ __e)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill (_Array<_Tp> __a, size_t __n, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,const _Tp & __t)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, _Array<size_t> __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,_Array<size_t> __i,size_t __n,const _Tp & __t)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Array<_Tp> __a, size_t __n, size_t __s, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Array<_Tp> __a,size_t __n,size_t __s,const _Tp & __t)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, const size_t* __restrict__ __i,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,const size_t * __restrict__ __i,size_t __n,const _Tp & __t)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n, const _Tp& __t)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,size_t __n,const _Tp & __t)
std::__valarray_fill	./valarray_array.h	/^    __valarray_fill(_Tp* __restrict__ __a, size_t __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __a,size_t __n,size_t __s,const _Tp & __t)
std::__valarray_fill_construct	./valarray_array.h	/^    __valarray_fill_construct(_Tp* __restrict__ __b, _Tp* __restrict__ __e,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp * __restrict__ __b,_Tp * __restrict__ __e,const _Tp __t)
std::__valarray_get_memory	./valarray_array.h	/^  __valarray_get_memory(size_t __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void *	signature:(size_t __n)
std::__valarray_get_storage	./valarray_array.h	/^    __valarray_get_storage(size_t __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp * 	signature:(size_t __n)
std::__valarray_max	./valarray_array.h	/^    __valarray_max(const _Ta& __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ta::value_type	signature:(const _Ta & __a)
std::__valarray_min	./valarray_array.h	/^    __valarray_min(const _Ta& __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ta::value_type	signature:(const _Ta & __a)
std::__valarray_product	./valarray_array.h	/^    __valarray_product(const _Tp* __restrict__ __f,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(const _Tp * __restrict__ __f,const _Tp * __restrict__ __l)
std::__valarray_release_memory	./valarray_array.h	/^  __valarray_release_memory(void* __p)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(void * __p)
std::__valarray_sum	./valarray_array.h	/^    __valarray_sum(const _Tp* __restrict__ __f, const _Tp* __restrict__ __l)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(const _Tp * __restrict__ __f,const _Tp * __restrict__ __l)
std::__write	./locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
std::__write	./locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
std::accumulate	./stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator __first,_InputIterator __last,_Tp __init)
std::accumulate	./stl_numeric.h	/^    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator __first,_InputIterator __last,_Tp __init,_BinaryOperation __binary_op)
std::adjacent_difference	./stl_numeric.h	/^    adjacent_difference(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryOperation __binary_op)
std::adjacent_difference	./stl_numeric.h	/^    adjacent_difference(_InputIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
std::adjacent_find	./stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::adjacent_find	./stl_algo.h	/^    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_BinaryPredicate __binary_pred)
std::advance	./stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_InputIterator & __i,_Distance __n)
std::allocator	./allocator.h	/^    class allocator: public __glibcxx_base_allocator<_Tp>$/;"	kind:class	language:C++	namespace:std	inherits:__glibcxx_base_allocator<_Tp>
std::allocator	./allocator.h	/^    class allocator<void>$/;"	kind:class	language:C++	namespace:std
std::allocator	./allocator.h	/^  extern template class allocator<char>;$/;"	kind:externvar	language:C++	namespace:std	typeref:meta:class
std::allocator	./allocator.h	/^  extern template class allocator<wchar_t>;$/;"	kind:externvar	language:C++	namespace:std	typeref:meta:class
std::allocator::allocator	./allocator.h	/^        allocator(const allocator<_Tp1>&) throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:(const allocator<_Tp1> &)
std::allocator::allocator	./allocator.h	/^      allocator() throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:()
std::allocator::allocator	./allocator.h	/^      allocator(const allocator& __a) throw()$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:(const allocator & __a)
std::allocator::const_pointer	./allocator.h	/^      typedef const _Tp* const_pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const _Tp *	access:public
std::allocator::const_pointer	./allocator.h	/^      typedef const void* const_pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const void *	access:public
std::allocator::const_reference	./allocator.h	/^      typedef const _Tp& const_reference;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:const _Tp &	access:public
std::allocator::difference_type	./allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::difference_type	./allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::pointer	./allocator.h	/^      typedef _Tp*       pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp *	access:public
std::allocator::pointer	./allocator.h	/^      typedef void*       pointer;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:void *	access:public
std::allocator::rebind	./allocator.h	/^        struct rebind$/;"	kind:struct	language:C++	class:std::allocator	access:public
std::allocator::rebind::other	./allocator.h	/^        { typedef allocator<_Tp1> other; };$/;"	kind:typedef	language:C++	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
std::allocator::reference	./allocator.h	/^      typedef _Tp&       reference;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp &	access:public
std::allocator::size_type	./allocator.h	/^      typedef size_t      size_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::size_type	./allocator.h	/^      typedef size_t     size_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::value_type	./allocator.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp	access:public
std::allocator::value_type	./allocator.h	/^      typedef void        value_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:void	access:public
std::allocator::~allocator	./allocator.h	/^      ~allocator() throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:()
std::back_insert_iterator	./stl_iterator.h	/^    class back_insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::back_insert_iterator::back_insert_iterator	./stl_iterator.h	/^      back_insert_iterator(_Container& __x) : container(&__x) { }$/;"	kind:function	language:C++	class:std::back_insert_iterator	access:public	signature:(_Container & __x)
std::back_insert_iterator::container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
std::back_insert_iterator::container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::back_insert_iterator	typeref:typename:_Container	access:public
std::back_insert_iterator::operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator	access:public	signature:(int)
std::back_insert_iterator::operator =	./stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::back_inserter	./stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:back_insert_iterator<_Container>	signature:(_Container & __x)
std::basic_ios	./basic_ios.h	/^    class basic_ios : public ios_base$/;"	kind:class	language:C++	namespace:std	inherits:ios_base
std::basic_ios::_M_cache_locale	./basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
std::basic_ios::_M_ctype	./basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
std::basic_ios::_M_fill	./basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:char_type	access:protected
std::basic_ios::_M_fill_init	./basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:bool	access:protected
std::basic_ios::_M_num_get	./basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
std::basic_ios::_M_num_put	./basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
std::basic_ios::_M_setstate	./basic_ios.h	/^      _M_setstate(iostate __state)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::_M_streambuf	./basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
std::basic_ios::_M_tie	./basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	kind:member	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
std::basic_ios::__ctype_type	./basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
std::basic_ios::__num_get_type	./basic_ios.h	/^						     __num_get_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::__num_put_type	./basic_ios.h	/^						     __num_put_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::bad	./basic_ios.h	/^      bad() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::basic_ios	./basic_ios.h	/^      basic_ios()$/;"	kind:function	language:C++	class:std::basic_ios	access:protected	signature:()
std::basic_ios::basic_ios	./basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::char_type	./basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_CharT	access:public
std::basic_ios::clear	./basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
std::basic_ios::copyfmt	./basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
std::basic_ios::eof	./basic_ios.h	/^      eof() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::exceptions	./basic_ios.h	/^      exceptions() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::exceptions	./basic_ios.h	/^      exceptions(iostate __except)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
std::basic_ios::fail	./basic_ios.h	/^      fail() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::fill	./basic_ios.h	/^      fill() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
std::basic_ios::fill	./basic_ios.h	/^      fill(char_type __ch)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
std::basic_ios::good	./basic_ios.h	/^      good() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::imbue	./basic_ios.h	/^      imbue(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::basic_ios::init	./basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::int_type	./basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
std::basic_ios::narrow	./basic_ios.h	/^      narrow(char_type __c, char __dfault) const;$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::basic_ios::off_type	./basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
std::basic_ios::operator !	./basic_ios.h	/^      operator!() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::operator void*	./basic_ios.h	/^      operator void*() const$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:() const
std::basic_ios::pos_type	./basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
std::basic_ios::rdbuf	./basic_ios.h	/^      rdbuf() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::rdbuf	./basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::rdstate	./basic_ios.h	/^      rdstate() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::setstate	./basic_ios.h	/^      setstate(iostate __state)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::tie	./basic_ios.h	/^      tie() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::tie	./basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
std::basic_ios::traits_type	./basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits	access:public
std::basic_ios::widen	./basic_ios.h	/^      widen(char __c) const;$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
std::basic_ios::~basic_ios	./basic_ios.h	/^      ~basic_ios() { }$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:()
std::basic_string	./basic_string.h	/^    class basic_string$/;"	kind:class	language:C++	namespace:std
std::basic_string::_Alloc_hider	./basic_string.h	/^      struct _Alloc_hider : _Alloc$/;"	kind:struct	language:C++	class:std::basic_string	inherits:_Alloc	access:private
std::basic_string::_Alloc_hider::_Alloc_hider	./basic_string.h	/^	_Alloc_hider(_CharT* __dat, const _Alloc& __a)$/;"	kind:function	language:C++	struct:std::basic_string::_Alloc_hider	access:public	signature:(_CharT * __dat,const _Alloc & __a)
std::basic_string::_Alloc_hider::_M_p	./basic_string.h	/^	_CharT* _M_p; \/\/ The actual data.$/;"	kind:member	language:C++	struct:std::basic_string::_Alloc_hider	typeref:typename:_CharT *	access:public
std::basic_string::_CharT_alloc_type	./basic_string.h	/^      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Alloc::template rebind<_CharT>::other	access:private
std::basic_string::_M_assign	./basic_string.h	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
std::basic_string::_M_check	./basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
std::basic_string::_M_check_length	./basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
std::basic_string::_M_copy	./basic_string.h	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_M_data	./basic_string.h	/^      _M_data() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:() const
std::basic_string::_M_data	./basic_string.h	/^      _M_data(_CharT* __p)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_CharT * __p)
std::basic_string::_M_dataplus	./basic_string.h	/^      mutable _Alloc_hider	_M_dataplus;$/;"	kind:member	language:C++	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
std::basic_string::_M_disjunct	./basic_string.h	/^      _M_disjunct(const _CharT* __s) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
std::basic_string::_M_ibegin	./basic_string.h	/^      _M_ibegin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
std::basic_string::_M_iend	./basic_string.h	/^      _M_iend() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
std::basic_string::_M_leak	./basic_string.h	/^      _M_leak()    \/\/ for use in begin() & non-const op[]$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:()
std::basic_string::_M_leak_hard	./basic_string.h	/^      _M_leak_hard();$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:()
std::basic_string::_M_limit	./basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
std::basic_string::_M_move	./basic_string.h	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_M_mutate	./basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,size_type __len2)
std::basic_string::_M_rep	./basic_string.h	/^      _M_rep() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_Rep *	access:private	signature:() const
std::basic_string::_M_replace_aux	./basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::_M_replace_dispatch	./basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
std::basic_string::_M_replace_dispatch	./basic_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_Integer __n,_Integer __val,__true_type)
std::basic_string::_M_replace_safe	./basic_string.h	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::_Rep	./basic_string.h	/^      struct _Rep : _Rep_base$/;"	kind:struct	language:C++	class:std::basic_string	inherits:_Rep_base	access:private
std::basic_string::_Rep::_M_clone	./basic_string.h	/^	_M_clone(const _Alloc&, size_type __res = 0);$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc &,size_type __res=0)
std::basic_string::_Rep::_M_destroy	./basic_string.h	/^	_M_destroy(const _Alloc&) throw();$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc &)
std::basic_string::_Rep::_M_dispose	./basic_string.h	/^	_M_dispose(const _Alloc& __a)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc & __a)
std::basic_string::_Rep::_M_grab	./basic_string.h	/^	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc & __alloc1,const _Alloc & __alloc2)
std::basic_string::_Rep::_M_is_leaked	./basic_string.h	/^	_M_is_leaked() const$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
std::basic_string::_Rep::_M_is_shared	./basic_string.h	/^	_M_is_shared() const$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
std::basic_string::_Rep::_M_refcopy	./basic_string.h	/^	_M_refcopy() throw()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::_Rep::_M_refdata	./basic_string.h	/^	_M_refdata() throw()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::_Rep::_M_set_leaked	./basic_string.h	/^	_M_set_leaked()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
std::basic_string::_Rep::_M_set_length_and_sharable	./basic_string.h	/^	_M_set_length_and_sharable(size_type __n)$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(size_type __n)
std::basic_string::_Rep::_M_set_sharable	./basic_string.h	/^	_M_set_sharable()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
std::basic_string::_Rep::_Raw_bytes_alloc	./basic_string.h	/^	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;$/;"	kind:typedef	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Alloc::template rebind<char>::other	access:public
std::basic_string::_Rep::_S_create	./basic_string.h	/^	_S_create(size_type, size_type, const _Alloc&);$/;"	kind:prototype	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Rep *	access:public	signature:(size_type,size_type,const _Alloc &)
std::basic_string::_Rep::_S_empty_rep	./basic_string.h	/^        _S_empty_rep()$/;"	kind:function	language:C++	struct:std::basic_string::_Rep	typeref:typename:_Rep &	access:public	signature:()
std::basic_string::_Rep::_S_empty_rep_storage	./basic_string.h	/^        static size_type _S_empty_rep_storage[];$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:size_type[]	access:public
std::basic_string::_Rep::_S_max_size	./basic_string.h	/^	static const size_type	_S_max_size;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:const size_type	access:public
std::basic_string::_Rep::_S_terminal	./basic_string.h	/^	static const _CharT	_S_terminal;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep	typeref:typename:const _CharT	access:public
std::basic_string::_Rep_base	./basic_string.h	/^      struct _Rep_base$/;"	kind:struct	language:C++	class:std::basic_string	access:private
std::basic_string::_Rep_base::_M_capacity	./basic_string.h	/^	size_type		_M_capacity;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
std::basic_string::_Rep_base::_M_length	./basic_string.h	/^	size_type		_M_length;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
std::basic_string::_Rep_base::_M_refcount	./basic_string.h	/^	_Atomic_word		_M_refcount;$/;"	kind:member	language:C++	struct:std::basic_string::_Rep_base	typeref:typename:_Atomic_word	access:public
std::basic_string::_S_construct	./basic_string.h	/^         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
std::basic_string::_S_construct	./basic_string.h	/^        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,const _Alloc & __a,forward_iterator_tag)
std::basic_string::_S_construct	./basic_string.h	/^        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a)
std::basic_string::_S_construct	./basic_string.h	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
std::basic_string::_S_construct_aux	./basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__false_type)
std::basic_string::_S_construct_aux	./basic_string.h	/^        _S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__true_type)
std::basic_string::_S_copy_chars	./basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
std::basic_string::_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
std::basic_string::_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
std::basic_string::_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
std::basic_string::_S_copy_chars	./basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
std::basic_string::_S_empty_rep	./basic_string.h	/^      _S_empty_rep()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:_Rep &	access:private	signature:()
std::basic_string::allocator_type	./basic_string.h	/^      typedef _Alloc					    allocator_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Alloc	access:public
std::basic_string::append	./basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::append	./basic_string.h	/^      append(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::append	./basic_string.h	/^      append(const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::append	./basic_string.h	/^      append(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::append	./basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::append	./basic_string.h	/^      append(size_type __n, _CharT __c);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::assign	./basic_string.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::assign	./basic_string.h	/^      assign(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::assign	./basic_string.h	/^      assign(const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::assign	./basic_string.h	/^      assign(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::assign	./basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::assign	./basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::at	./basic_string.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::basic_string::at	./basic_string.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
std::basic_string::basic_string	./basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	./basic_string.h	/^      basic_string();$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:()
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const _Alloc& __a);$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _Alloc & __a)
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const basic_string& __str);$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str)
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
std::basic_string::basic_string	./basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::basic_string	./basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());$/;"	kind:prototype	language:C++	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	./basic_string.h	/^    basic_string()$/;"	kind:function	language:C++	class:std::basic_string	signature:()
std::basic_string::begin	./basic_string.h	/^      begin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::begin	./basic_string.h	/^      begin()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::c_str	./basic_string.h	/^      c_str() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::capacity	./basic_string.h	/^      capacity() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::clear	./basic_string.h	/^      clear()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::compare	./basic_string.h	/^      compare(const _CharT* __s) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
std::basic_string::compare	./basic_string.h	/^      compare(const basic_string& __str) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
std::basic_string::compare	./basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
std::basic_string::compare	./basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
std::basic_string::compare	./basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
std::basic_string::compare	./basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2) const
std::basic_string::const_iterator	./basic_string.h	/^                                                            const_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
std::basic_string::const_pointer	./basic_string.h	/^      typedef typename _CharT_alloc_type::const_pointer	    const_pointer;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_pointer	access:public
std::basic_string::const_reference	./basic_string.h	/^      typedef typename _CharT_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_reference	access:public
std::basic_string::const_reverse_iterator	./basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::basic_string::copy	./basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
std::basic_string::data	./basic_string.h	/^      data() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::difference_type	./basic_string.h	/^      typedef typename _CharT_alloc_type::difference_type   difference_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::difference_type	access:public
std::basic_string::empty	./basic_string.h	/^      empty() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:bool	access:public	signature:() const
std::basic_string::end	./basic_string.h	/^      end() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::end	./basic_string.h	/^      end()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::erase	./basic_string.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::basic_string::erase	./basic_string.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __position)
std::basic_string::erase	./basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
std::basic_string::find	./basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find	./basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find	./basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find	./basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_not_of	./basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_not_of	./basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_not_of	./basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_not_of	./basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_of	./basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_of	./basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_of	./basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_of	./basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_last_not_of	./basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_not_of	./basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_not_of	./basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_not_of	./basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::find_last_of	./basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_of	./basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_of	./basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_of	./basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::get_allocator	./basic_string.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
std::basic_string::insert	./basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	./basic_string.h	/^      insert(iterator __p, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __p,_CharT __c)
std::basic_string::insert	./basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	./basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
std::basic_string::insert	./basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
std::basic_string::insert	./basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
std::basic_string::insert	./basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
std::basic_string::insert	./basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n)
std::basic_string::iterator	./basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
std::basic_string::length	./basic_string.h	/^      length() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::max_size	./basic_string.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::npos	./basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	kind:member	language:C++	class:std::basic_string	typeref:typename:const size_type	access:public
std::basic_string::operator +=	./basic_string.h	/^      operator+=(_CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator +=	./basic_string.h	/^      operator+=(const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator +=	./basic_string.h	/^      operator+=(const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator =	./basic_string.h	/^      operator=(_CharT __c) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator =	./basic_string.h	/^      operator=(const _CharT* __s) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator =	./basic_string.h	/^      operator=(const basic_string& __str) $/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator []	./basic_string.h	/^      operator[](size_type __pos)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
std::basic_string::operator [] 	./basic_string.h	/^      operator[] (size_type __pos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
std::basic_string::pointer	./basic_string.h	/^      typedef typename _CharT_alloc_type::pointer	    pointer;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::pointer	access:public
std::basic_string::push_back	./basic_string.h	/^      push_back(_CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
std::basic_string::rbegin	./basic_string.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::rbegin	./basic_string.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::reference	./basic_string.h	/^      typedef typename _CharT_alloc_type::reference	    reference;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::reference	access:public
std::basic_string::rend	./basic_string.h	/^      rend() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::rend	./basic_string.h	/^      rend()$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::replace	./basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_CharT * __k1,_CharT * __k2)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s,size_type __n)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const basic_string & __str)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,iterator __k1,iterator __k2)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,size_type __n,_CharT __c)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __k1,const _CharT * __k2)
std::basic_string::replace	./basic_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const_iterator __k1,const_iterator __k2)
std::basic_string::replace	./basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
std::basic_string::replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
std::basic_string::replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::replace	./basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::replace	./basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2)
std::basic_string::reserve	./basic_string.h	/^      reserve(size_type __res_arg = 0);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg=0)
std::basic_string::resize	./basic_string.h	/^      resize(size_type __n)$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
std::basic_string::resize	./basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::reverse_iterator	./basic_string.h	/^      typedef std::reverse_iterator<iterator>		    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
std::basic_string::rfind	./basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::rfind	./basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::rfind	./basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const;$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::rfind	./basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::size	./basic_string.h	/^      size() const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::size_type	./basic_string.h	/^      typedef typename _CharT_alloc_type::size_type	    size_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_CharT_alloc_type::size_type	access:public
std::basic_string::substr	./basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
std::basic_string::swap	./basic_string.h	/^      swap(basic_string& __s);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
std::basic_string::traits_type	./basic_string.h	/^      typedef _Traits					    traits_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Traits	access:public
std::basic_string::value_type	./basic_string.h	/^      typedef typename _Traits::char_type		    value_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
std::basic_string::~basic_string	./basic_string.h	/^      ~basic_string()$/;"	kind:function	language:C++	class:std::basic_string	access:public	signature:()
std::bidirectional_iterator_tag	./stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:forward_iterator_tag
std::binary_function	./stl_function.h	/^    struct binary_function$/;"	kind:struct	language:C++	namespace:std
std::binary_function::first_argument_type	./stl_function.h	/^      typedef _Arg1 first_argument_type;   \/\/\/< the type of the first argument$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Arg1	access:public
std::binary_function::result_type	./stl_function.h	/^      typedef _Result result_type;         \/\/\/< type of the return type$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Result	access:public
std::binary_function::second_argument_type	./stl_function.h	/^      typedef _Arg2 second_argument_type;  \/\/\/< the type of the second argument$/;"	kind:typedef	language:C++	struct:std::binary_function	typeref:typename:_Arg2	access:public
std::binary_negate	./stl_function.h	/^    class binary_negate$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
std::binary_negate::_M_pred	./stl_function.h	/^      _Predicate _M_pred;$/;"	kind:member	language:C++	class:std::binary_negate	typeref:typename:_Predicate	access:protected
std::binary_negate::binary_negate	./stl_function.h	/^      binary_negate(const _Predicate& __x)$/;"	kind:function	language:C++	class:std::binary_negate	access:public	signature:(const _Predicate & __x)
std::binary_negate::operator ()	./stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	kind:function	language:C++	class:std::binary_negate	typeref:typename:bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
std::binary_search	./stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::binary_search	./stl_algo.h	/^    binary_search(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::bind1st	./stl_function.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binder1st<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
std::bind2nd	./stl_function.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binder2nd<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
std::binder1st	./stl_function.h	/^    class binder1st$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
std::binder1st::binder1st	./stl_function.h	/^      binder1st(const _Operation& __x,$/;"	kind:function	language:C++	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
std::binder1st::op	./stl_function.h	/^      _Operation op;$/;"	kind:member	language:C++	class:std::binder1st	typeref:typename:_Operation	access:protected
std::binder1st::operator ()	./stl_function.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
std::binder1st::operator ()	./stl_function.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
std::binder1st::value	./stl_function.h	/^      typename _Operation::first_argument_type value;$/;"	kind:member	language:C++	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
std::binder2nd	./stl_function.h	/^    class binder2nd$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
std::binder2nd::binder2nd	./stl_function.h	/^      binder2nd(const _Operation& __x,$/;"	kind:function	language:C++	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
std::binder2nd::op	./stl_function.h	/^      _Operation op;$/;"	kind:member	language:C++	class:std::binder2nd	typeref:typename:_Operation	access:protected
std::binder2nd::operator ()	./stl_function.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
std::binder2nd::operator ()	./stl_function.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	kind:function	language:C++	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
std::binder2nd::value	./stl_function.h	/^      typename _Operation::second_argument_type value;$/;"	kind:member	language:C++	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
std::boolalpha	./ios_base.h	/^  boolalpha(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::codecvt	./codecvt.h	/^    class codecvt$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<_InternT,_ExternT,_StateT>
std::codecvt	./codecvt.h	/^    class codecvt<char, char, mbstate_t>$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<char,char,mbstate_t>
std::codecvt	./codecvt.h	/^    class codecvt<wchar_t, char, mbstate_t>$/;"	kind:class	language:C++	namespace:std	inherits:__codecvt_abstract_base<wchar_t,char,mbstate_t>
std::codecvt::_M_c_locale_codecvt	./codecvt.h	/^      __c_locale			_M_c_locale_codecvt;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:__c_locale	access:protected
std::codecvt::codecvt	./codecvt.h	/^      codecvt(__c_locale __cloc, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::codecvt	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::codecvt::codecvt	./codecvt.h	/^      codecvt(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::codecvt	access:public	signature:(size_t __refs=0)
std::codecvt::codecvt	./codecvt.h	/^      codecvt(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::codecvt	access:public	signature:(size_t __refs=0)
std::codecvt::do_always_noconv	./codecvt.h	/^      bool do_always_noconv() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:bool	access:protected	signature:() const
std::codecvt::do_always_noconv	./codecvt.h	/^      do_always_noconv() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:bool	access:protected	signature:() const
std::codecvt::do_encoding	./codecvt.h	/^      do_encoding() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
std::codecvt::do_encoding	./codecvt.h	/^      int do_encoding() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
std::codecvt::do_in	./codecvt.h	/^      do_in(state_type& __state, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
std::codecvt::do_in	./codecvt.h	/^      do_in(state_type& __state,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const extern_type * __from,const extern_type * __from_end,const extern_type * & __from_next,intern_type * __to,intern_type * __to_end,intern_type * & __to_next) const
std::codecvt::do_length	./codecvt.h	/^      do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
std::codecvt::do_length	./codecvt.h	/^      int do_length(state_type&, const extern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:(state_type &,const extern_type * __from,const extern_type * __end,size_t __max) const
std::codecvt::do_max_length	./codecvt.h	/^      do_max_length() const throw();$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:int	access:protected	signature:() const
std::codecvt::do_out	./codecvt.h	/^      do_out(state_type& __state, const intern_type* __from,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,const intern_type * __from,const intern_type * __from_end,const intern_type * & __from_next,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::codecvt::do_unshift	./codecvt.h	/^      do_unshift(state_type& __state, extern_type* __to,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::codecvt::do_unshift	./codecvt.h	/^      do_unshift(state_type& __state,$/;"	kind:prototype	language:C++	class:std::codecvt	typeref:typename:result	access:protected	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
std::codecvt::extern_type	./codecvt.h	/^      typedef _ExternT			extern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_ExternT	access:public
std::codecvt::extern_type	./codecvt.h	/^      typedef char			extern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:char	access:public
std::codecvt::id	./codecvt.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:locale::id	access:public
std::codecvt::id	./codecvt.h	/^      static locale::id id;$/;"	kind:member	language:C++	class:std::codecvt	typeref:typename:locale::id	access:public
std::codecvt::intern_type	./codecvt.h	/^      typedef _InternT			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_InternT	access:public
std::codecvt::intern_type	./codecvt.h	/^      typedef char			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:char	access:public
std::codecvt::intern_type	./codecvt.h	/^      typedef wchar_t			intern_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:wchar_t	access:public
std::codecvt::result	./codecvt.h	/^      typedef codecvt_base::result	result;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:codecvt_base::result	access:public
std::codecvt::state_type	./codecvt.h	/^      typedef _StateT			state_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:_StateT	access:public
std::codecvt::state_type	./codecvt.h	/^      typedef mbstate_t			state_type;$/;"	kind:typedef	language:C++	class:std::codecvt	typeref:typename:mbstate_t	access:public
std::codecvt::~codecvt	./codecvt.h	/^      ~codecvt() { }$/;"	kind:function	language:C++	class:std::codecvt	access:protected	signature:()
std::codecvt::~codecvt	./codecvt.h	/^      ~codecvt();$/;"	kind:prototype	language:C++	class:std::codecvt	access:protected	signature:()
std::codecvt<_InternT, _ExternT, _StateT>::id	./codecvt.h	/^    locale::id codecvt<_InternT, _ExternT, _StateT>::id;$/;"	kind:member	language:C++	class:std::codecvt<_InternT, _ExternT, _StateT>	typeref:typename:locale::id
std::codecvt_base	./codecvt.h	/^  class codecvt_base$/;"	kind:class	language:C++	namespace:std
std::codecvt_base::error	./codecvt.h	/^      error,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
std::codecvt_base::noconv	./codecvt.h	/^      noconv$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
std::codecvt_base::ok	./codecvt.h	/^      ok,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
std::codecvt_base::partial	./codecvt.h	/^      partial,$/;"	kind:enumerator	language:C++	enum:std::codecvt_base::result	access:public
std::codecvt_base::result	./codecvt.h	/^    enum result$/;"	kind:enum	language:C++	class:std::codecvt_base	access:public
std::codecvt_byname	./codecvt.h	/^    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>$/;"	kind:class	language:C++	namespace:std	inherits:codecvt<_InternT,_ExternT,_StateT>
std::codecvt_byname::codecvt_byname	./codecvt.h	/^      codecvt_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::codecvt_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::codecvt_byname::~codecvt_byname	./codecvt.h	/^      ~codecvt_byname() { }$/;"	kind:function	language:C++	class:std::codecvt_byname	access:protected	signature:()
std::collate	./locale_facets.h	/^    class collate : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::collate::_M_c_locale_collate	./locale_facets.h	/^      __c_locale			_M_c_locale_collate;$/;"	kind:member	language:C++	class:std::collate	typeref:typename:__c_locale	access:protected
std::collate::_M_compare	./locale_facets.h	/^      _M_compare(const _CharT*, const _CharT*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
std::collate::_M_compare	./locale_facets.h	/^    collate<char>::_M_compare(const char*, const char*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
std::collate::_M_compare	./locale_facets.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
std::collate::_M_transform	./locale_facets.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
std::collate::_M_transform	./locale_facets.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
std::collate::_M_transform	./locale_facets.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
std::collate::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::collate	typeref:typename:_CharT	access:public
std::collate::collate	./locale_facets.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::collate::collate	./locale_facets.h	/^      collate(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate	access:public	signature:(size_t __refs=0)
std::collate::compare	./locale_facets.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	kind:function	language:C++	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_compare	./locale_facets.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_hash	./locale_facets.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::do_transform	./locale_facets.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	kind:prototype	language:C++	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::hash	./locale_facets.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	kind:function	language:C++	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::collate	typeref:typename:locale::id	access:public
std::collate::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
std::collate::transform	./locale_facets.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	kind:function	language:C++	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::~collate	./locale_facets.h	/^      ~collate()$/;"	kind:function	language:C++	class:std::collate	access:protected	signature:()
std::collate<_CharT>::id	./locale_facets.h	/^    locale::id collate<_CharT>::id;$/;"	kind:member	language:C++	class:std::collate<_CharT>	typeref:typename:locale::id
std::collate_byname	./locale_facets.h	/^    class collate_byname : public collate<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:collate<_CharT>
std::collate_byname::char_type	./locale_facets.h	/^      typedef _CharT               char_type;$/;"	kind:typedef	language:C++	class:std::collate_byname	typeref:typename:_CharT	access:public
std::collate_byname::collate_byname	./locale_facets.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::collate_byname::string_type	./locale_facets.h	/^      typedef basic_string<_CharT> string_type;$/;"	kind:typedef	language:C++	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
std::collate_byname::~collate_byname	./locale_facets.h	/^      ~collate_byname() { }$/;"	kind:function	language:C++	class:std::collate_byname	access:protected	signature:()
std::const_mem_fun1_ref_t	./stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::const_mem_fun1_ref_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_ref_t::const_mem_fun1_ref_t	./stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	kind:function	language:C++	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_ref_t::operator ()	./stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	kind:function	language:C++	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
std::const_mem_fun1_t	./stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
std::const_mem_fun1_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_t::const_mem_fun1_t	./stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	kind:function	language:C++	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_t::operator ()	./stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	kind:function	language:C++	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
std::const_mem_fun_ref_t	./stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp,_Ret>
std::const_mem_fun_ref_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_ref_t::const_mem_fun_ref_t	./stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	kind:function	language:C++	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_ref_t::operator ()	./stl_function.h	/^      operator()(const _Tp& __r) const$/;"	kind:function	language:C++	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
std::const_mem_fun_t	./stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<const_Tp*,_Ret>
std::const_mem_fun_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	kind:prototype	language:C++	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_t::const_mem_fun_t	./stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	kind:function	language:C++	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_t::operator ()	./stl_function.h	/^      operator()(const _Tp* __p) const$/;"	kind:function	language:C++	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
std::copy	./stl_algobase.h	/^    copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
std::copy	./stl_algobase.h	/^    copy(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,ostreambuf_iterator<_CharT>)
std::copy	./streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
std::copy_backward	./stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::count	./stl_algo.h	/^    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __value)
std::count_if	./stl_algo.h	/^    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
std::ctype	./locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:__ctype_abstract_base<_CharT>
std::ctype	./locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,ctype_base
std::ctype	./locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	kind:class	language:C++	namespace:std	inherits:__ctype_abstract_base<wchar_t>
std::ctype::_M_bit	./locale_facets.h	/^      mask                      _M_bit[16];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:mask[16]	access:protected
std::ctype::_M_c_locale_ctype	./locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__c_locale	access:protected
std::ctype::_M_convert_to_wmask	./locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
std::ctype::_M_del	./locale_facets.h	/^      bool			_M_del;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_initialize_ctype	./locale_facets.h	/^      _M_initialize_ctype();$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:void	access:protected	signature:()
std::ctype::_M_narrow	./locale_facets.h	/^      char                      _M_narrow[128];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[128]	access:protected
std::ctype::_M_narrow	./locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_narrow_init	./locale_facets.h	/^      void _M_narrow_init() const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_narrow_ok	./locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_narrow_ok	./locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_table	./locale_facets.h	/^      const mask*		_M_table;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected
std::ctype::_M_tolower	./locale_facets.h	/^      __to_type			_M_tolower;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_toupper	./locale_facets.h	/^      __to_type			_M_toupper;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_widen	./locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_widen	./locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:wint_t[]	access:protected
std::ctype::_M_widen_init	./locale_facets.h	/^      void _M_widen_init() const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_widen_ok	./locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_wmask	./locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
std::ctype::__wmask_type	./locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:wctype_t	access:public
std::ctype::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:_CharT	access:public
std::ctype::char_type	./locale_facets.h	/^      typedef char		char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:char	access:public
std::ctype::char_type	./locale_facets.h	/^      typedef wchar_t		char_type;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:wchar_t	access:public
std::ctype::classic_table	./locale_facets.h	/^      classic_table() throw();$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected	signature:()
std::ctype::ctype	./locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	./locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::ctype::ctype	./locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	./locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	kind:function	language:C++	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::ctype	./locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::do_is	./locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::ctype::do_is	./locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::ctype::do_narrow	./locale_facets.h	/^      do_narrow(char_type __c, char) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char) const
std::ctype::do_narrow	./locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
std::ctype::do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char,char * __dest) const
std::ctype::do_narrow	./locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __dest) const
std::ctype::do_scan_is	./locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_scan_not	./locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_tolower	./locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_tolower	./locale_facets.h	/^      do_tolower(char_type) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type) const
std::ctype::do_tolower	./locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_toupper	./locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_toupper	./locale_facets.h	/^      do_toupper(char_type) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type) const
std::ctype::do_toupper	./locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_widen	./locale_facets.h	/^      do_widen(char __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	./locale_facets.h	/^      do_widen(char __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	./locale_facets.h	/^      do_widen(char) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char) const
std::ctype::do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
std::ctype::do_widen	./locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
std::ctype::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	./locale_facets.h	/^      static locale::id		id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	./locale_facets.h	/^      static locale::id        id;$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::is	./locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
std::ctype::is	./locale_facets.h	/^      is(mask __m, char __c) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
std::ctype::mask	./locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	kind:typedef	language:C++	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
std::ctype::narrow	./locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::ctype::narrow	./locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::scan_is	./locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::scan_not	./locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	kind:prototype	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::table	./locale_facets.h	/^      table() const throw()$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected	signature:() const
std::ctype::table_size	./locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:const size_t	access:public
std::ctype::tolower	./locale_facets.h	/^      tolower(char_type __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::tolower	./locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	./locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	./locale_facets.h	/^      toupper(char_type __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::widen	./locale_facets.h	/^      widen(char __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
std::ctype::widen	./locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::~ctype	./locale_facets.h	/^      ~ctype();$/;"	kind:prototype	language:C++	class:std::ctype	access:protected	signature:()
std::ctype<_CharT>::id	./locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	kind:member	language:C++	class:std::ctype<_CharT>	typeref:typename:locale::id
std::ctype_byname	./locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:ctype<_CharT>
std::ctype_byname::char_type	./locale_facets.h	/^      typedef _CharT		char_type;$/;"	kind:typedef	language:C++	class:std::ctype_byname	typeref:typename:_CharT	access:public
std::ctype_byname::ctype_byname	./locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::ctype_byname::ctype_byname	./locale_facets.h	/^    ctype_byname<char>::ctype_byname(const char*, size_t refs);$/;"	kind:prototype	language:C++	class:std::ctype_byname	signature:(const char *,size_t refs)
std::ctype_byname::ctype_byname	./locale_facets.h	/^    ctype_byname<wchar_t>::ctype_byname(const char*, size_t refs);$/;"	kind:prototype	language:C++	class:std::ctype_byname	signature:(const char *,size_t refs)
std::ctype_byname::~ctype_byname	./locale_facets.h	/^      ~ctype_byname() { };$/;"	kind:function	language:C++	class:std::ctype_byname	access:protected	signature:()
std::dec	./ios_base.h	/^  dec(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::deque	./stl_deque.h	/^    class deque : protected _Deque_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Deque_base<_Tp,_Alloc>
std::deque::_Alloc_value_type	./stl_deque.h	/^      typedef typename _Alloc::value_type        _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Alloc::value_type	access:private
std::deque::_Base	./stl_deque.h	/^      typedef _Deque_base<_Tp, _Alloc>           _Base;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Deque_base<_Tp,_Alloc>	access:private
std::deque::_M_assign_aux	./stl_deque.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::deque::_M_assign_aux	./stl_deque.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::deque::_M_assign_dispatch	./stl_deque.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::deque::_M_assign_dispatch	./stl_deque.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
std::deque::_M_destroy_data	./stl_deque.h	/^        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,const _Alloc1 &)
std::deque::_M_destroy_data	./stl_deque.h	/^      _M_destroy_data(iterator __first, iterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,const std::allocator<_Tp> &)
std::deque::_M_destroy_data_aux	./stl_deque.h	/^      _M_destroy_data_aux(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last)
std::deque::_M_destroy_data_dispatch	./stl_deque.h	/^      _M_destroy_data_dispatch(iterator __first, iterator __last, __false_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __first,iterator __last,__false_type)
std::deque::_M_destroy_data_dispatch	./stl_deque.h	/^      _M_destroy_data_dispatch(iterator, iterator, __true_type) { }$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator,iterator,__true_type)
std::deque::_M_erase_at_begin	./stl_deque.h	/^      _M_erase_at_begin(iterator __pos)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos)
std::deque::_M_erase_at_end	./stl_deque.h	/^      _M_erase_at_end(iterator __pos)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos)
std::deque::_M_fill_assign	./stl_deque.h	/^      _M_fill_assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
std::deque::_M_fill_initialize	./stl_deque.h	/^      _M_fill_initialize(const value_type& __value);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type & __value)
std::deque::_M_fill_insert	./stl_deque.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
std::deque::_M_initialize_dispatch	./stl_deque.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::deque::_M_initialize_dispatch	./stl_deque.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
std::deque::_M_insert_aux	./stl_deque.h	/^        _M_insert_aux(iterator __pos,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,size_type __n)
std::deque::_M_insert_aux	./stl_deque.h	/^      _M_insert_aux(iterator __pos, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(iterator __pos,const value_type & __x)
std::deque::_M_insert_aux	./stl_deque.h	/^      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
std::deque::_M_insert_dispatch	./stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
std::deque::_M_insert_dispatch	./stl_deque.h	/^        _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __x,__true_type)
std::deque::_M_new_elements_at_back	./stl_deque.h	/^      _M_new_elements_at_back(size_type __new_elements);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __new_elements)
std::deque::_M_new_elements_at_front	./stl_deque.h	/^      _M_new_elements_at_front(size_type __new_elements);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __new_elements)
std::deque::_M_pop_back_aux	./stl_deque.h	/^      void _M_pop_back_aux();$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:()
std::deque::_M_pop_front_aux	./stl_deque.h	/^      void _M_pop_front_aux();$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:()
std::deque::_M_push_back_aux	./stl_deque.h	/^      void _M_push_back_aux(const value_type&);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type &)
std::deque::_M_push_front_aux	./stl_deque.h	/^      void _M_push_front_aux(const value_type&);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(const value_type &)
std::deque::_M_range_check	./stl_deque.h	/^      _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __n) const
std::deque::_M_range_initialize	./stl_deque.h	/^        _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::deque::_M_range_initialize	./stl_deque.h	/^        _M_range_initialize(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::deque::_M_range_insert_aux	./stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _ForwardIterator __first,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::deque::_M_range_insert_aux	./stl_deque.h	/^        _M_range_insert_aux(iterator __pos, _InputIterator __first,$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::deque::_M_reallocate_map	./stl_deque.h	/^      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add,bool __add_at_front)
std::deque::_M_reserve_elements_at_back	./stl_deque.h	/^      _M_reserve_elements_at_back(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(size_type __n)
std::deque::_M_reserve_elements_at_front	./stl_deque.h	/^      _M_reserve_elements_at_front(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:protected	signature:(size_type __n)
std::deque::_M_reserve_map_at_back	./stl_deque.h	/^      _M_reserve_map_at_back(size_type __nodes_to_add = 1)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add=1)
std::deque::_M_reserve_map_at_front	./stl_deque.h	/^      _M_reserve_map_at_front(size_type __nodes_to_add = 1)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:protected	signature:(size_type __nodes_to_add=1)
std::deque::_Map_pointer	./stl_deque.h	/^      typedef pointer*                           _Map_pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:pointer *	access:protected
std::deque::_S_buffer_size	./stl_deque.h	/^      static size_t _S_buffer_size()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_t	access:protected	signature:()
std::deque::_Tp_alloc_type	./stl_deque.h	/^      typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::_Tp_alloc_type	access:private
std::deque::allocator_type	./stl_deque.h	/^      typedef _Alloc                             allocator_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Alloc	access:public
std::deque::assign	./stl_deque.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::deque::assign	./stl_deque.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
std::deque::at	./stl_deque.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::deque::at	./stl_deque.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:(size_type __n)
std::deque::back	./stl_deque.h	/^      back() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:() const
std::deque::back	./stl_deque.h	/^      back()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:()
std::deque::begin	./stl_deque.h	/^      begin() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_iterator	access:public	signature:() const
std::deque::begin	./stl_deque.h	/^      begin()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:()
std::deque::clear	./stl_deque.h	/^      clear()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
std::deque::const_iterator	./stl_deque.h	/^      typedef typename _Base::const_iterator             const_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::const_iterator	access:public
std::deque::const_pointer	./stl_deque.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::const_pointer	access:public
std::deque::const_reference	./stl_deque.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::const_reference	access:public
std::deque::const_reverse_iterator	./stl_deque.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::deque::deque	./stl_deque.h	/^        deque(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
std::deque::deque	./stl_deque.h	/^      deque(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(const allocator_type & __a=allocator_type ())
std::deque::deque	./stl_deque.h	/^      deque(const deque& __x)$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(const deque & __x)
std::deque::deque	./stl_deque.h	/^      deque(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::deque	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
std::deque::difference_type	./stl_deque.h	/^      typedef ptrdiff_t                          difference_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:ptrdiff_t	access:public
std::deque::empty	./stl_deque.h	/^      empty() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:bool	access:public	signature:() const
std::deque::end	./stl_deque.h	/^      end() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_iterator	access:public	signature:() const
std::deque::end	./stl_deque.h	/^      end()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:()
std::deque::erase	./stl_deque.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::deque::erase	./stl_deque.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __position)
std::deque::front	./stl_deque.h	/^      front() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:() const
std::deque::front	./stl_deque.h	/^      front()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:()
std::deque::get_allocator	./stl_deque.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:allocator_type	access:public	signature:() const
std::deque::insert	./stl_deque.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
std::deque::insert	./stl_deque.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::deque::insert	./stl_deque.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
std::deque::iterator	./stl_deque.h	/^      typedef typename _Base::iterator                   iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Base::iterator	access:public
std::deque::max_size	./stl_deque.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_type	access:public	signature:() const
std::deque::operator =	./stl_deque.h	/^      operator=(const deque& __x);$/;"	kind:prototype	language:C++	class:std::deque	typeref:typename:deque &	access:public	signature:(const deque & __x)
std::deque::operator []	./stl_deque.h	/^      operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::deque::operator []	./stl_deque.h	/^      operator[](size_type __n)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reference	access:public	signature:(size_type __n)
std::deque::pointer	./stl_deque.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::pointer	access:public
std::deque::pop_back	./stl_deque.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
std::deque::pop_front	./stl_deque.h	/^      pop_front()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:()
std::deque::push_back	./stl_deque.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(const value_type & __x)
std::deque::push_front	./stl_deque.h	/^      push_front(const value_type& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(const value_type & __x)
std::deque::rbegin	./stl_deque.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::deque::rbegin	./stl_deque.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reverse_iterator	access:public	signature:()
std::deque::reference	./stl_deque.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp_alloc_type::reference	access:public
std::deque::rend	./stl_deque.h	/^      rend() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::deque::rend	./stl_deque.h	/^      rend()$/;"	kind:function	language:C++	class:std::deque	typeref:typename:reverse_iterator	access:public	signature:()
std::deque::resize	./stl_deque.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
std::deque::reverse_iterator	./stl_deque.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:std::reverse_iterator<iterator>	access:public
std::deque::size	./stl_deque.h	/^      size() const$/;"	kind:function	language:C++	class:std::deque	typeref:typename:size_type	access:public	signature:() const
std::deque::size_type	./stl_deque.h	/^      typedef size_t                             size_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:size_t	access:public
std::deque::swap	./stl_deque.h	/^      swap(deque& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(deque & __x)
std::deque::value_type	./stl_deque.h	/^      typedef _Tp                                        value_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp	access:public
std::deque::~deque	./stl_deque.h	/^      ~deque()$/;"	kind:function	language:C++	class:std::deque	access:public	signature:()
std::distance	./stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
std::divides	./stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::divides::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::divides	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::equal	./stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
std::equal	./stl_algobase.h	/^    equal(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::equal_range	./stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_ForwardIterator,_ForwardIterator>	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::equal_range	./stl_algo.h	/^    equal_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_ForwardIterator,_ForwardIterator>	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::equal_to	./stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::equal_to::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::fill	./stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::fill	./stl_algobase.h	/^  fill(char* __first, char* __last, const char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(char * __first,char * __last,const char & __c)
std::fill	./stl_algobase.h	/^  fill(signed char* __first, signed char* __last, const signed char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(signed char * __first,signed char * __last,const signed char & __c)
std::fill	./stl_algobase.h	/^  fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(unsigned char * __first,unsigned char * __last,const unsigned char & __c)
std::fill	./stl_bvector.h	/^  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Bit_iterator __first,_Bit_iterator __last,const bool & __x)
std::fill	./stl_deque.h	/^    fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>& __first,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:void	signature:(const _Deque_iterator<_Tp,_Tp &,_Tp * > & __first,const _Deque_iterator<_Tp,_Tp &,_Tp * > & __last,const _Tp & __value)
std::fill_n	./stl_algobase.h	/^    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
std::fill_n	./stl_algobase.h	/^    fill_n(char* __first, _Size __n, const char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:char *	signature:(char * __first,_Size __n,const char & __c)
std::fill_n	./stl_algobase.h	/^    fill_n(signed char* __first, _Size __n, const signed char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:signed char *	signature:(signed char * __first,_Size __n,const signed char & __c)
std::fill_n	./stl_algobase.h	/^    fill_n(unsigned char* __first, _Size __n, const unsigned char& __c)$/;"	kind:function	language:C++	namespace:std	typeref:typename:unsigned char *	signature:(unsigned char * __first,_Size __n,const unsigned char & __c)
std::find	./stl_algo.h	/^    find(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,const _Tp & __val)
std::find	./stl_algo.h	/^    find(istreambuf_iterator<_CharT>, istreambuf_iterator<_CharT>,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT>,istreambuf_iterator<_CharT>,const _CharT &)
std::find	./streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
std::find_end	./stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2)
std::find_end	./stl_algo.h	/^    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __comp)
std::find_first_of	./stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2)
std::find_first_of	./stl_algo.h	/^    find_first_of(_InputIterator __first1, _InputIterator __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,_BinaryPredicate __comp)
std::find_if	./stl_algo.h	/^    find_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
std::fixed	./ios_base.h	/^  fixed(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::for_each	./stl_algo.h	/^    for_each(_InputIterator __first, _InputIterator __last, _Function __f)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Function	signature:(_InputIterator __first,_InputIterator __last,_Function __f)
std::forward_iterator_tag	./stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:input_iterator_tag
std::fpos	./postypes.h	/^    class fpos$/;"	kind:class	language:C++	namespace:std
std::fpos::_M_off	./postypes.h	/^      streamoff	                _M_off;$/;"	kind:member	language:C++	class:std::fpos	typeref:typename:streamoff	access:private
std::fpos::_M_state	./postypes.h	/^      _StateT			_M_state;$/;"	kind:member	language:C++	class:std::fpos	typeref:typename:_StateT	access:private
std::fpos::fpos	./postypes.h	/^      fpos()$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:()
std::fpos::fpos	./postypes.h	/^      fpos(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:(streamoff __off)
std::fpos::operator +	./postypes.h	/^      operator+(streamoff __off) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator +=	./postypes.h	/^      operator+=(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator -	./postypes.h	/^      operator-(const fpos& __other) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
std::fpos::operator -	./postypes.h	/^      operator-(streamoff __off) const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator -=	./postypes.h	/^      operator-=(streamoff __off)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator streamoff	./postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	kind:function	language:C++	class:std::fpos	access:public	signature:() const
std::fpos::state	./postypes.h	/^      state() const$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
std::fpos::state	./postypes.h	/^      state(_StateT __st)$/;"	kind:function	language:C++	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
std::front_insert_iterator	./stl_iterator.h	/^    class front_insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::front_insert_iterator::container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
std::front_insert_iterator::container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::front_insert_iterator	typeref:typename:_Container	access:public
std::front_insert_iterator::front_insert_iterator	./stl_iterator.h	/^      explicit front_insert_iterator(_Container& __x) : container(&__x) { }$/;"	kind:function	language:C++	class:std::front_insert_iterator	access:public	signature:(_Container & __x)
std::front_insert_iterator::operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator	access:public	signature:(int)
std::front_insert_iterator::operator =	./stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::front_inserter	./stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:front_insert_iterator<_Container>	signature:(_Container & __x)
std::generate	./stl_algo.h	/^    generate(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Generator __gen)
std::generate_n	./stl_algo.h	/^    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_OutputIterator __first,_Size __n,_Generator __gen)
std::getline	./basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::getline	./basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
std::getline	./basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
std::getline	./basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
std::greater	./stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::greater	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::greater_equal	./stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater_equal::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::gslice	./gslice.h	/^  class gslice$/;"	kind:class	language:C++	namespace:std
std::gslice::_Indexer	./gslice.h	/^    struct _Indexer$/;"	kind:struct	language:C++	class:std::gslice	access:private
std::gslice::_Indexer::_Indexer	./gslice.h	/^      _Indexer(size_t, const valarray<size_t>&,$/;"	kind:prototype	language:C++	struct:std::gslice::_Indexer	access:public	signature:(size_t,const valarray<size_t> &,const valarray<size_t> &)
std::gslice::_Indexer::_M_count	./gslice.h	/^      size_t _M_count;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public
std::gslice::_Indexer::_M_decrement_use	./gslice.h	/^      _M_decrement_use()$/;"	kind:function	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public	signature:()
std::gslice::_Indexer::_M_increment_use	./gslice.h	/^      _M_increment_use()$/;"	kind:function	language:C++	struct:std::gslice::_Indexer	typeref:typename:void	access:public	signature:()
std::gslice::_Indexer::_M_index	./gslice.h	/^      valarray<size_t> _M_index; \/\/ Linear array of referenced indices$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
std::gslice::_Indexer::_M_size	./gslice.h	/^      valarray<size_t> _M_size;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
std::gslice::_Indexer::_M_start	./gslice.h	/^      size_t _M_start;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:size_t	access:public
std::gslice::_Indexer::_M_stride	./gslice.h	/^      valarray<size_t> _M_stride;$/;"	kind:member	language:C++	struct:std::gslice::_Indexer	typeref:typename:valarray<size_t>	access:public
std::gslice::_M_index	./gslice.h	/^    _Indexer* _M_index;$/;"	kind:member	language:C++	class:std::gslice	typeref:typename:_Indexer *	access:private
std::gslice::gslice	./gslice.h	/^    gslice ();$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:()
std::gslice::gslice	./gslice.h	/^    gslice(const gslice&);$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:(const gslice &)
std::gslice::gslice	./gslice.h	/^    gslice(size_t, const valarray<size_t>&, const valarray<size_t>&);$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:(size_t,const valarray<size_t> &,const valarray<size_t> &)
std::gslice::gslice	./gslice.h	/^  gslice::gslice(const gslice& __g) : _M_index(__g._M_index)$/;"	kind:function	language:C++	class:std::gslice	signature:(const gslice & __g)
std::gslice::gslice	./gslice.h	/^  gslice::gslice(size_t __o, const valarray<size_t>& __l,$/;"	kind:function	language:C++	class:std::gslice	signature:(size_t __o,const valarray<size_t> & __l,const valarray<size_t> & __s)
std::gslice::gslice	./gslice.h	/^  inline gslice::gslice () : _M_index(0) {}$/;"	kind:function	language:C++	class:std::gslice	signature:()
std::gslice::operator =	./gslice.h	/^    gslice& operator=(const gslice&);$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:gslice &	access:public	signature:(const gslice &)
std::gslice::operator =	./gslice.h	/^  gslice::operator= (const gslice& __g)$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:gslice &	signature:(const gslice & __g)
std::gslice::size	./gslice.h	/^    valarray<size_t> size() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	access:public	signature:() const
std::gslice::size	./gslice.h	/^  gslice::size () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	signature:() const
std::gslice::start	./gslice.h	/^    size_t           start() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:size_t	access:public	signature:() const
std::gslice::start	./gslice.h	/^  gslice::start () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:size_t	signature:() const
std::gslice::stride	./gslice.h	/^    valarray<size_t> stride() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	access:public	signature:() const
std::gslice::stride	./gslice.h	/^  gslice::stride () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	signature:() const
std::gslice::~gslice	./gslice.h	/^    ~gslice();$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:()
std::gslice::~gslice	./gslice.h	/^  gslice::~gslice()$/;"	kind:function	language:C++	class:std::gslice	signature:()
std::gslice_array	./gslice_array.h	/^    class gslice_array$/;"	kind:class	language:C++	namespace:std
std::gslice_array::_M_array	./gslice_array.h	/^      _Array<_Tp>    _M_array;$/;"	kind:member	language:C++	class:std::gslice_array	typeref:typename:_Array<_Tp>	access:private
std::gslice_array::_M_index	./gslice_array.h	/^      const valarray<size_t>& _M_index;$/;"	kind:member	language:C++	class:std::gslice_array	typeref:typename:const valarray<size_t> &	access:private
std::gslice_array::gslice_array	./gslice_array.h	/^      gslice_array();$/;"	kind:prototype	language:C++	class:std::gslice_array	access:private	signature:()
std::gslice_array::gslice_array	./gslice_array.h	/^      gslice_array(_Array<_Tp>, const valarray<size_t>&);$/;"	kind:prototype	language:C++	class:std::gslice_array	access:private	signature:(_Array<_Tp>,const valarray<size_t> &)
std::gslice_array::gslice_array	./gslice_array.h	/^      gslice_array(const gslice_array&);$/;"	kind:prototype	language:C++	class:std::gslice_array	access:public	signature:(const gslice_array &)
std::gslice_array::gslice_array	./gslice_array.h	/^    gslice_array<_Tp>::gslice_array(_Array<_Tp> __a,$/;"	kind:function	language:C++	class:std::gslice_array	signature:(_Array<_Tp> __a,const valarray<size_t> & __i)
std::gslice_array::gslice_array	./gslice_array.h	/^    gslice_array<_Tp>::gslice_array(const gslice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::gslice_array	signature:(const gslice_array<_Tp> & __a)
std::gslice_array::operator %=	./gslice_array.h	/^        void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator %=	./gslice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator &=	./gslice_array.h	/^        void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator &=	./gslice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator *=	./gslice_array.h	/^        void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator *=	./gslice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator +=	./gslice_array.h	/^        void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator +=	./gslice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator -=	./gslice_array.h	/^        void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator -=	./gslice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator /=	./gslice_array.h	/^        void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator /=	./gslice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator <<=	./gslice_array.h	/^        void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator <<=	./gslice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator =	./gslice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator =	./gslice_array.h	/^      gslice_array& operator=(const gslice_array&);$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:gslice_array &	access:public	signature:(const gslice_array &)
std::gslice_array::operator =	./gslice_array.h	/^      gslice_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
std::gslice_array::operator =	./gslice_array.h	/^      void operator=(const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Tp &) const
std::gslice_array::operator =	./gslice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const _Tp & __t) const
std::gslice_array::operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const gslice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:gslice_array<_Tp> &	signature:(const gslice_array<_Tp> & __a)
std::gslice_array::operator =	./gslice_array.h	/^    gslice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::gslice_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
std::gslice_array::operator >>=	./gslice_array.h	/^        void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator >>=	./gslice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator ^=	./gslice_array.h	/^        void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator ^=	./gslice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::operator |=	./gslice_array.h	/^        void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::gslice_array::operator |=	./gslice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::gslice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::gslice_array::value_type	./gslice_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::gslice_array	typeref:typename:_Tp	access:public
std::has_facet	./localefwd.h	/^    has_facet(const locale& __loc) throw();$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(const locale & __loc)
std::hex	./ios_base.h	/^  hex(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::includes	./stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
std::includes	./stl_algo.h	/^    includes(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_Compare __comp)
std::indirect_array	./indirect_array.h	/^    class indirect_array$/;"	kind:class	language:C++	namespace:std
std::indirect_array::_M_array	./indirect_array.h	/^      const _Array<_Tp>	 _M_array;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const _Array<_Tp>	access:private
std::indirect_array::_M_index	./indirect_array.h	/^      const _Array<size_t> _M_index;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const _Array<size_t>	access:private
std::indirect_array::_M_sz	./indirect_array.h	/^      const size_t	 _M_sz;$/;"	kind:member	language:C++	class:std::indirect_array	typeref:typename:const size_t	access:private
std::indirect_array::indirect_array	./indirect_array.h	/^      indirect_array();$/;"	kind:prototype	language:C++	class:std::indirect_array	access:private	signature:()
std::indirect_array::indirect_array	./indirect_array.h	/^      indirect_array(_Array<_Tp>, size_t, _Array<size_t>);$/;"	kind:prototype	language:C++	class:std::indirect_array	access:private	signature:(_Array<_Tp>,size_t,_Array<size_t>)
std::indirect_array::indirect_array	./indirect_array.h	/^      indirect_array(const indirect_array&);$/;"	kind:prototype	language:C++	class:std::indirect_array	access:public	signature:(const indirect_array &)
std::indirect_array::indirect_array	./indirect_array.h	/^    indirect_array<_Tp>::indirect_array(_Array<_Tp> __a, size_t __s,$/;"	kind:function	language:C++	class:std::indirect_array	signature:(_Array<_Tp> __a,size_t __s,_Array<size_t> __i)
std::indirect_array::indirect_array	./indirect_array.h	/^    indirect_array<_Tp>::indirect_array(const indirect_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::indirect_array	signature:(const indirect_array<_Tp> & __a)
std::indirect_array::operator %=	./indirect_array.h	/^      void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator %=	./indirect_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator &=	./indirect_array.h	/^      void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator &=	./indirect_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator *=	./indirect_array.h	/^      void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator *=	./indirect_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator +=	./indirect_array.h	/^      void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator +=	./indirect_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator -=	./indirect_array.h	/^      void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator -=	./indirect_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator /=	./indirect_array.h	/^      void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator /=	./indirect_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator <<=	./indirect_array.h	/^      void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator <<=	./indirect_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator =	./indirect_array.h	/^      indirect_array& operator=(const indirect_array&);$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:indirect_array &	access:public	signature:(const indirect_array &)
std::indirect_array::operator =	./indirect_array.h	/^      indirect_array<_Tp>::operator=(const _Expr<_Dom, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
std::indirect_array::operator =	./indirect_array.h	/^      void operator= (const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Tp &) const
std::indirect_array::operator =	./indirect_array.h	/^      void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator =	./indirect_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const _Tp & __t) const
std::indirect_array::operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const indirect_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:indirect_array<_Tp> &	signature:(const indirect_array<_Tp> & __a)
std::indirect_array::operator =	./indirect_array.h	/^    indirect_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::indirect_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
std::indirect_array::operator >>=	./indirect_array.h	/^      void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator >>=	./indirect_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator ^=	./indirect_array.h	/^      void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator ^=	./indirect_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::operator |=	./indirect_array.h	/^      void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::indirect_array::operator |=	./indirect_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::indirect_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::indirect_array::value_type	./indirect_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::indirect_array	typeref:typename:_Tp	access:public
std::inner_product	./stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_Tp __init)
std::inner_product	./stl_numeric.h	/^    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Tp	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_Tp __init,_BinaryOperation1 __binary_op1,_BinaryOperation2 __binary_op2)
std::inplace_merge	./stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last)
std::inplace_merge	./stl_algo.h	/^    inplace_merge(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __middle,_BidirectionalIterator __last,_Compare __comp)
std::input_iterator_tag	./stl_iterator_base_types.h	/^  struct input_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std
std::insert_iterator	./stl_iterator.h	/^    class insert_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::insert_iterator::container	./stl_iterator.h	/^      _Container* container;$/;"	kind:member	language:C++	class:std::insert_iterator	typeref:typename:_Container *	access:protected
std::insert_iterator::container_type	./stl_iterator.h	/^      typedef _Container          container_type;$/;"	kind:typedef	language:C++	class:std::insert_iterator	typeref:typename:_Container	access:public
std::insert_iterator::insert_iterator	./stl_iterator.h	/^      insert_iterator(_Container& __x, typename _Container::iterator __i)$/;"	kind:function	language:C++	class:std::insert_iterator	access:public	signature:(_Container & __x,typename _Container::iterator __i)
std::insert_iterator::iter	./stl_iterator.h	/^      typename _Container::iterator iter;$/;"	kind:member	language:C++	class:std::insert_iterator	typeref:typename:_Container::iterator	access:protected
std::insert_iterator::operator *	./stl_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(int)
std::insert_iterator::operator =	./stl_iterator.h	/^      operator=(const typename _Container::const_reference __value)$/;"	kind:function	language:C++	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(const typename _Container::const_reference __value)
std::inserter	./stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	kind:function	language:C++	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,_Iterator __i)
std::internal	./ios_base.h	/^  internal(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::ios_base	./ios_base.h	/^  class ios_base$/;"	kind:class	language:C++	namespace:std
std::ios_base::Init	./ios_base.h	/^    class Init$/;"	kind:class	language:C++	class:std::ios_base	access:public
std::ios_base::Init::Init	./ios_base.h	/^      Init();$/;"	kind:prototype	language:C++	class:std::ios_base::Init	access:public	signature:()
std::ios_base::Init::_S_refcount	./ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	kind:member	language:C++	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
std::ios_base::Init::_S_synced_with_stdio	./ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	kind:member	language:C++	class:std::ios_base::Init	typeref:typename:bool	access:private
std::ios_base::Init::~Init	./ios_base.h	/^      ~Init();$/;"	kind:prototype	language:C++	class:std::ios_base::Init	access:public	signature:()
std::ios_base::_Callback_list	./ios_base.h	/^    struct _Callback_list$/;"	kind:struct	language:C++	class:std::ios_base	access:protected
std::ios_base::_Callback_list::_Callback_list	./ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
std::ios_base::_Callback_list::_M_add_reference	./ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
std::ios_base::_Callback_list::_M_fn	./ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
std::ios_base::_Callback_list::_M_index	./ios_base.h	/^      int			_M_index;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
std::ios_base::_Callback_list::_M_next	./ios_base.h	/^      _Callback_list*		_M_next;$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
std::ios_base::_Callback_list::_M_refcount	./ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	kind:member	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
std::ios_base::_Callback_list::_M_remove_reference	./ios_base.h	/^      _M_remove_reference() $/;"	kind:function	language:C++	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
std::ios_base::_M_call_callbacks	./ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
std::ios_base::_M_callbacks	./ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
std::ios_base::_M_dispose_callbacks	./ios_base.h	/^    _M_dispose_callbacks(void);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
std::ios_base::_M_exception	./ios_base.h	/^    iostate		_M_exception;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_flags	./ios_base.h	/^    fmtflags		_M_flags;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:protected
std::ios_base::_M_getloc	./ios_base.h	/^    _M_getloc() const { return _M_ios_locale; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
std::ios_base::_M_grow_words	./ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
std::ios_base::_M_init	./ios_base.h	/^    _M_init();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:protected	signature:()
std::ios_base::_M_ios_locale	./ios_base.h	/^    locale		_M_ios_locale;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:locale	access:protected
std::ios_base::_M_local_word	./ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words[]	access:protected
std::ios_base::_M_precision	./ios_base.h	/^    streamsize		_M_precision;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_streambuf_state	./ios_base.h	/^    iostate		_M_streambuf_state;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_width	./ios_base.h	/^    streamsize		_M_width;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_word	./ios_base.h	/^    _Words*		_M_word;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words *	access:protected
std::ios_base::_M_word_size	./ios_base.h	/^    int			_M_word_size;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:int	access:protected
std::ios_base::_M_word_zero	./ios_base.h	/^    _Words		_M_word_zero;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:_Words	access:protected
std::ios_base::_S_local_word_size	./ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	kind:enumerator	language:C++	enum:std::ios_base::__anon68d21f9d0103	access:public
std::ios_base::_Words	./ios_base.h	/^    struct _Words$/;"	kind:struct	language:C++	class:std::ios_base	access:protected
std::ios_base::_Words::_M_iword	./ios_base.h	/^      long	_M_iword;$/;"	kind:member	language:C++	struct:std::ios_base::_Words	typeref:typename:long	access:public
std::ios_base::_Words::_M_pword	./ios_base.h	/^      void*	_M_pword;$/;"	kind:member	language:C++	struct:std::ios_base::_Words	typeref:typename:void *	access:public
std::ios_base::_Words::_Words	./ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	kind:function	language:C++	struct:std::ios_base::_Words	access:public	signature:()
std::ios_base::__anon68d21f9d0103	./ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	kind:enum	language:C++	class:std::ios_base	access:protected
std::ios_base::adjustfield	./ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::app	./ios_base.h	/^    static const openmode app =		_S_app;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::ate	./ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::badbit	./ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::basefield	./ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::beg	./ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::binary	./ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::boolalpha	./ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::copyfmt_event	./ios_base.h	/^      copyfmt_event$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
std::ios_base::cur	./ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::dec	./ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::end	./ios_base.h	/^    static const seekdir end =		_S_end;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::eofbit	./ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::erase_event	./ios_base.h	/^      erase_event,$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
std::ios_base::event	./ios_base.h	/^    enum event$/;"	kind:enum	language:C++	class:std::ios_base	access:public
std::ios_base::event_callback	./ios_base.h	/^    typedef void (*event_callback) (event, ios_base&, int);$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:void (*)(event,ios_base &,int)	access:public
std::ios_base::failbit	./ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::failure	./ios_base.h	/^    class failure : public exception$/;"	kind:class	language:C++	class:std::ios_base	inherits:exception	access:public
std::ios_base::failure::_M_msg	./ios_base.h	/^      string _M_msg;$/;"	kind:member	language:C++	class:std::ios_base::failure	typeref:typename:string	access:private
std::ios_base::failure::failure	./ios_base.h	/^      failure(const string& __str) throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	access:public	signature:(const string & __str)
std::ios_base::failure::what	./ios_base.h	/^      what() const throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
std::ios_base::failure::~failure	./ios_base.h	/^      ~failure() throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	access:public	signature:()
std::ios_base::fixed	./ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::flags	./ios_base.h	/^    flags() const { return _M_flags; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
std::ios_base::flags	./ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::floatfield	./ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::fmtflags	./ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
std::ios_base::getloc	./ios_base.h	/^    getloc() const { return _M_ios_locale; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
std::ios_base::goodbit	./ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::hex	./ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::imbue	./ios_base.h	/^    imbue(const locale& __loc);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::ios_base::imbue_event	./ios_base.h	/^      imbue_event,$/;"	kind:enumerator	language:C++	enum:std::ios_base::event	access:public
std::ios_base::in	./ios_base.h	/^    static const openmode in =		_S_in;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::internal	./ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::io_state	./ios_base.h	/^    typedef int io_state;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
std::ios_base::ios_base	./ios_base.h	/^    ios_base();$/;"	kind:prototype	language:C++	class:std::ios_base	access:protected	signature:()
std::ios_base::ios_base	./ios_base.h	/^    ios_base(const ios_base&);$/;"	kind:prototype	language:C++	class:std::ios_base	access:private	signature:(const ios_base &)
std::ios_base::iostate	./ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
std::ios_base::iword	./ios_base.h	/^    iword(int __ix)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
std::ios_base::left	./ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::oct	./ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::open_mode	./ios_base.h	/^    typedef int open_mode;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
std::ios_base::openmode	./ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
std::ios_base::operator =	./ios_base.h	/^    operator=(const ios_base&);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
std::ios_base::out	./ios_base.h	/^    static const openmode out =		_S_out;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::precision	./ios_base.h	/^    precision() const { return _M_precision; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::precision	./ios_base.h	/^    precision(streamsize __prec)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
std::ios_base::pword	./ios_base.h	/^    pword(int __ix)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
std::ios_base::register_callback	./ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
std::ios_base::right	./ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::scientific	./ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::seek_dir	./ios_base.h	/^    typedef int seek_dir;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:int	access:public
std::ios_base::seekdir	./ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
std::ios_base::setf	./ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::setf	./ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
std::ios_base::showbase	./ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpoint	./ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpos	./ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::skipws	./ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::streamoff	./ios_base.h	/^    typedef std::streamoff streamoff;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:std::streamoff	access:public
std::ios_base::streampos	./ios_base.h	/^    typedef std::streampos streampos;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:std::streampos	access:public
std::ios_base::sync_with_stdio	./ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
std::ios_base::trunc	./ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::unitbuf	./ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::unsetf	./ios_base.h	/^    unsetf(fmtflags __mask) { _M_flags &= ~__mask; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
std::ios_base::uppercase	./ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::width	./ios_base.h	/^    width() const { return _M_width; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::width	./ios_base.h	/^    width(streamsize __wide)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
std::ios_base::xalloc	./ios_base.h	/^    xalloc() throw();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:int	access:public	signature:()
std::ios_base::~ios_base	./ios_base.h	/^    virtual ~ios_base();$/;"	kind:prototype	language:C++	class:std::ios_base	access:public	signature:()
std::isalnum	./locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalnum	./localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isalpha	./locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalpha	./localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iscntrl	./locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::iscntrl	./localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isdigit	./locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isdigit	./localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isgraph	./locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isgraph	./localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::islower	./locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::islower	./localefwd.h	/^    islower(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isprint	./locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isprint	./localefwd.h	/^    isprint(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::ispunct	./locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::ispunct	./localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isspace	./locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isspace	./localefwd.h	/^    isspace(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::istream_iterator	./stream_iterator.h	/^    class istream_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<input_iterator_tag,_Tp,_Dist,const_Tp*,const_Tp&>
std::istream_iterator::_M_equal	./stream_iterator.h	/^      _M_equal(const istream_iterator& __x) const$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:bool	access:public	signature:(const istream_iterator & __x) const
std::istream_iterator::_M_ok	./stream_iterator.h	/^      bool		_M_ok;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:bool	access:private
std::istream_iterator::_M_read	./stream_iterator.h	/^      _M_read()$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:void	access:private	signature:()
std::istream_iterator::_M_stream	./stream_iterator.h	/^      istream_type*	_M_stream;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:istream_type *	access:private
std::istream_iterator::_M_value	./stream_iterator.h	/^      _Tp		_M_value;$/;"	kind:member	language:C++	class:std::istream_iterator	typeref:typename:_Tp	access:private
std::istream_iterator::char_type	./stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:_CharT	access:public
std::istream_iterator::istream_iterator	./stream_iterator.h	/^      istream_iterator()$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:()
std::istream_iterator::istream_iterator	./stream_iterator.h	/^      istream_iterator(const istream_iterator& __obj)$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:(const istream_iterator & __obj)
std::istream_iterator::istream_iterator	./stream_iterator.h	/^      istream_iterator(istream_type& __s)$/;"	kind:function	language:C++	class:std::istream_iterator	access:public	signature:(istream_type & __s)
std::istream_iterator::istream_type	./stream_iterator.h	/^      typedef basic_istream<_CharT, _Traits> istream_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
std::istream_iterator::operator *	./stream_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:const _Tp &	access:public	signature:() const
std::istream_iterator::operator ++	./stream_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:istream_iterator &	access:public	signature:()
std::istream_iterator::operator ++	./stream_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:istream_iterator	access:public	signature:(int)
std::istream_iterator::operator ->	./stream_iterator.h	/^      operator->() const { return &(operator*()); }$/;"	kind:function	language:C++	class:std::istream_iterator	typeref:typename:const _Tp *	access:public	signature:() const
std::istream_iterator::traits_type	./stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:_Traits	access:public
std::istreambuf_iterator	./streambuf_iterator.h	/^    class istreambuf_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT&>
std::istreambuf_iterator::_M_at_eof	./streambuf_iterator.h	/^      _M_at_eof() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
std::istreambuf_iterator::_M_c	./streambuf_iterator.h	/^      mutable int_type		_M_c;$/;"	kind:member	language:C++	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
std::istreambuf_iterator::_M_get	./streambuf_iterator.h	/^      _M_get() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
std::istreambuf_iterator::_M_sbuf	./streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	kind:member	language:C++	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::istreambuf_iterator::char_type	./streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
std::istreambuf_iterator::equal	./streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:bool	access:public	signature:(const istreambuf_iterator & __b) const
std::istreambuf_iterator::int_type	./streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
std::istreambuf_iterator::istream_type	./streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
std::istreambuf_iterator::istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator() throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:()
std::istreambuf_iterator::istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
std::istreambuf_iterator::istreambuf_iterator	./streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) throw()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::istreambuf_iterator::operator *	./streambuf_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:char_type	access:public	signature:() const
std::istreambuf_iterator::operator ++	./streambuf_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
std::istreambuf_iterator::operator ++	./streambuf_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
std::istreambuf_iterator::streambuf_type	./streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::istreambuf_iterator::traits_type	./streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
std::isupper	./locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isupper	./localefwd.h	/^    isupper(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isxdigit	./locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isxdigit	./localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iter_swap	./stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::iterator	./stl_iterator_base_types.h	/^    struct iterator$/;"	kind:struct	language:C++	namespace:std
std::iterator::difference_type	./stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Distance	access:public
std::iterator::iterator_category	./stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Category	access:public
std::iterator::pointer	./stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Pointer	access:public
std::iterator::reference	./stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Reference	access:public
std::iterator::value_type	./stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Tp	access:public
std::iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits$/;"	kind:struct	language:C++	namespace:std
std::iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	kind:struct	language:C++	namespace:std
std::iterator_traits	./stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	kind:struct	language:C++	namespace:std
std::iterator_traits::difference_type	./stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
std::iterator_traits::difference_type	./stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::iterator_traits::iterator_category	./stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
std::iterator_traits::iterator_category	./stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::iterator_traits::pointer	./stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
std::iterator_traits::pointer	./stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
std::iterator_traits::pointer	./stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
std::iterator_traits::reference	./stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
std::iterator_traits::reference	./stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
std::iterator_traits::reference	./stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
std::iterator_traits::value_type	./stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp	access:public
std::iterator_traits::value_type	./stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::left	./ios_base.h	/^  left(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::less	./stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::less	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::less_equal	./stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less_equal::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::less_equal	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lexicographical_compare	./stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
std::lexicographical_compare	./stl_algobase.h	/^    lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_Compare __comp)
std::lexicographical_compare	./stl_algobase.h	/^  lexicographical_compare(const char* __first1, const char* __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const char * __first1,const char * __last1,const char * __first2,const char * __last2)
std::lexicographical_compare	./stl_algobase.h	/^  lexicographical_compare(const unsigned char* __first1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const unsigned char * __first1,const unsigned char * __last1,const unsigned char * __first2,const unsigned char * __last2)
std::list	./stl_list.h	/^    class list : protected _List_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_List_base<_Tp,_Alloc>
std::list::_Alloc_value_type	./stl_list.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Alloc::value_type	access:private
std::list::_Base	./stl_list.h	/^      typedef _List_base<_Tp, _Alloc>                    _Base;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_base<_Tp,_Alloc>	access:private
std::list::_M_assign_dispatch	./stl_list.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::list::_M_assign_dispatch	./stl_list.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
std::list::_M_check_equal_allocators	./stl_list.h	/^      _M_check_equal_allocators(list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(list & __x)
std::list::_M_create_node	./stl_list.h	/^      _M_create_node(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:_Node *	access:protected	signature:(const value_type & __x)
std::list::_M_erase	./stl_list.h	/^      _M_erase(iterator __position)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position)
std::list::_M_fill_assign	./stl_list.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
std::list::_M_fill_initialize	./stl_list.h	/^      _M_fill_initialize(size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __x)
std::list::_M_initialize_dispatch	./stl_list.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::list::_M_initialize_dispatch	./stl_list.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
std::list::_M_insert	./stl_list.h	/^      _M_insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position,const value_type & __x)
std::list::_M_transfer	./stl_list.h	/^      _M_transfer(iterator __position, iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:protected	signature:(iterator __position,iterator __first,iterator __last)
std::list::_Node	./stl_list.h	/^      typedef _List_node<_Tp>				 _Node;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_node<_Tp>	access:protected
std::list::_Tp_alloc_type	./stl_list.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Base::_Tp_alloc_type	access:private
std::list::allocator_type	./stl_list.h	/^      typedef _Alloc                                     allocator_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Alloc	access:public
std::list::assign	./stl_list.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::list::assign	./stl_list.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
std::list::back	./stl_list.h	/^      back() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reference	access:public	signature:() const
std::list::back	./stl_list.h	/^      back()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reference	access:public	signature:()
std::list::begin	./stl_list.h	/^      begin() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_iterator	access:public	signature:() const
std::list::begin	./stl_list.h	/^      begin()$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:()
std::list::clear	./stl_list.h	/^      clear()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::const_iterator	./stl_list.h	/^      typedef _List_const_iterator<_Tp>                  const_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_const_iterator<_Tp>	access:public
std::list::const_pointer	./stl_list.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::const_pointer	access:public
std::list::const_reference	./stl_list.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::const_reference	access:public
std::list::const_reverse_iterator	./stl_list.h	/^      typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::list::difference_type	./stl_list.h	/^      typedef ptrdiff_t                                  difference_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:ptrdiff_t	access:public
std::list::empty	./stl_list.h	/^      empty() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:bool	access:public	signature:() const
std::list::end	./stl_list.h	/^      end() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_iterator	access:public	signature:() const
std::list::end	./stl_list.h	/^      end()$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:()
std::list::erase	./stl_list.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::list::erase	./stl_list.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __position)
std::list::front	./stl_list.h	/^      front() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reference	access:public	signature:() const
std::list::front	./stl_list.h	/^      front()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reference	access:public	signature:()
std::list::get_allocator	./stl_list.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:allocator_type	access:public	signature:() const
std::list::insert	./stl_list.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
std::list::insert	./stl_list.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::list::insert	./stl_list.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
std::list::iterator	./stl_list.h	/^      typedef _List_iterator<_Tp>                        iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_List_iterator<_Tp>	access:public
std::list::list	./stl_list.h	/^        list(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::list	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
std::list::list	./stl_list.h	/^      list(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::list	access:public	signature:(const allocator_type & __a=allocator_type ())
std::list::list	./stl_list.h	/^      list(const list& __x)$/;"	kind:function	language:C++	class:std::list	access:public	signature:(const list & __x)
std::list::list	./stl_list.h	/^      list(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::list	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
std::list::max_size	./stl_list.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:size_type	access:public	signature:() const
std::list::merge	./stl_list.h	/^        merge(list&, _StrictWeakOrdering);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list &,_StrictWeakOrdering)
std::list::merge	./stl_list.h	/^      merge(list& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list & __x)
std::list::operator =	./stl_list.h	/^      operator=(const list& __x);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:list &	access:public	signature:(const list & __x)
std::list::pointer	./stl_list.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::pointer	access:public
std::list::pop_back	./stl_list.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::pop_front	./stl_list.h	/^      pop_front()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::push_back	./stl_list.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const value_type & __x)
std::list::push_front	./stl_list.h	/^      push_front(const value_type& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const value_type & __x)
std::list::rbegin	./stl_list.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::list::rbegin	./stl_list.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reverse_iterator	access:public	signature:()
std::list::reference	./stl_list.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp_alloc_type::reference	access:public
std::list::remove	./stl_list.h	/^      remove(const _Tp& __value);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(const _Tp & __value)
std::list::remove_if	./stl_list.h	/^        remove_if(_Predicate);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_Predicate)
std::list::rend	./stl_list.h	/^      rend() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::list::rend	./stl_list.h	/^      rend()$/;"	kind:function	language:C++	class:std::list	typeref:typename:reverse_iterator	access:public	signature:()
std::list::resize	./stl_list.h	/^      resize(size_type __new_size, value_type __x = value_type());$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
std::list::reverse	./stl_list.h	/^      reverse()$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::reverse_iterator	./stl_list.h	/^      typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:std::reverse_iterator<iterator>	access:public
std::list::size	./stl_list.h	/^      size() const$/;"	kind:function	language:C++	class:std::list	typeref:typename:size_type	access:public	signature:() const
std::list::size_type	./stl_list.h	/^      typedef size_t                                     size_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:size_t	access:public
std::list::sort	./stl_list.h	/^        sort(_StrictWeakOrdering);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_StrictWeakOrdering)
std::list::sort	./stl_list.h	/^      sort();$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::splice	./stl_list.h	/^      splice(iterator __position, list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x)
std::list::splice	./stl_list.h	/^      splice(iterator __position, list& __x, iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x,iterator __first,iterator __last)
std::list::splice	./stl_list.h	/^      splice(iterator __position, list& __x, iterator __i)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(iterator __position,list & __x,iterator __i)
std::list::swap	./stl_list.h	/^      swap(list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list & __x)
std::list::unique	./stl_list.h	/^        unique(_BinaryPredicate);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_BinaryPredicate)
std::list::unique	./stl_list.h	/^      unique();$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
std::list::value_type	./stl_list.h	/^      typedef _Tp                                        value_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp	access:public
std::locale	./locale_classes.h	/^  class locale$/;"	kind:class	language:C++	namespace:std
std::locale::_Impl	./locale_classes.h	/^  class locale::_Impl$/;"	kind:class	language:C++	class:std::locale
std::locale::_Impl::_Impl	./locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const _Impl &)
std::locale::_Impl::_Impl	./locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
std::locale::_Impl::_Impl	./locale_classes.h	/^    _Impl(const char*, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
std::locale::_Impl::_Impl	./locale_classes.h	/^    _Impl(size_t) throw();$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:(size_t)
std::locale::_Impl::_M_add_reference	./locale_classes.h	/^    _M_add_reference() throw()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_caches	./locale_classes.h	/^    const facet**			_M_caches;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_check_same_name	./locale_classes.h	/^    _M_check_same_name()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
std::locale::_Impl::_M_facets	./locale_classes.h	/^    const facet**			_M_facets;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_facets_size	./locale_classes.h	/^    size_t				_M_facets_size;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:size_t	access:private
std::locale::_Impl::_M_init_facet	./locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
std::locale::_Impl::_M_install_cache	./locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
std::locale::_Impl::_M_install_facet	./locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
std::locale::_Impl::_M_names	./locale_classes.h	/^    char**				_M_names;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:char **	access:private
std::locale::_Impl::_M_refcount	./locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
std::locale::_Impl::_M_remove_reference	./locale_classes.h	/^    _M_remove_reference() throw()$/;"	kind:function	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_replace_categories	./locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
std::locale::_Impl::_M_replace_category	./locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
std::locale::_Impl::_M_replace_facet	./locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
std::locale::_Impl::_S_facet_categories	./locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
std::locale::_Impl::_S_id_collate	./locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_ctype	./locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_messages	./locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_monetary	./locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_numeric	./locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_time	./locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	kind:member	language:C++	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::operator =	./locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
std::locale::_Impl::~_Impl	./locale_classes.h	/^   ~_Impl() throw();$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:()
std::locale::_M_coalesce	./locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::_M_impl	./locale_classes.h	/^    _Impl*		_M_impl;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_categories	./locale_classes.h	/^    static const char* const* const _S_categories;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const char * const * const	access:private
std::locale::_S_categories_size	./locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	kind:enumerator	language:C++	enum:std::locale::__anonc75c47750103	access:public
std::locale::_S_classic	./locale_classes.h	/^    static _Impl*       _S_classic;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_global	./locale_classes.h	/^    static _Impl*	_S_global;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_initialize	./locale_classes.h	/^    _S_initialize();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_initialize_once	./locale_classes.h	/^    _S_initialize_once();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_normalize_category	./locale_classes.h	/^    _S_normalize_category(category);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:category	access:private	signature:(category)
std::locale::_S_once	./locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:__gthread_once_t	access:private
std::locale::__anonc75c47750103	./locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	kind:enum	language:C++	class:std::locale	access:private
std::locale::all	./locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::category	./locale_classes.h	/^    typedef int	category;$/;"	kind:typedef	language:C++	class:std::locale	typeref:typename:int	access:public
std::locale::classic	./locale_classes.h	/^    classic();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:const locale &	access:public	signature:()
std::locale::collate	./locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::combine	./locale_classes.h	/^      combine(const locale& __other) const;$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __other) const
std::locale::ctype	./locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::facet	./locale_classes.h	/^  class locale::facet$/;"	kind:class	language:C++	class:std::locale
std::locale::facet::_M_add_reference	./locale_classes.h	/^    _M_add_reference() const throw()$/;"	kind:function	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_M_refcount	./locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
std::locale::facet::_M_remove_reference	./locale_classes.h	/^    _M_remove_reference() const throw()$/;"	kind:function	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_S_c_locale	./locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:private
std::locale::facet::_S_c_name	./locale_classes.h	/^    static const char			_S_c_name[2];$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:const char[2]	access:private
std::locale::facet::_S_clone_c_locale	./locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc);$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_create_c_locale	./locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
std::locale::facet::_S_destroy_c_locale	./locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_get_c_locale	./locale_classes.h	/^    _S_get_c_locale();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
std::locale::facet::_S_get_c_name	./locale_classes.h	/^    _S_get_c_name();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:const char *	access:protected	signature:()
std::locale::facet::_S_initialize_once	./locale_classes.h	/^    _S_initialize_once();$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:void	access:private	signature:()
std::locale::facet::_S_once	./locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	kind:member	language:C++	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
std::locale::facet::facet	./locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::facet	access:private	signature:(const facet &)
std::locale::facet::facet	./locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	kind:function	language:C++	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
std::locale::facet::operator =	./locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
std::locale::facet::~facet	./locale_classes.h	/^    ~facet();$/;"	kind:prototype	language:C++	class:std::locale::facet	access:protected	signature:()
std::locale::global	./locale_classes.h	/^    global(const locale&);$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:locale	access:public	signature:(const locale &)
std::locale::id	./locale_classes.h	/^  class locale::id$/;"	kind:class	language:C++	class:std::locale
std::locale::id::_M_id	./locale_classes.h	/^    _M_id() const;$/;"	kind:prototype	language:C++	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
std::locale::id::_M_index	./locale_classes.h	/^    mutable size_t		_M_index;$/;"	kind:member	language:C++	class:std::locale::id	typeref:typename:size_t	access:private
std::locale::id::_S_refcount	./locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	kind:member	language:C++	class:std::locale::id	typeref:typename:_Atomic_word	access:private
std::locale::id::id	./locale_classes.h	/^    id() { }$/;"	kind:function	language:C++	class:std::locale::id	access:public	signature:()
std::locale::id::id	./locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::id	access:private	signature:(const id &)
std::locale::id::operator =	./locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	kind:prototype	language:C++	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
std::locale::locale	./locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
std::locale::locale	./locale_classes.h	/^    locale() throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:()
std::locale::locale	./locale_classes.h	/^    locale(_Impl*) throw();$/;"	kind:prototype	language:C++	class:std::locale	access:private	signature:(_Impl *)
std::locale::locale	./locale_classes.h	/^    locale(const char* __s);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const char * __s)
std::locale::locale	./locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
std::locale::locale	./locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::locale	./locale_classes.h	/^    locale(const locale& __other) throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:(const locale & __other)
std::locale::locale	./locale_classes.h	/^    locale::locale(const locale& __other, _Facet* __f)$/;"	kind:function	language:C++	class:std::locale	signature:(const locale & __other,_Facet * __f)
std::locale::messages	./locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::monetary	./locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::name	./locale_classes.h	/^    name() const;$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:string	access:public	signature:() const
std::locale::none	./locale_classes.h	/^    static const category none		= 0;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::numeric	./locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::operator !=	./locale_classes.h	/^    operator!=(const locale& __other) const throw ()$/;"	kind:function	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
std::locale::operator ()	./locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
std::locale::operator =	./locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
std::locale::operator ==	./locale_classes.h	/^    operator==(const locale& __other) const throw ();$/;"	kind:prototype	language:C++	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
std::locale::time	./locale_classes.h	/^    static const category time		= 1L << 3;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
std::locale::~locale	./locale_classes.h	/^    ~locale() throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:()
std::logical_and	./stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_and::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::logical_and	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::logical_not	./stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,bool>
std::logical_not::operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::logical_not	typeref:typename:bool	access:public	signature:(const _Tp & __x) const
std::logical_or	./stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_or::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::logical_or	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lower_bound	./stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::lower_bound	./stl_algo.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::make_heap	./stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::make_heap	./stl_heap.h	/^    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::make_pair	./stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
std::map	./stl_map.h	/^    class map$/;"	kind:class	language:C++	namespace:std
std::map::_Alloc_value_type	./stl_map.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc::value_type	access:private
std::map::_M_t	./stl_map.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::map	typeref:typename:_Rep_type	access:private
std::map::_Pair_alloc_type	./stl_map.h	/^        _Pair_alloc_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc::template rebind<value_type>::other	access:private
std::map::_Rep_type	./stl_map.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rb_tree<key_type,value_type,_Select1st<value_type>,key_compare,_Pair_alloc_type>	access:private
std::map::allocator_type	./stl_map.h	/^      typedef _Alloc                                        allocator_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Alloc	access:public
std::map::at	./stl_map.h	/^      at(const key_type& __k) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const mapped_type &	access:public	signature:(const key_type & __k) const
std::map::at	./stl_map.h	/^      at(const key_type& __k)$/;"	kind:function	language:C++	class:std::map	typeref:typename:mapped_type &	access:public	signature:(const key_type & __k)
std::map::begin	./stl_map.h	/^      begin() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:() const
std::map::begin	./stl_map.h	/^      begin()$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:()
std::map::clear	./stl_map.h	/^      clear()$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:()
std::map::const_iterator	./stl_map.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::const_iterator	access:public
std::map::const_pointer	./stl_map.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::const_pointer	access:public
std::map::const_reference	./stl_map.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::const_reference	access:public
std::map::const_reverse_iterator	./stl_map.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::map::count	./stl_map.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
std::map::difference_type	./stl_map.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::difference_type	access:public
std::map::empty	./stl_map.h	/^      empty() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:bool	access:public	signature:() const
std::map::end	./stl_map.h	/^      end() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:() const
std::map::end	./stl_map.h	/^      end()$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:()
std::map::equal_range	./stl_map.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
std::map::equal_range	./stl_map.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
std::map::erase	./stl_map.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:(const key_type & __x)
std::map::erase	./stl_map.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
std::map::erase	./stl_map.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(iterator __position)
std::map::find	./stl_map.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::map::find	./stl_map.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::map::get_allocator	./stl_map.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:allocator_type	access:public	signature:() const
std::map::insert	./stl_map.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::map::insert	./stl_map.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:std::pair<iterator,bool>	access:public	signature:(const value_type & __x)
std::map::insert	./stl_map.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::map::iterator	./stl_map.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::iterator	access:public
std::map::key_comp	./stl_map.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:key_compare	access:public	signature:() const
std::map::key_compare	./stl_map.h	/^      typedef _Compare                                      key_compare;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Compare	access:public
std::map::key_type	./stl_map.h	/^      typedef _Key                                          key_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Key	access:public
std::map::lower_bound	./stl_map.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::map::lower_bound	./stl_map.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::map::map	./stl_map.h	/^        map(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::map	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::map::map	./stl_map.h	/^        map(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::map	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::map::map	./stl_map.h	/^      map()$/;"	kind:function	language:C++	class:std::map	access:public	signature:()
std::map::map	./stl_map.h	/^      map(const _Compare& __comp, const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::map	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::map::map	./stl_map.h	/^      map(const map& __x)$/;"	kind:function	language:C++	class:std::map	access:public	signature:(const map & __x)
std::map::mapped_type	./stl_map.h	/^      typedef _Tp                                           mapped_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Tp	access:public
std::map::max_size	./stl_map.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:() const
std::map::operator =	./stl_map.h	/^      operator=(const map& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:map &	access:public	signature:(const map & __x)
std::map::operator []	./stl_map.h	/^      operator[](const key_type& __k)$/;"	kind:function	language:C++	class:std::map	typeref:typename:mapped_type &	access:public	signature:(const key_type & __k)
std::map::pointer	./stl_map.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::pointer	access:public
std::map::rbegin	./stl_map.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::map::rbegin	./stl_map.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::map	typeref:typename:reverse_iterator	access:public	signature:()
std::map::reference	./stl_map.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Pair_alloc_type::reference	access:public
std::map::rend	./stl_map.h	/^      rend() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::map::rend	./stl_map.h	/^      rend()$/;"	kind:function	language:C++	class:std::map	typeref:typename:reverse_iterator	access:public	signature:()
std::map::reverse_iterator	./stl_map.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::reverse_iterator	access:public
std::map::size	./stl_map.h	/^      size() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:size_type	access:public	signature:() const
std::map::size_type	./stl_map.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:_Rep_type::size_type	access:public
std::map::swap	./stl_map.h	/^      swap(map& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(map & __x)
std::map::upper_bound	./stl_map.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::map::upper_bound	./stl_map.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::map::value_comp	./stl_map.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:value_compare	access:public	signature:() const
std::map::value_compare	./stl_map.h	/^      class value_compare$/;"	kind:class	language:C++	class:std::map	inherits:std::binary_function<value_type,value_type,bool>	access:public
std::map::value_compare::comp	./stl_map.h	/^	_Compare comp;$/;"	kind:member	language:C++	class:std::map::value_compare	typeref:typename:_Compare	access:protected
std::map::value_compare::operator ()	./stl_map.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	kind:function	language:C++	class:std::map::value_compare	typeref:typename:bool	access:public	signature:(const value_type & __x,const value_type & __y) const
std::map::value_compare::value_compare	./stl_map.h	/^	value_compare(_Compare __c)$/;"	kind:function	language:C++	class:std::map::value_compare	access:protected	signature:(_Compare __c)
std::map::value_type	./stl_map.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:std::pair<const _Key,_Tp>	access:public
std::mask_array	./mask_array.h	/^    class mask_array$/;"	kind:class	language:C++	namespace:std
std::mask_array::_M_array	./mask_array.h	/^      const _Array<_Tp>  _M_array;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const _Array<_Tp>	access:private
std::mask_array::_M_mask	./mask_array.h	/^      const _Array<bool> _M_mask;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const _Array<bool>	access:private
std::mask_array::_M_sz	./mask_array.h	/^      const size_t       _M_sz;$/;"	kind:member	language:C++	class:std::mask_array	typeref:typename:const size_t	access:private
std::mask_array::mask_array	./mask_array.h	/^      mask_array (const mask_array&);$/;"	kind:prototype	language:C++	class:std::mask_array	access:public	signature:(const mask_array &)
std::mask_array::mask_array	./mask_array.h	/^      mask_array();$/;"	kind:prototype	language:C++	class:std::mask_array	access:private	signature:()
std::mask_array::mask_array	./mask_array.h	/^      mask_array(_Array<_Tp>, size_t, _Array<bool>);$/;"	kind:prototype	language:C++	class:std::mask_array	access:private	signature:(_Array<_Tp>,size_t,_Array<bool>)
std::mask_array::mask_array	./mask_array.h	/^    inline mask_array<_Tp>::mask_array(const mask_array<_Tp>& a)$/;"	kind:function	language:C++	class:std::mask_array	signature:(const mask_array<_Tp> & a)
std::mask_array::mask_array	./mask_array.h	/^    mask_array<_Tp>::mask_array(_Array<_Tp> __a, size_t __s, _Array<bool> __m)$/;"	kind:function	language:C++	class:std::mask_array	signature:(_Array<_Tp> __a,size_t __s,_Array<bool> __m)
std::mask_array::operator %=	./mask_array.h	/^        void operator%=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator %=	./mask_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator &=	./mask_array.h	/^        void operator&=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator &=	./mask_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator *=	./mask_array.h	/^        void operator*=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator *=	./mask_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator +=	./mask_array.h	/^        void operator+=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator +=	./mask_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator -=	./mask_array.h	/^        void operator-=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator -=	./mask_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator /=	./mask_array.h	/^        void operator\/=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator /=	./mask_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator <<=	./mask_array.h	/^        void operator<<=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator <<=	./mask_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator =	./mask_array.h	/^        void operator=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator =	./mask_array.h	/^      mask_array& operator=(const mask_array&);$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:mask_array &	access:public	signature:(const mask_array &)
std::mask_array::operator =	./mask_array.h	/^      mask_array<_Tp>::operator=(const _Expr<_Ex, _Tp>& __e) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const _Expr<_Ex,_Tp> & __e) const
std::mask_array::operator =	./mask_array.h	/^      void operator=(const _Tp&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Tp &) const
std::mask_array::operator =	./mask_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const _Tp & __t) const
std::mask_array::operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const mask_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:mask_array<_Tp> &	signature:(const mask_array<_Tp> & __a)
std::mask_array::operator =	./mask_array.h	/^    mask_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::mask_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
std::mask_array::operator >>=	./mask_array.h	/^        void operator>>=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator >>=	./mask_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator ^=	./mask_array.h	/^        void operator^=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator ^=	./mask_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::operator |=	./mask_array.h	/^        void operator|=(const _Expr<_Dom,_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::mask_array::operator |=	./mask_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::mask_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::mask_array::value_type	./mask_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::mask_array	typeref:typename:_Tp	access:public
std::max	./stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::max	./stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::max_element	./stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::max_element	./stl_algo.h	/^    max_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Compare __comp)
std::mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
std::mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun	./stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun1_ref_t	./stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::mem_fun1_ref_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	kind:prototype	language:C++	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_ref_t::mem_fun1_ref_t	./stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	kind:function	language:C++	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_ref_t::operator ()	./stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	kind:function	language:C++	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
std::mem_fun1_t	./stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
std::mem_fun1_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	kind:prototype	language:C++	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_t::mem_fun1_t	./stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	kind:function	language:C++	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_t::operator ()	./stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	kind:function	language:C++	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
std::mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
std::mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const_mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun_ref	./stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun_ref_t	./stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp,_Ret>
std::mem_fun_ref_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	kind:prototype	language:C++	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_ref_t::mem_fun_ref_t	./stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	kind:function	language:C++	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_ref_t::operator ()	./stl_function.h	/^      operator()(_Tp& __r) const$/;"	kind:function	language:C++	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
std::mem_fun_t	./stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Tp*,_Ret>
std::mem_fun_t::_Ret	./stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	kind:prototype	language:C++	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_t::mem_fun_t	./stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	kind:function	language:C++	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_t::operator ()	./stl_function.h	/^      operator()(_Tp* __p) const$/;"	kind:function	language:C++	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
std::merge	./stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
std::merge	./stl_algo.h	/^    merge(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
std::messages	./locale_facets.h	/^    class messages : public locale::facet, public messages_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,messages_base
std::messages::_M_c_locale_messages	./locale_facets.h	/^      __c_locale			_M_c_locale_messages;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:__c_locale	access:protected
std::messages::_M_convert_from_char	./locale_facets.h	/^      _M_convert_from_char(char*) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:string_type	access:protected	signature:(char *) const
std::messages::_M_convert_to_char	./locale_facets.h	/^      _M_convert_to_char(const string_type& __msg) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:char *	access:protected	signature:(const string_type & __msg) const
std::messages::_M_name_messages	./locale_facets.h	/^      const char*			_M_name_messages;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:const char *	access:protected
std::messages::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::messages	typeref:typename:_CharT	access:public
std::messages::close	./locale_facets.h	/^      close(catalog __c) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:void	access:public	signature:(catalog __c) const
std::messages::do_close	./locale_facets.h	/^      do_close(catalog) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:void	access:protected	signature:(catalog) const
std::messages::do_get	./locale_facets.h	/^      do_get(catalog, int, int, const string_type& __dfault) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:string_type	access:protected	signature:(catalog,int,int,const string_type & __dfault) const
std::messages::do_get	./locale_facets.h	/^    messages<char>::do_get(catalog, int, int, const string&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:string	signature:(catalog,int,int,const string &) const
std::messages::do_get	./locale_facets.h	/^    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:wstring	signature:(catalog,int,int,const wstring &) const
std::messages::do_open	./locale_facets.h	/^      do_open(const basic_string<char>&, const locale&) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:catalog	access:protected	signature:(const basic_string<char> &,const locale &) const
std::messages::get	./locale_facets.h	/^      get(catalog __c, int __set, int __msgid, const string_type& __s) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:string_type	access:public	signature:(catalog __c,int __set,int __msgid,const string_type & __s) const
std::messages::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::messages	typeref:typename:locale::id	access:public
std::messages::messages	./locale_facets.h	/^      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
std::messages::messages	./locale_facets.h	/^      messages(size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages	access:public	signature:(size_t __refs=0)
std::messages::open	./locale_facets.h	/^      open(const basic_string<char>& __s, const locale& __loc) const$/;"	kind:function	language:C++	class:std::messages	typeref:typename:catalog	access:public	signature:(const basic_string<char> & __s,const locale & __loc) const
std::messages::open	./locale_facets.h	/^      open(const basic_string<char>&, const locale&, const char*) const;$/;"	kind:prototype	language:C++	class:std::messages	typeref:typename:catalog	access:public	signature:(const basic_string<char> &,const locale &,const char *) const
std::messages::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::messages	typeref:typename:basic_string<_CharT>	access:public
std::messages::~messages	./locale_facets.h	/^      ~messages();$/;"	kind:prototype	language:C++	class:std::messages	access:protected	signature:()
std::messages<_CharT>::id	./locale_facets.h	/^    locale::id messages<_CharT>::id;$/;"	kind:member	language:C++	class:std::messages<_CharT>	typeref:typename:locale::id
std::messages_base	./locale_facets.h	/^  struct messages_base$/;"	kind:struct	language:C++	namespace:std
std::messages_base::catalog	./locale_facets.h	/^    typedef int catalog;$/;"	kind:typedef	language:C++	struct:std::messages_base	typeref:typename:int	access:public
std::messages_byname	./locale_facets.h	/^    class messages_byname : public messages<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:messages<_CharT>
std::messages_byname::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::messages_byname	typeref:typename:_CharT	access:public
std::messages_byname::messages_byname	./locale_facets.h	/^      messages_byname(const char* __s, size_t __refs = 0);$/;"	kind:prototype	language:C++	class:std::messages_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::messages_byname::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::messages_byname	typeref:typename:basic_string<_CharT>	access:public
std::messages_byname::~messages_byname	./locale_facets.h	/^      ~messages_byname()$/;"	kind:function	language:C++	class:std::messages_byname	access:protected	signature:()
std::min	./stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::min	./stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	kind:function	language:C++	namespace:std	typeref:typename:const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::min_element	./stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::min_element	./stl_algo.h	/^    min_element(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Compare __comp)
std::minus	./stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::minus::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::minus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::mismatch	./stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
std::mismatch	./stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::modulus	./stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::modulus::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::modulus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::money_base	./locale_facets.h	/^  class money_base$/;"	kind:class	language:C++	namespace:std
std::money_base::_S_atoms	./locale_facets.h	/^    static const char* _S_atoms;$/;"	kind:member	language:C++	class:std::money_base	typeref:typename:const char *	access:public
std::money_base::_S_construct_pattern	./locale_facets.h	/^    _S_construct_pattern(char __precedes, char __space, char __posn);$/;"	kind:prototype	language:C++	class:std::money_base	typeref:typename:pattern	access:public	signature:(char __precedes,char __space,char __posn)
std::money_base::_S_default_pattern	./locale_facets.h	/^    static const pattern _S_default_pattern;$/;"	kind:member	language:C++	class:std::money_base	typeref:typename:const pattern	access:public
std::money_base::_S_end	./locale_facets.h	/^      _S_end = 11$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
std::money_base::_S_minus	./locale_facets.h	/^      _S_minus,$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
std::money_base::_S_zero	./locale_facets.h	/^      _S_zero,$/;"	kind:enumerator	language:C++	enum:std::money_base::__anon39ebb53d0303	access:public
std::money_base::__anon39ebb53d0303	./locale_facets.h	/^    {$/;"	kind:enum	language:C++	class:std::money_base	access:public
std::money_base::none	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
std::money_base::part	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enum	language:C++	class:std::money_base	access:public
std::money_base::pattern	./locale_facets.h	/^    struct pattern { char field[4]; };$/;"	kind:struct	language:C++	class:std::money_base	access:public
std::money_base::pattern::field	./locale_facets.h	/^    struct pattern { char field[4]; };$/;"	kind:member	language:C++	struct:std::money_base::pattern	typeref:typename:char[4]	access:public
std::money_base::sign	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
std::money_base::space	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
std::money_base::symbol	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
std::money_base::value	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
std::money_get	./locale_facets.h	/^    class money_get : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::money_get::_M_extract	./locale_facets.h	/^        _M_extract(iter_type __s, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,ios_base & __io,ios_base::iostate & __err,string & __digits) const
std::money_get::__do_get	./locale_facets.h	/^      __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,double & __units) const
std::money_get::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:_CharT	access:public
std::money_get::do_get	./locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,long double & __units) const
std::money_get::do_get	./locale_facets.h	/^      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::money_get	typeref:typename:iter_type	access:protected	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,string_type & __digits) const
std::money_get::get	./locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_get	typeref:typename:iter_type	access:public	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,long double & __units) const
std::money_get::get	./locale_facets.h	/^      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_get	typeref:typename:iter_type	access:public	signature:(iter_type __s,iter_type __end,bool __intl,ios_base & __io,ios_base::iostate & __err,string_type & __digits) const
std::money_get::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::money_get	typeref:typename:locale::id	access:public
std::money_get::iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:_InIter	access:public
std::money_get::money_get	./locale_facets.h	/^      money_get(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::money_get	access:public	signature:(size_t __refs=0)
std::money_get::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:basic_string<_CharT>	access:public
std::money_get::~money_get	./locale_facets.h	/^      ~money_get() { }$/;"	kind:function	language:C++	class:std::money_get	access:protected	signature:()
std::money_get<_CharT, _InIter>::id	./locale_facets.h	/^    locale::id money_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::money_get<_CharT, _InIter>	typeref:typename:locale::id
std::money_put	./locale_facets.h	/^    class money_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::money_put::_M_insert	./locale_facets.h	/^        _M_insert(iter_type __s, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,const string_type & __digits) const
std::money_put::__do_put	./locale_facets.h	/^      __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,double __units) const
std::money_put::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:_CharT	access:public
std::money_put::do_put	./locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,const string_type & __digits) const
std::money_put::do_put	./locale_facets.h	/^      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::money_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,long double __units) const
std::money_put::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::money_put	typeref:typename:locale::id	access:public
std::money_put::iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:_OutIter	access:public
std::money_put::money_put	./locale_facets.h	/^      money_put(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::money_put	access:public	signature:(size_t __refs=0)
std::money_put::put	./locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,const string_type & __digits) const
std::money_put::put	./locale_facets.h	/^      put(iter_type __s, bool __intl, ios_base& __io,$/;"	kind:function	language:C++	class:std::money_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,bool __intl,ios_base & __io,char_type __fill,long double __units) const
std::money_put::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:basic_string<_CharT>	access:public
std::money_put::~money_put	./locale_facets.h	/^      ~money_put() { }$/;"	kind:function	language:C++	class:std::money_put	access:protected	signature:()
std::money_put<_CharT, _OutIter>::id	./locale_facets.h	/^    locale::id money_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::money_put<_CharT, _OutIter>	typeref:typename:locale::id
std::moneypunct	./locale_facets.h	/^    class moneypunct : public locale::facet, public money_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,money_base
std::moneypunct::_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:__cache_type *	access:private
std::moneypunct::_M_initialize_moneypunct	./locale_facets.h	/^       _M_initialize_moneypunct(__c_locale __cloc = NULL,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL,const char * __name=NULL)
std::moneypunct::_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
std::moneypunct::_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
std::moneypunct::_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
std::moneypunct::_M_initialize_moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,$/;"	kind:prototype	language:C++	class:std::moneypunct	typeref:typename:void	signature:(__c_locale,const char *)
std::moneypunct::__cache_type	./locale_facets.h	/^      typedef __moneypunct_cache<_CharT, _Intl>     __cache_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:__moneypunct_cache<_CharT,_Intl>	access:public
std::moneypunct::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:_CharT	access:public
std::moneypunct::curr_symbol	./locale_facets.h	/^      curr_symbol() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
std::moneypunct::decimal_point	./locale_facets.h	/^      decimal_point() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:public	signature:() const
std::moneypunct::do_curr_symbol	./locale_facets.h	/^      do_curr_symbol()   const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
std::moneypunct::do_decimal_point	./locale_facets.h	/^      do_decimal_point() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:protected	signature:() const
std::moneypunct::do_frac_digits	./locale_facets.h	/^      do_frac_digits() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:int	access:protected	signature:() const
std::moneypunct::do_grouping	./locale_facets.h	/^      do_grouping() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string	access:protected	signature:() const
std::moneypunct::do_neg_format	./locale_facets.h	/^      do_neg_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:protected	signature:() const
std::moneypunct::do_negative_sign	./locale_facets.h	/^      do_negative_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
std::moneypunct::do_pos_format	./locale_facets.h	/^      do_pos_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:protected	signature:() const
std::moneypunct::do_positive_sign	./locale_facets.h	/^      do_positive_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:protected	signature:() const
std::moneypunct::do_thousands_sep	./locale_facets.h	/^      do_thousands_sep() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:protected	signature:() const
std::moneypunct::frac_digits	./locale_facets.h	/^      frac_digits() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:int	access:public	signature:() const
std::moneypunct::grouping	./locale_facets.h	/^      grouping() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string	access:public	signature:() const
std::moneypunct::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:locale::id	access:public
std::moneypunct::intl	./locale_facets.h	/^      static const bool			intl = _Intl;$/;"	kind:member	language:C++	class:std::moneypunct	typeref:typename:const bool	access:public
std::moneypunct::moneypunct	./locale_facets.h	/^      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(__c_locale __cloc,const char * __s,size_t __refs=0)
std::moneypunct::moneypunct	./locale_facets.h	/^      moneypunct(__cache_type* __cache, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
std::moneypunct::moneypunct	./locale_facets.h	/^      moneypunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	kind:function	language:C++	class:std::moneypunct	access:public	signature:(size_t __refs=0)
std::moneypunct::neg_format	./locale_facets.h	/^      neg_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:public	signature:() const
std::moneypunct::negative_sign	./locale_facets.h	/^      negative_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
std::moneypunct::pos_format	./locale_facets.h	/^      pos_format() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:pattern	access:public	signature:() const
std::moneypunct::positive_sign	./locale_facets.h	/^      positive_sign() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:string_type	access:public	signature:() const
std::moneypunct::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:basic_string<_CharT>	access:public
std::moneypunct::thousands_sep	./locale_facets.h	/^      thousands_sep() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:public	signature:() const
std::moneypunct::~moneypunct	./locale_facets.h	/^      ~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	access:protected	signature:()
std::moneypunct::~moneypunct	./locale_facets.h	/^    moneypunct<char, false>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
std::moneypunct::~moneypunct	./locale_facets.h	/^    moneypunct<char, true>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
std::moneypunct::~moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, false>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
std::moneypunct::~moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, true>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
std::moneypunct<_CharT, _Intl>::id	./locale_facets.h	/^    locale::id moneypunct<_CharT, _Intl>::id;$/;"	kind:member	language:C++	class:std::moneypunct<_CharT, _Intl>	typeref:typename:locale::id
std::moneypunct<_CharT, _Intl>::intl	./locale_facets.h	/^    const bool moneypunct<_CharT, _Intl>::intl;$/;"	kind:member	language:C++	class:std::moneypunct<_CharT, _Intl>	typeref:typename:const bool
std::moneypunct_byname	./locale_facets.h	/^    class moneypunct_byname : public moneypunct<_CharT, _Intl>$/;"	kind:class	language:C++	namespace:std	inherits:moneypunct<_CharT,_Intl>
std::moneypunct_byname::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::moneypunct_byname	typeref:typename:_CharT	access:public
std::moneypunct_byname::intl	./locale_facets.h	/^      static const bool intl = _Intl;$/;"	kind:member	language:C++	class:std::moneypunct_byname	typeref:typename:const bool	access:public
std::moneypunct_byname::moneypunct_byname	./locale_facets.h	/^      moneypunct_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::moneypunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::moneypunct_byname::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::moneypunct_byname	typeref:typename:basic_string<_CharT>	access:public
std::moneypunct_byname::~moneypunct_byname	./locale_facets.h	/^      ~moneypunct_byname() { }$/;"	kind:function	language:C++	class:std::moneypunct_byname	access:protected	signature:()
std::moneypunct_byname<_CharT, _Intl>::intl	./locale_facets.h	/^    const bool moneypunct_byname<_CharT, _Intl>::intl;$/;"	kind:member	language:C++	class:std::moneypunct_byname<_CharT, _Intl>	typeref:typename:const bool
std::multimap	./stl_multimap.h	/^    class multimap$/;"	kind:class	language:C++	namespace:std
std::multimap::_Alloc_value_type	./stl_multimap.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc::value_type	access:private
std::multimap::_M_t	./stl_multimap.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::multimap	typeref:typename:_Rep_type	access:private
std::multimap::_Pair_alloc_type	./stl_multimap.h	/^        _Pair_alloc_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc::template rebind<value_type>::other	access:private
std::multimap::_Rep_type	./stl_multimap.h	/^		       key_compare, _Pair_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rb_tree<key_type,value_type,_Select1st<value_type>,key_compare,_Pair_alloc_type>	access:private
std::multimap::allocator_type	./stl_multimap.h	/^      typedef _Alloc                                        allocator_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Alloc	access:public
std::multimap::begin	./stl_multimap.h	/^      begin() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:() const
std::multimap::begin	./stl_multimap.h	/^      begin()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:()
std::multimap::clear	./stl_multimap.h	/^      clear()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:()
std::multimap::const_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::const_iterator         const_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::const_iterator	access:public
std::multimap::const_pointer	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_pointer   const_pointer;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::const_pointer	access:public
std::multimap::const_reference	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::const_reference const_reference;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::const_reference	access:public
std::multimap::const_reverse_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::multimap::count	./stl_multimap.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
std::multimap::difference_type	./stl_multimap.h	/^      typedef typename _Rep_type::difference_type        difference_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::difference_type	access:public
std::multimap::empty	./stl_multimap.h	/^      empty() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:bool	access:public	signature:() const
std::multimap::end	./stl_multimap.h	/^      end() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:() const
std::multimap::end	./stl_multimap.h	/^      end()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:()
std::multimap::equal_range	./stl_multimap.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
std::multimap::equal_range	./stl_multimap.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
std::multimap::erase	./stl_multimap.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:(const key_type & __x)
std::multimap::erase	./stl_multimap.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
std::multimap::erase	./stl_multimap.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(iterator __position)
std::multimap::find	./stl_multimap.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multimap::find	./stl_multimap.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multimap::get_allocator	./stl_multimap.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:allocator_type	access:public	signature:() const
std::multimap::insert	./stl_multimap.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::multimap::insert	./stl_multimap.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const value_type & __x)
std::multimap::insert	./stl_multimap.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::multimap::iterator	./stl_multimap.h	/^      typedef typename _Rep_type::iterator               iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::iterator	access:public
std::multimap::key_comp	./stl_multimap.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:key_compare	access:public	signature:() const
std::multimap::key_compare	./stl_multimap.h	/^      typedef _Compare                                      key_compare;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Compare	access:public
std::multimap::key_type	./stl_multimap.h	/^      typedef _Key                                          key_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Key	access:public
std::multimap::lower_bound	./stl_multimap.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multimap::lower_bound	./stl_multimap.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multimap::mapped_type	./stl_multimap.h	/^      typedef _Tp                                           mapped_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Tp	access:public
std::multimap::max_size	./stl_multimap.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:() const
std::multimap::multimap	./stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::multimap::multimap	./stl_multimap.h	/^        multimap(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::multimap::multimap	./stl_multimap.h	/^      multimap()$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:()
std::multimap::multimap	./stl_multimap.h	/^      multimap(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::multimap::multimap	./stl_multimap.h	/^      multimap(const multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	access:public	signature:(const multimap & __x)
std::multimap::operator =	./stl_multimap.h	/^      operator=(const multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:multimap &	access:public	signature:(const multimap & __x)
std::multimap::pointer	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::pointer         pointer;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::pointer	access:public
std::multimap::rbegin	./stl_multimap.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::multimap::rbegin	./stl_multimap.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:reverse_iterator	access:public	signature:()
std::multimap::reference	./stl_multimap.h	/^      typedef typename _Pair_alloc_type::reference       reference;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Pair_alloc_type::reference	access:public
std::multimap::rend	./stl_multimap.h	/^      rend() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::multimap::rend	./stl_multimap.h	/^      rend()$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:reverse_iterator	access:public	signature:()
std::multimap::reverse_iterator	./stl_multimap.h	/^      typedef typename _Rep_type::reverse_iterator       reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::reverse_iterator	access:public
std::multimap::size	./stl_multimap.h	/^      size() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:size_type	access:public	signature:() const
std::multimap::size_type	./stl_multimap.h	/^      typedef typename _Rep_type::size_type              size_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:_Rep_type::size_type	access:public
std::multimap::swap	./stl_multimap.h	/^      swap(multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(multimap & __x)
std::multimap::upper_bound	./stl_multimap.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multimap::upper_bound	./stl_multimap.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multimap::value_comp	./stl_multimap.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:value_compare	access:public	signature:() const
std::multimap::value_compare	./stl_multimap.h	/^      class value_compare$/;"	kind:class	language:C++	class:std::multimap	inherits:std::binary_function<value_type,value_type,bool>	access:public
std::multimap::value_compare::comp	./stl_multimap.h	/^	_Compare comp;$/;"	kind:member	language:C++	class:std::multimap::value_compare	typeref:typename:_Compare	access:protected
std::multimap::value_compare::operator ()	./stl_multimap.h	/^	bool operator()(const value_type& __x, const value_type& __y) const$/;"	kind:function	language:C++	class:std::multimap::value_compare	typeref:typename:bool	access:public	signature:(const value_type & __x,const value_type & __y) const
std::multimap::value_compare::value_compare	./stl_multimap.h	/^	value_compare(_Compare __c)$/;"	kind:function	language:C++	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
std::multimap::value_type	./stl_multimap.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:std::pair<const _Key,_Tp>	access:public
std::multiplies	./stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::multiplies::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::multiplies	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::multiset	./stl_multiset.h	/^    class multiset$/;"	kind:class	language:C++	namespace:std
std::multiset::_Alloc_value_type	./stl_multiset.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc::value_type	access:private
std::multiset::_Key_alloc_type	./stl_multiset.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc::template rebind<_Key>::other	access:private
std::multiset::_M_t	./stl_multiset.h	/^      _Rep_type _M_t;$/;"	kind:member	language:C++	class:std::multiset	typeref:typename:_Rep_type	access:private
std::multiset::_Rep_type	./stl_multiset.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rb_tree<key_type,value_type,_Identity<value_type>,key_compare,_Key_alloc_type>	access:private
std::multiset::allocator_type	./stl_multiset.h	/^      typedef _Alloc   allocator_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Alloc	access:public
std::multiset::begin	./stl_multiset.h	/^      begin() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:() const
std::multiset::clear	./stl_multiset.h	/^      clear()$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:()
std::multiset::const_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_iterator	access:public
std::multiset::const_pointer	./stl_multiset.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::const_pointer	access:public
std::multiset::const_reference	./stl_multiset.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::const_reference	access:public
std::multiset::const_reverse_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::multiset::count	./stl_multiset.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
std::multiset::difference_type	./stl_multiset.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::difference_type	access:public
std::multiset::empty	./stl_multiset.h	/^      empty() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:bool	access:public	signature:() const
std::multiset::end	./stl_multiset.h	/^      end() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:() const
std::multiset::equal_range	./stl_multiset.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
std::multiset::equal_range	./stl_multiset.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
std::multiset::erase	./stl_multiset.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:(const key_type & __x)
std::multiset::erase	./stl_multiset.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
std::multiset::erase	./stl_multiset.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(iterator __position)
std::multiset::find	./stl_multiset.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multiset::find	./stl_multiset.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multiset::get_allocator	./stl_multiset.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:allocator_type	access:public	signature:() const
std::multiset::insert	./stl_multiset.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::multiset::insert	./stl_multiset.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const value_type & __x)
std::multiset::insert	./stl_multiset.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::multiset::iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_iterator	access:public
std::multiset::key_comp	./stl_multiset.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:key_compare	access:public	signature:() const
std::multiset::key_compare	./stl_multiset.h	/^      typedef _Compare key_compare;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Compare	access:public
std::multiset::key_type	./stl_multiset.h	/^      typedef _Key     key_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key	access:public
std::multiset::lower_bound	./stl_multiset.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multiset::lower_bound	./stl_multiset.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multiset::max_size	./stl_multiset.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:() const
std::multiset::multiset	./stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::multiset::multiset	./stl_multiset.h	/^        multiset(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::multiset::multiset	./stl_multiset.h	/^      multiset()$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:()
std::multiset::multiset	./stl_multiset.h	/^      multiset(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::multiset::multiset	./stl_multiset.h	/^      multiset(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	access:public	signature:(const multiset<_Key,_Compare,_Alloc> & __x)
std::multiset::operator =	./stl_multiset.h	/^      operator=(const multiset<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:multiset<_Key,_Compare,_Alloc> &	access:public	signature:(const multiset<_Key,_Compare,_Alloc> & __x)
std::multiset::pointer	./stl_multiset.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::pointer	access:public
std::multiset::rbegin	./stl_multiset.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:reverse_iterator	access:public	signature:() const
std::multiset::reference	./stl_multiset.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key_alloc_type::reference	access:public
std::multiset::rend	./stl_multiset.h	/^      rend() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:reverse_iterator	access:public	signature:() const
std::multiset::reverse_iterator	./stl_multiset.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::multiset::size	./stl_multiset.h	/^      size() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:size_type	access:public	signature:() const
std::multiset::size_type	./stl_multiset.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Rep_type::size_type	access:public
std::multiset::swap	./stl_multiset.h	/^      swap(multiset<_Key, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(multiset<_Key,_Compare,_Alloc> & __x)
std::multiset::upper_bound	./stl_multiset.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::multiset::upper_bound	./stl_multiset.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::multiset::value_comp	./stl_multiset.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:value_compare	access:public	signature:() const
std::multiset::value_compare	./stl_multiset.h	/^      typedef _Compare value_compare;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Compare	access:public
std::multiset::value_type	./stl_multiset.h	/^      typedef _Key     value_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key	access:public
std::negate	./stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:unary_function<_Tp,_Tp>
std::negate::operator ()	./stl_function.h	/^      operator()(const _Tp& __x) const$/;"	kind:function	language:C++	struct:std::negate	typeref:typename:_Tp	access:public	signature:(const _Tp & __x) const
std::next_permutation	./stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
std::next_permutation	./stl_algo.h	/^    next_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Compare __comp)
std::noboolalpha	./ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowbase	./ios_base.h	/^  noshowbase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpoint	./ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpos	./ios_base.h	/^  noshowpos(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noskipws	./ios_base.h	/^  noskipws(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::not1	./stl_function.h	/^    not1(const _Predicate& __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:unary_negate<_Predicate>	signature:(const _Predicate & __pred)
std::not2	./stl_function.h	/^    not2(const _Predicate& __pred)$/;"	kind:function	language:C++	namespace:std	typeref:typename:binary_negate<_Predicate>	signature:(const _Predicate & __pred)
std::not_equal_to	./stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::not_equal_to::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::not_equal_to	typeref:typename:bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::nounitbuf	./ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::nouppercase	./ios_base.h	/^  nouppercase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::nth_element	./stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last)
std::nth_element	./stl_algo.h	/^    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __nth,_RandomAccessIterator __last,_Compare __comp)
std::num_get	./locale_facets.h	/^    class num_get : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::num_get::_M_extract_float	./locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string & __xtrc) const
std::num_get::_M_extract_int	./locale_facets.h	/^        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT & __v) const
std::num_get::_M_find	./locale_facets.h	/^        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 * __zero,size_t __len,_CharT2 __c) const
std::num_get::_M_find	./locale_facets.h	/^        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
std::num_get::__do_get	./locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,double &) const
std::num_get::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::num_get	typeref:typename:_CharT	access:public
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,double &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,float &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,long double &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,long long &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned int &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned long &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned long long &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,unsigned short &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate & __err,void * &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
std::num_get::do_get	./locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const;$/;"	kind:prototype	language:C++	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long &) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
std::num_get::get	./locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
std::num_get::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::num_get	typeref:typename:locale::id	access:public
std::num_get::iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::num_get	typeref:typename:_InIter	access:public
std::num_get::num_get	./locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::num_get	access:public	signature:(size_t __refs=0)
std::num_get::~num_get	./locale_facets.h	/^      virtual ~num_get() { }$/;"	kind:function	language:C++	class:std::num_get	access:protected	signature:()
std::num_get<_CharT, _InIter>::id	./locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
std::num_put	./locale_facets.h	/^    class num_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::num_put::_M_group_float	./locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_group_int	./locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_insert_float	./locale_facets.h	/^        _M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
std::num_put::_M_insert_int	./locale_facets.h	/^        _M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
std::num_put::_M_pad	./locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
std::num_put::__do_put	./locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,double __v) const
std::num_put::char_type	./locale_facets.h	/^      typedef _CharT		char_type;$/;"	kind:typedef	language:C++	class:std::num_put	typeref:typename:_CharT	access:public
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,bool __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,const void * __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,double __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long double __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, long long __v) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,long long __v) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,unsigned long long) const
std::num_put::do_put	./locale_facets.h	/^      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const;$/;"	kind:prototype	language:C++	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type __fill,unsigned long) const
std::num_put::id	./locale_facets.h	/^      static locale::id		id;$/;"	kind:member	language:C++	class:std::num_put	typeref:typename:locale::id	access:public
std::num_put::iter_type	./locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	kind:typedef	language:C++	class:std::num_put	typeref:typename:_OutIter	access:public
std::num_put::num_put	./locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	kind:function	language:C++	class:std::num_put	access:public	signature:(size_t __refs=0)
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,bool __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,double __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long long __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,const void * __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,long double __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,unsigned long __v) const
std::num_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __f, char_type __fill,$/;"	kind:function	language:C++	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __f,char_type __fill,unsigned long long __v) const
std::num_put::~num_put	./locale_facets.h	/^      ~num_put() { };$/;"	kind:function	language:C++	class:std::num_put	access:protected	signature:()
std::num_put<_CharT, _OutIter>::id	./locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
std::numpunct	./locale_facets.h	/^    class numpunct : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::numpunct::_M_data	./locale_facets.h	/^      __cache_type*			_M_data;$/;"	kind:member	language:C++	class:std::numpunct	typeref:typename:__cache_type *	access:protected
std::numpunct::_M_initialize_numpunct	./locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = NULL);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=NULL)
std::numpunct::_M_initialize_numpunct	./locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::_M_initialize_numpunct	./locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	kind:prototype	language:C++	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::__cache_type	./locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
std::numpunct::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:_CharT	access:public
std::numpunct::decimal_point	./locale_facets.h	/^      decimal_point() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::do_decimal_point	./locale_facets.h	/^      do_decimal_point() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_falsename	./locale_facets.h	/^      do_falsename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::do_grouping	./locale_facets.h	/^      do_grouping() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
std::numpunct::do_thousands_sep	./locale_facets.h	/^      do_thousands_sep() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_truename	./locale_facets.h	/^      do_truename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::falsename	./locale_facets.h	/^      falsename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::grouping	./locale_facets.h	/^      grouping() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string	access:public	signature:() const
std::numpunct::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::numpunct	typeref:typename:locale::id	access:public
std::numpunct::numpunct	./locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::numpunct::numpunct	./locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
std::numpunct::numpunct	./locale_facets.h	/^      numpunct(size_t __refs = 0) : facet(__refs), _M_data(NULL)$/;"	kind:function	language:C++	class:std::numpunct	access:public	signature:(size_t __refs=0)
std::numpunct::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
std::numpunct::thousands_sep	./locale_facets.h	/^      thousands_sep() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::truename	./locale_facets.h	/^      truename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::~numpunct	./locale_facets.h	/^      ~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	access:protected	signature:()
std::numpunct::~numpunct	./locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	signature:()
std::numpunct::~numpunct	./locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	signature:()
std::numpunct<_CharT>::id	./locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	kind:member	language:C++	class:std::numpunct<_CharT>	typeref:typename:locale::id
std::numpunct_byname	./locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	kind:class	language:C++	namespace:std	inherits:numpunct<_CharT>
std::numpunct_byname::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::numpunct_byname	typeref:typename:_CharT	access:public
std::numpunct_byname::numpunct_byname	./locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::numpunct_byname::string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
std::numpunct_byname::~numpunct_byname	./locale_facets.h	/^      ~numpunct_byname() { }$/;"	kind:function	language:C++	class:std::numpunct_byname	access:protected	signature:()
std::oct	./ios_base.h	/^  oct(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::operator !=	./allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator !=	./allocator.h	/^    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_Tp> &,const allocator<_Tp> &)
std::operator !=	./basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	./basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator !=	./basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	./postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator !=	./stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator !=	./stl_deque.h	/^    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator !=	./stl_deque.h	/^    operator!=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator !=	./stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator !=	./stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator !=	./stl_list.h	/^    operator!=(const _List_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _List_iterator<_Val> & __x,const _List_const_iterator<_Val> & __y)
std::operator !=	./stl_list.h	/^    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator !=	./stl_map.h	/^    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator !=	./stl_multimap.h	/^    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator !=	./stl_multiset.h	/^    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator !=	./stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator !=	./stl_queue.h	/^    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator !=	./stl_set.h	/^    operator!=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator !=	./stl_stack.h	/^    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator !=	./stl_tree.h	/^    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator !=	./stl_tree.h	/^    operator!=(const _Rb_tree_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree_iterator<_Val> & __x,const _Rb_tree_const_iterator<_Val> & __y)
std::operator !=	./stl_vector.h	/^    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator !=	./stream_iterator.h	/^    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __x,const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __y)
std::operator !=	./streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator &	./ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator &	./ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator &	./ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator &=	./ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator &=	./ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator &=	./ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator +	./basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	./basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
std::operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator +	./basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	./stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Bit_const_iterator	signature:(ptrdiff_t __n,const _Bit_const_iterator & __x)
std::operator +	./stl_bvector.h	/^  operator+(ptrdiff_t __n, const _Bit_iterator& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Bit_iterator	signature:(ptrdiff_t __n,const _Bit_iterator & __x)
std::operator +	./stl_deque.h	/^    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_Ref,_Ptr>	signature:(ptrdiff_t __n,const _Deque_iterator<_Tp,_Ref,_Ptr> & __x)
std::operator +	./stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
std::operator -	./stl_bvector.h	/^  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Bit_iterator_base & __x,const _Bit_iterator_base & __y)
std::operator -	./stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_Ref,_Ptr>::difference_type	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator -	./stl_deque.h	/^    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Deque_iterator<_Tp,_RefL,_PtrL>::difference_type	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator -	./stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator -	./stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	./basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	./basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <	./basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	./stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator <	./stl_deque.h	/^    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator <	./stl_deque.h	/^    operator<(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator <	./stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <	./stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	./stl_list.h	/^    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator <	./stl_map.h	/^    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator <	./stl_multimap.h	/^    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator <	./stl_multiset.h	/^    operator<(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator <	./stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <	./stl_queue.h	/^    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator <	./stl_set.h	/^    operator<(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator <	./stl_stack.h	/^    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator <	./stl_tree.h	/^    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator <	./stl_vector.h	/^    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator <<	./basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	kind:function	language:C++	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator <=	./basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	./basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <=	./basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	./stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator <=	./stl_deque.h	/^    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator <=	./stl_deque.h	/^    operator<=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator <=	./stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <=	./stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=	./stl_list.h	/^    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator <=	./stl_map.h	/^    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator <=	./stl_multimap.h	/^    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator <=	./stl_multiset.h	/^    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator <=	./stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <=	./stl_queue.h	/^    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator <=	./stl_set.h	/^    operator<=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator <=	./stl_stack.h	/^    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator <=	./stl_tree.h	/^    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator <=	./stl_vector.h	/^    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator ==	./allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator ==	./allocator.h	/^    operator==(const allocator<_Tp>&, const allocator<_Tp>&)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const allocator<_Tp> &,const allocator<_Tp> &)
std::operator ==	./basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	./basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator ==	./basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	./postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator ==	./stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator ==	./stl_deque.h	/^    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator ==	./stl_deque.h	/^    operator==(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator ==	./stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator ==	./stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator ==	./stl_list.h	/^    operator==(const _List_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _List_iterator<_Val> & __x,const _List_const_iterator<_Val> & __y)
std::operator ==	./stl_list.h	/^    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator ==	./stl_map.h	/^    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator ==	./stl_multimap.h	/^    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator ==	./stl_multiset.h	/^    operator==(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator ==	./stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator ==	./stl_queue.h	/^    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator ==	./stl_set.h	/^    operator==(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator ==	./stl_stack.h	/^    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator ==	./stl_tree.h	/^    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator ==	./stl_tree.h	/^    operator==(const _Rb_tree_iterator<_Val>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree_iterator<_Val> & __x,const _Rb_tree_const_iterator<_Val> & __y)
std::operator ==	./stl_vector.h	/^    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator ==	./stream_iterator.h	/^    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __x,const istream_iterator<_Tp,_CharT,_Traits,_Dist> & __y)
std::operator ==	./streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator >	./basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	./basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >	./basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	./stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator >	./stl_deque.h	/^    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator >	./stl_deque.h	/^    operator>(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator >	./stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >	./stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >	./stl_list.h	/^    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator >	./stl_map.h	/^    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator >	./stl_multimap.h	/^    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator >	./stl_multiset.h	/^    operator>(const multiset<_Key,_Compare,_Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator >	./stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >	./stl_queue.h	/^    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator >	./stl_set.h	/^    operator>(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator >	./stl_stack.h	/^    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator >	./stl_tree.h	/^    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator >	./stl_vector.h	/^    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator >=	./basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	./basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >=	./basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	./stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_Ref,_Ptr> & __x,const _Deque_iterator<_Tp,_Ref,_Ptr> & __y)
std::operator >=	./stl_deque.h	/^    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Deque_iterator<_Tp,_RefL,_PtrL> & __x,const _Deque_iterator<_Tp,_RefR,_PtrR> & __y)
std::operator >=	./stl_deque.h	/^    operator>=(const deque<_Tp, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const deque<_Tp,_Alloc> & __x,const deque<_Tp,_Alloc> & __y)
std::operator >=	./stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >=	./stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >=	./stl_list.h	/^    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const list<_Tp,_Alloc> & __x,const list<_Tp,_Alloc> & __y)
std::operator >=	./stl_map.h	/^    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const map<_Key,_Tp,_Compare,_Alloc> & __x,const map<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator >=	./stl_multimap.h	/^    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multimap<_Key,_Tp,_Compare,_Alloc> & __x,const multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::operator >=	./stl_multiset.h	/^    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const multiset<_Key,_Compare,_Alloc> & __x,const multiset<_Key,_Compare,_Alloc> & __y)
std::operator >=	./stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >=	./stl_queue.h	/^    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const queue<_Tp,_Seq> & __x,const queue<_Tp,_Seq> & __y)
std::operator >=	./stl_set.h	/^    operator>=(const set<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const set<_Key,_Compare,_Alloc> & __x,const set<_Key,_Compare,_Alloc> & __y)
std::operator >=	./stl_stack.h	/^    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const stack<_Tp,_Seq> & __x,const stack<_Tp,_Seq> & __y)
std::operator >=	./stl_tree.h	/^    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,const _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::operator >=	./stl_vector.h	/^    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(const vector<_Tp,_Alloc> & __x,const vector<_Tp,_Alloc> & __y)
std::operator >>	./basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator >>	./basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
std::operator ^	./ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator ^	./ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator ^	./ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator ^=	./ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator ^=	./ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator ^=	./ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator |	./ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator |	./ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator |	./ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator |=	./ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator |=	./ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator |=	./ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator ~	./ios_base.h	/^  operator~(_Ios_Fmtflags __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
std::operator ~	./ios_base.h	/^  operator~(_Ios_Iostate __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Iostate	signature:(_Ios_Iostate __a)
std::operator ~	./ios_base.h	/^  operator~(_Ios_Openmode __a)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_Ios_Openmode	signature:(_Ios_Openmode __a)
std::ostream_iterator	./stream_iterator.h	/^    class ostream_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::ostream_iterator::_M_stream	./stream_iterator.h	/^      ostream_type*	_M_stream;$/;"	kind:member	language:C++	class:std::ostream_iterator	typeref:typename:ostream_type *	access:private
std::ostream_iterator::_M_string	./stream_iterator.h	/^      const _CharT*	_M_string;$/;"	kind:member	language:C++	class:std::ostream_iterator	typeref:typename:const _CharT *	access:private
std::ostream_iterator::char_type	./stream_iterator.h	/^      typedef _CharT                         char_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:_CharT	access:public
std::ostream_iterator::operator *	./stream_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:()
std::ostream_iterator::operator ++	./stream_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:()
std::ostream_iterator::operator ++	./stream_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:(int)
std::ostream_iterator::operator =	./stream_iterator.h	/^      operator=(const _Tp& __value)$/;"	kind:function	language:C++	class:std::ostream_iterator	typeref:typename:ostream_iterator &	access:public	signature:(const _Tp & __value)
std::ostream_iterator::ostream_iterator	./stream_iterator.h	/^      ostream_iterator(const ostream_iterator& __obj)$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(const ostream_iterator & __obj)
std::ostream_iterator::ostream_iterator	./stream_iterator.h	/^      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(ostream_type & __s)
std::ostream_iterator::ostream_iterator	./stream_iterator.h	/^      ostream_iterator(ostream_type& __s, const _CharT* __c)$/;"	kind:function	language:C++	class:std::ostream_iterator	access:public	signature:(ostream_type & __s,const _CharT * __c)
std::ostream_iterator::ostream_type	./stream_iterator.h	/^      typedef basic_ostream<_CharT, _Traits> ostream_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
std::ostream_iterator::traits_type	./stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:_Traits	access:public
std::ostreambuf_iterator	./streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::ostreambuf_iterator::_M_failed	./streambuf_iterator.h	/^      bool		_M_failed;$/;"	kind:member	language:C++	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
std::ostreambuf_iterator::_M_put	./streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
std::ostreambuf_iterator::_M_sbuf	./streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	kind:member	language:C++	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::ostreambuf_iterator::char_type	./streambuf_iterator.h	/^      typedef _CharT                           char_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
std::ostreambuf_iterator::failed	./streambuf_iterator.h	/^      failed() const throw()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:bool	access:public	signature:() const
std::ostreambuf_iterator::operator *	./streambuf_iterator.h	/^      operator*()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	./streambuf_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	./streambuf_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
std::ostreambuf_iterator::operator =	./streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
std::ostreambuf_iterator::ostream_type	./streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
std::ostreambuf_iterator::ostreambuf_iterator	./streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) throw ()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
std::ostreambuf_iterator::ostreambuf_iterator	./streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) throw ()$/;"	kind:function	language:C++	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::ostreambuf_iterator::streambuf_type	./streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::ostreambuf_iterator::traits_type	./streambuf_iterator.h	/^      typedef _Traits                          traits_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
std::output_iterator_tag	./stl_iterator_base_types.h	/^  struct output_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std
std::pair	./stl_pair.h	/^    struct pair$/;"	kind:struct	language:C++	namespace:std
std::pair::first	./stl_pair.h	/^      _T1 first;                 \/\/\/< @c first is a copy of the first object$/;"	kind:member	language:C++	struct:std::pair	typeref:typename:_T1	access:public
std::pair::first_type	./stl_pair.h	/^      typedef _T1 first_type;    \/\/\/<  @c first_type is the first bound type$/;"	kind:typedef	language:C++	struct:std::pair	typeref:typename:_T1	access:public
std::pair::pair	./stl_pair.h	/^        pair(const pair<_U1, _U2>& __p)$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	./stl_pair.h	/^      pair()$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:()
std::pair::pair	./stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	kind:function	language:C++	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
std::pair::second	./stl_pair.h	/^      _T2 second;                \/\/\/< @c second is a copy of the second object$/;"	kind:member	language:C++	struct:std::pair	typeref:typename:_T2	access:public
std::pair::second_type	./stl_pair.h	/^      typedef _T2 second_type;   \/\/\/<  @c second_type is the second bound type$/;"	kind:typedef	language:C++	struct:std::pair	typeref:typename:_T2	access:public
std::partial_sort	./stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last)
std::partial_sort	./stl_algo.h	/^    partial_sort(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __middle,_RandomAccessIterator __last,_Compare __comp)
std::partial_sort_copy	./stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_InputIterator __first,_InputIterator __last,_RandomAccessIterator __result_first,_RandomAccessIterator __result_last)
std::partial_sort_copy	./stl_algo.h	/^    partial_sort_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_RandomAccessIterator	signature:(_InputIterator __first,_InputIterator __last,_RandomAccessIterator __result_first,_RandomAccessIterator __result_last,_Compare __comp)
std::partial_sum	./stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
std::partial_sum	./stl_numeric.h	/^    partial_sum(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryOperation __binary_op)
std::partition	./stl_algo.h	/^    partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
std::plus	./stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	kind:struct	language:C++	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::plus::operator ()	./stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	kind:function	language:C++	struct:std::plus	typeref:typename:_Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::pointer_to_binary_function	./stl_function.h	/^    class pointer_to_binary_function$/;"	kind:class	language:C++	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
std::pointer_to_binary_function::_M_ptr	./stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	kind:member	language:C++	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
std::pointer_to_binary_function::operator ()	./stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
std::pointer_to_binary_function::pointer_to_binary_function	./stl_function.h	/^      pointer_to_binary_function() {}$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	access:public	signature:()
std::pointer_to_binary_function::pointer_to_binary_function	./stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	kind:function	language:C++	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
std::pointer_to_unary_function	./stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<_Arg,_Result>
std::pointer_to_unary_function::_M_ptr	./stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	kind:member	language:C++	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
std::pointer_to_unary_function::operator ()	./stl_function.h	/^      operator()(_Arg __x) const$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
std::pointer_to_unary_function::pointer_to_unary_function	./stl_function.h	/^      pointer_to_unary_function() {}$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	access:public	signature:()
std::pointer_to_unary_function::pointer_to_unary_function	./stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	kind:function	language:C++	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
std::pop_heap	./stl_heap.h	/^    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::pop_heap	./stl_heap.h	/^    pop_heap(_RandomAccessIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::prev_permutation	./stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
std::prev_permutation	./stl_algo.h	/^    prev_permutation(_BidirectionalIterator __first,$/;"	kind:function	language:C++	namespace:std	typeref:typename:bool	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_Compare __comp)
std::priority_queue	./stl_queue.h	/^    class priority_queue$/;"	kind:class	language:C++	namespace:std
std::priority_queue::_Sequence_value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::value_type	access:private
std::priority_queue::c	./stl_queue.h	/^      _Sequence  c;$/;"	kind:member	language:C++	class:std::priority_queue	typeref:typename:_Sequence	access:protected
std::priority_queue::comp	./stl_queue.h	/^      _Compare   comp;$/;"	kind:member	language:C++	class:std::priority_queue	typeref:typename:_Compare	access:protected
std::priority_queue::const_reference	./stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::const_reference	access:public
std::priority_queue::container_type	./stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence	access:public
std::priority_queue::empty	./stl_queue.h	/^      empty() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:bool	access:public	signature:() const
std::priority_queue::pop	./stl_queue.h	/^      pop()$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:void	access:public	signature:()
std::priority_queue::priority_queue	./stl_queue.h	/^        priority_queue(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::priority_queue	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __x=_Compare (),const _Sequence & __s=_Sequence ())
std::priority_queue::priority_queue	./stl_queue.h	/^      priority_queue(const _Compare& __x = _Compare(),$/;"	kind:function	language:C++	class:std::priority_queue	access:public	signature:(const _Compare & __x=_Compare (),const _Sequence & __s=_Sequence ())
std::priority_queue::push	./stl_queue.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:void	access:public	signature:(const value_type & __x)
std::priority_queue::reference	./stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::reference	access:public
std::priority_queue::size	./stl_queue.h	/^      size() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:size_type	access:public	signature:() const
std::priority_queue::size_type	./stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::size_type	access:public
std::priority_queue::top	./stl_queue.h	/^      top() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:const_reference	access:public	signature:() const
std::priority_queue::value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::value_type	access:public
std::ptr_fun	./stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	kind:function	language:C++	namespace:std	typeref:typename:pointer_to_unary_function<_Arg,_Result>	signature:(_Result (* __x)(_Arg))
std::ptr_fun	./stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	kind:function	language:C++	namespace:std	typeref:typename:pointer_to_binary_function<_Arg1,_Arg2,_Result>	signature:(_Result (* __x)(_Arg1,_Arg2))
std::push_heap	./stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::push_heap	./stl_heap.h	/^    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::queue	./stl_queue.h	/^    class queue$/;"	kind:class	language:C++	namespace:std
std::queue::_Sequence_value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::value_type	access:private
std::queue::back	./stl_queue.h	/^      back() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:const_reference	access:public	signature:() const
std::queue::back	./stl_queue.h	/^      back()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:reference	access:public	signature:()
std::queue::c	./stl_queue.h	/^      _Sequence c;$/;"	kind:member	language:C++	class:std::queue	typeref:typename:_Sequence	access:protected
std::queue::const_reference	./stl_queue.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::const_reference	access:public
std::queue::container_type	./stl_queue.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence	access:public
std::queue::empty	./stl_queue.h	/^      empty() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:bool	access:public	signature:() const
std::queue::front	./stl_queue.h	/^      front() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:const_reference	access:public	signature:() const
std::queue::front	./stl_queue.h	/^      front()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:reference	access:public	signature:()
std::queue::pop	./stl_queue.h	/^      pop()$/;"	kind:function	language:C++	class:std::queue	typeref:typename:void	access:public	signature:()
std::queue::push	./stl_queue.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::queue	typeref:typename:void	access:public	signature:(const value_type & __x)
std::queue::queue	./stl_queue.h	/^      queue(const _Sequence& __c = _Sequence()) : c(__c) {}$/;"	kind:function	language:C++	class:std::queue	access:public	signature:(const _Sequence & __c=_Sequence ())
std::queue::reference	./stl_queue.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::reference	access:public
std::queue::size	./stl_queue.h	/^      size() const$/;"	kind:function	language:C++	class:std::queue	typeref:typename:size_type	access:public	signature:() const
std::queue::size_type	./stl_queue.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::size_type	access:public
std::queue::value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::value_type	access:public
std::random_access_iterator_tag	./stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag {};$/;"	kind:struct	language:C++	namespace:std	inherits:bidirectional_iterator_tag
std::random_shuffle	./stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::random_shuffle	./stl_algo.h	/^    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_RandomNumberGenerator & __rand)
std::raw_storage_iterator	./stl_raw_storage_iter.h	/^    class raw_storage_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::raw_storage_iterator::_M_iter	./stl_raw_storage_iter.h	/^      _ForwardIterator _M_iter;$/;"	kind:member	language:C++	class:std::raw_storage_iterator	typeref:typename:_ForwardIterator	access:protected
std::raw_storage_iterator::operator *	./stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
std::raw_storage_iterator::operator ++	./stl_raw_storage_iter.h	/^      operator++()$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator<_ForwardIterator,_Tp> &	access:public	signature:()
std::raw_storage_iterator::operator ++	./stl_raw_storage_iter.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator<_ForwardIterator,_Tp>	access:public	signature:(int)
std::raw_storage_iterator::operator =	./stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(const _Tp & __element)
std::raw_storage_iterator::raw_storage_iterator	./stl_raw_storage_iter.h	/^      raw_storage_iterator(_ForwardIterator __x)$/;"	kind:function	language:C++	class:std::raw_storage_iterator	access:public	signature:(_ForwardIterator __x)
std::rel_ops	./stl_relops.h	/^  namespace rel_ops$/;"	kind:namespace	language:C++	namespace:std
std::rel_ops::operator !=	./stl_relops.h	/^      operator!=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
std::rel_ops::operator <=	./stl_relops.h	/^      operator<=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
std::rel_ops::operator >	./stl_relops.h	/^      operator>(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
std::rel_ops::operator >=	./stl_relops.h	/^      operator>=(const _Tp& __x, const _Tp& __y)$/;"	kind:function	language:C++	namespace:std::rel_ops	typeref:typename:bool	signature:(const _Tp & __x,const _Tp & __y)
std::remove	./stl_algo.h	/^    remove(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::remove_copy	./stl_algo.h	/^    remove_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,const _Tp & __value)
std::remove_copy_if	./stl_algo.h	/^    remove_copy_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_Predicate __pred)
std::remove_if	./stl_algo.h	/^    remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
std::replace	./stl_algo.h	/^    replace(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __old_value,const _Tp & __new_value)
std::replace_copy	./stl_algo.h	/^    replace_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,const _Tp & __old_value,const _Tp & __new_value)
std::replace_copy_if	./stl_algo.h	/^    replace_copy_if(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_Predicate __pred,const _Tp & __new_value)
std::replace_if	./stl_algo.h	/^    replace_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred,const _Tp & __new_value)
std::reverse	./stl_algo.h	/^    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last)
std::reverse_copy	./stl_algo.h	/^    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_BidirectionalIterator __first,_BidirectionalIterator __last,_OutputIterator __result)
std::reverse_iterator	./stl_iterator.h	/^    class reverse_iterator$/;"	kind:class	language:C++	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
std::reverse_iterator::base	./stl_iterator.h	/^      base() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:iterator_type	access:public	signature:() const
std::reverse_iterator::current	./stl_iterator.h	/^      _Iterator current;$/;"	kind:member	language:C++	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
std::reverse_iterator::difference_type	./stl_iterator.h	/^							       difference_type;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::difference_type	access:public
std::reverse_iterator::iterator_type	./stl_iterator.h	/^      typedef _Iterator					       iterator_type;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
std::reverse_iterator::operator *	./stl_iterator.h	/^      operator*() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reference	access:public	signature:() const
std::reverse_iterator::operator +	./stl_iterator.h	/^      operator+(difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator ++	./stl_iterator.h	/^      operator++()$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator ++	./stl_iterator.h	/^      operator++(int)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator +=	./stl_iterator.h	/^      operator+=(difference_type __n)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator -	./stl_iterator.h	/^      operator-(difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator --	./stl_iterator.h	/^      operator--()$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator --	./stl_iterator.h	/^      operator--(int)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator -=	./stl_iterator.h	/^      operator-=(difference_type __n)$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator ->	./stl_iterator.h	/^      operator->() const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:pointer	access:public	signature:() const
std::reverse_iterator::operator []	./stl_iterator.h	/^      operator[](difference_type __n) const$/;"	kind:function	language:C++	class:std::reverse_iterator	typeref:typename:reference	access:public	signature:(difference_type __n) const
std::reverse_iterator::pointer	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::pointer     pointer;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::pointer	access:public
std::reverse_iterator::reference	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::reference   reference;$/;"	kind:typedef	language:C++	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>::reference	access:public
std::reverse_iterator::reverse_iterator	./stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(const reverse_iterator<_Iter> & __x)
std::reverse_iterator::reverse_iterator	./stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:()
std::reverse_iterator::reverse_iterator	./stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(const reverse_iterator & __x)
std::reverse_iterator::reverse_iterator	./stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	kind:function	language:C++	class:std::reverse_iterator	access:public	signature:(iterator_type __x)
std::right	./ios_base.h	/^  right(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::rotate	./stl_algo.h	/^    rotate(_ForwardIterator __first, _ForwardIterator __middle,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last)
std::rotate_copy	./stl_algo.h	/^    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_ForwardIterator __first,_ForwardIterator __middle,_ForwardIterator __last,_OutputIterator __result)
std::scientific	./ios_base.h	/^  scientific(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::search	./stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2)
std::search	./stl_algo.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
std::search_n	./stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val)
std::search_n	./stl_algo.h	/^    search_n(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Integer __count,const _Tp & __val,_BinaryPredicate __binary_pred)
std::set	./stl_set.h	/^    class set$/;"	kind:class	language:C++	namespace:std
std::set::_Alloc_value_type	./stl_set.h	/^      typedef typename _Alloc::value_type                   _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc::value_type	access:private
std::set::_Key_alloc_type	./stl_set.h	/^      typedef typename _Alloc::template rebind<_Key>::other _Key_alloc_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc::template rebind<_Key>::other	access:private
std::set::_M_t	./stl_set.h	/^      _Rep_type _M_t;  \/\/ red-black tree representing set$/;"	kind:member	language:C++	class:std::set	typeref:typename:_Rep_type	access:private
std::set::_Rep_type	./stl_set.h	/^		       key_compare, _Key_alloc_type> _Rep_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rb_tree<key_type,value_type,_Identity<value_type>,key_compare,_Key_alloc_type>	access:private
std::set::allocator_type	./stl_set.h	/^      typedef _Alloc   allocator_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Alloc	access:public
std::set::begin	./stl_set.h	/^      begin() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:() const
std::set::clear	./stl_set.h	/^      clear()$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:()
std::set::const_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_iterator            const_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_iterator	access:public
std::set::const_pointer	./stl_set.h	/^      typedef typename _Key_alloc_type::const_pointer       const_pointer;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::const_pointer	access:public
std::set::const_reference	./stl_set.h	/^      typedef typename _Key_alloc_type::const_reference     const_reference;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::const_reference	access:public
std::set::const_reverse_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::set::count	./stl_set.h	/^      count(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:(const key_type & __x) const
std::set::difference_type	./stl_set.h	/^      typedef typename _Rep_type::difference_type           difference_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::difference_type	access:public
std::set::empty	./stl_set.h	/^      empty() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:bool	access:public	signature:() const
std::set::end	./stl_set.h	/^      end() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:() const
std::set::equal_range	./stl_set.h	/^      equal_range(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<const_iterator,const_iterator>	access:public	signature:(const key_type & __x) const
std::set::equal_range	./stl_set.h	/^      equal_range(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<iterator,iterator>	access:public	signature:(const key_type & __x)
std::set::erase	./stl_set.h	/^      erase(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:(const key_type & __x)
std::set::erase	./stl_set.h	/^      erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(iterator __first,iterator __last)
std::set::erase	./stl_set.h	/^      erase(iterator __position)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(iterator __position)
std::set::find	./stl_set.h	/^      find(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::set::find	./stl_set.h	/^      find(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::set::get_allocator	./stl_set.h	/^      get_allocator() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:allocator_type	access:public	signature:() const
std::set::insert	./stl_set.h	/^        insert(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::set::insert	./stl_set.h	/^      insert(const value_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:std::pair<iterator,bool>	access:public	signature:(const value_type & __x)
std::set::insert	./stl_set.h	/^      insert(iterator __position, const value_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::set::iterator	./stl_set.h	/^      typedef typename _Rep_type::const_iterator            iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_iterator	access:public
std::set::key_comp	./stl_set.h	/^      key_comp() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:key_compare	access:public	signature:() const
std::set::key_compare	./stl_set.h	/^      typedef _Compare key_compare;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Compare	access:public
std::set::key_type	./stl_set.h	/^      typedef _Key     key_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key	access:public
std::set::lower_bound	./stl_set.h	/^      lower_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::set::lower_bound	./stl_set.h	/^      lower_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::set::max_size	./stl_set.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:() const
std::set::operator =	./stl_set.h	/^      operator=(const set<_Key, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:set<_Key,_Compare,_Alloc> &	access:public	signature:(const set<_Key,_Compare,_Alloc> & __x)
std::set::pointer	./stl_set.h	/^      typedef typename _Key_alloc_type::pointer             pointer;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::pointer	access:public
std::set::rbegin	./stl_set.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:reverse_iterator	access:public	signature:() const
std::set::reference	./stl_set.h	/^      typedef typename _Key_alloc_type::reference           reference;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key_alloc_type::reference	access:public
std::set::rend	./stl_set.h	/^      rend() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:reverse_iterator	access:public	signature:() const
std::set::reverse_iterator	./stl_set.h	/^      typedef typename _Rep_type::const_reverse_iterator    reverse_iterator;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::const_reverse_iterator	access:public
std::set::set	./stl_set.h	/^        set(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::set	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::set::set	./stl_set.h	/^        set(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::set	access:public	signature:(_InputIterator __first,_InputIterator __last,const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::set::set	./stl_set.h	/^      set()$/;"	kind:function	language:C++	class:std::set	access:public	signature:()
std::set::set	./stl_set.h	/^      set(const _Compare& __comp,$/;"	kind:function	language:C++	class:std::set	access:public	signature:(const _Compare & __comp,const allocator_type & __a=allocator_type ())
std::set::set	./stl_set.h	/^      set(const set<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	access:public	signature:(const set<_Key,_Compare,_Alloc> & __x)
std::set::size	./stl_set.h	/^      size() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:size_type	access:public	signature:() const
std::set::size_type	./stl_set.h	/^      typedef typename _Rep_type::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Rep_type::size_type	access:public
std::set::swap	./stl_set.h	/^      swap(set<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(set<_Key,_Compare,_Alloc> & __x)
std::set::upper_bound	./stl_set.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
std::set::upper_bound	./stl_set.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
std::set::value_comp	./stl_set.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:value_compare	access:public	signature:() const
std::set::value_compare	./stl_set.h	/^      typedef _Compare value_compare;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Compare	access:public
std::set::value_type	./stl_set.h	/^      typedef _Key     value_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key	access:public
std::set_difference	./stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
std::set_difference	./stl_algo.h	/^    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
std::set_intersection	./stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
std::set_intersection	./stl_algo.h	/^    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
std::set_symmetric_difference	./stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
std::set_symmetric_difference	./stl_algo.h	/^    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
std::set_union	./stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result)
std::set_union	./stl_algo.h	/^    set_union(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_OutputIterator __result,_Compare __comp)
std::showbase	./ios_base.h	/^  showbase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpoint	./ios_base.h	/^  showpoint(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpos	./ios_base.h	/^  showpos(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::skipws	./ios_base.h	/^  skipws(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::slice	./slice_array.h	/^  class slice$/;"	kind:class	language:C++	namespace:std
std::slice::_M_off	./slice_array.h	/^    size_t _M_off;                      \/\/ offset$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
std::slice::_M_st	./slice_array.h	/^    size_t _M_st;			\/\/ stride unit$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
std::slice::_M_sz	./slice_array.h	/^    size_t _M_sz;			\/\/ size$/;"	kind:member	language:C++	class:std::slice	typeref:typename:size_t	access:private
std::slice::size	./slice_array.h	/^    size_t size() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
std::slice::size	./slice_array.h	/^  slice::size() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
std::slice::slice	./slice_array.h	/^    slice();$/;"	kind:prototype	language:C++	class:std::slice	access:public	signature:()
std::slice::slice	./slice_array.h	/^    slice(size_t, size_t, size_t);$/;"	kind:prototype	language:C++	class:std::slice	access:public	signature:(size_t,size_t,size_t)
std::slice::slice	./slice_array.h	/^  slice::slice() {}$/;"	kind:function	language:C++	class:std::slice	signature:()
std::slice::slice	./slice_array.h	/^  slice::slice(size_t __o, size_t __d, size_t __s)$/;"	kind:function	language:C++	class:std::slice	signature:(size_t __o,size_t __d,size_t __s)
std::slice::start	./slice_array.h	/^    size_t start() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
std::slice::start	./slice_array.h	/^  slice::start() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
std::slice::stride	./slice_array.h	/^    size_t stride() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
std::slice::stride	./slice_array.h	/^  slice::stride() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
std::slice_array	./slice_array.h	/^    class slice_array$/;"	kind:class	language:C++	namespace:std
std::slice_array::_M_array	./slice_array.h	/^      const _Array<_Tp> _M_array;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const _Array<_Tp>	access:private
std::slice_array::_M_stride	./slice_array.h	/^      const size_t      _M_stride;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const size_t	access:private
std::slice_array::_M_sz	./slice_array.h	/^      const size_t      _M_sz;$/;"	kind:member	language:C++	class:std::slice_array	typeref:typename:const size_t	access:private
std::slice_array::operator %=	./slice_array.h	/^	void operator%=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator %=	./slice_array.h	/^      void operator%=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator &=	./slice_array.h	/^	void operator&=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator &=	./slice_array.h	/^      void operator&=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator *=	./slice_array.h	/^	void operator*=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator *=	./slice_array.h	/^      void operator*=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator +=	./slice_array.h	/^	void operator+=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator +=	./slice_array.h	/^      void operator+=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator -=	./slice_array.h	/^	void operator-=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator -=	./slice_array.h	/^      void operator-=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator /=	./slice_array.h	/^	void operator\/=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator /=	./slice_array.h	/^      void operator\/=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator <<=	./slice_array.h	/^	void operator<<=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator <<=	./slice_array.h	/^      void operator<<=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator =	./slice_array.h	/^        void operator=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator =	./slice_array.h	/^      slice_array& operator=(const slice_array&);$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:slice_array &	access:public	signature:(const slice_array &)
std::slice_array::operator =	./slice_array.h	/^      void operator=(const _Tp &) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Tp &) const
std::slice_array::operator =	./slice_array.h	/^      void operator=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const _Expr<_Dom,_Tp>& __e) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const _Expr<_Dom,_Tp> & __e) const
std::slice_array::operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const _Tp& __t) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const _Tp & __t) const
std::slice_array::operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const slice_array<_Tp>& __a)$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:slice_array<_Tp> &	signature:(const slice_array<_Tp> & __a)
std::slice_array::operator =	./slice_array.h	/^    slice_array<_Tp>::operator=(const valarray<_Tp>& __v) const$/;"	kind:function	language:C++	class:std::slice_array	typeref:typename:void	signature:(const valarray<_Tp> & __v) const
std::slice_array::operator >>=	./slice_array.h	/^	void operator>>=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator >>=	./slice_array.h	/^      void operator>>=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator ^=	./slice_array.h	/^	void operator^=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator ^=	./slice_array.h	/^      void operator^=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::operator |=	./slice_array.h	/^	void operator|=(const _Expr<_Dom, _Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const _Expr<_Dom,_Tp> &) const
std::slice_array::operator |=	./slice_array.h	/^      void operator|=(const valarray<_Tp>&) const;$/;"	kind:prototype	language:C++	class:std::slice_array	typeref:typename:void	access:public	signature:(const valarray<_Tp> &) const
std::slice_array::slice_array	./slice_array.h	/^      slice_array();$/;"	kind:prototype	language:C++	class:std::slice_array	access:private	signature:()
std::slice_array::slice_array	./slice_array.h	/^      slice_array(_Array<_Tp>, const slice&);$/;"	kind:prototype	language:C++	class:std::slice_array	access:private	signature:(_Array<_Tp>,const slice &)
std::slice_array::slice_array	./slice_array.h	/^      slice_array(const slice_array&);$/;"	kind:prototype	language:C++	class:std::slice_array	access:public	signature:(const slice_array &)
std::slice_array::slice_array	./slice_array.h	/^    slice_array<_Tp>::slice_array(_Array<_Tp> __a, const slice& __s)$/;"	kind:function	language:C++	class:std::slice_array	signature:(_Array<_Tp> __a,const slice & __s)
std::slice_array::slice_array	./slice_array.h	/^    slice_array<_Tp>::slice_array(const slice_array<_Tp>& a)$/;"	kind:function	language:C++	class:std::slice_array	signature:(const slice_array<_Tp> & a)
std::slice_array::value_type	./slice_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::slice_array	typeref:typename:_Tp	access:public
std::sort	./stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::sort	./stl_algo.h	/^    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::sort_heap	./stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::sort_heap	./stl_heap.h	/^    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::stable_partition	./stl_algo.h	/^    stable_partition(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
std::stable_sort	./stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last)
std::stable_sort	./stl_algo.h	/^    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Compare __comp)
std::stack	./stl_stack.h	/^    class stack$/;"	kind:class	language:C++	namespace:std
std::stack::_Sequence_value_type	./stl_stack.h	/^      typedef typename _Sequence::value_type _Sequence_value_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::value_type	access:private
std::stack::c	./stl_stack.h	/^      _Sequence c;$/;"	kind:member	language:C++	class:std::stack	typeref:typename:_Sequence	access:protected
std::stack::const_reference	./stl_stack.h	/^      typedef typename _Sequence::const_reference           const_reference;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::const_reference	access:public
std::stack::container_type	./stl_stack.h	/^      typedef          _Sequence                            container_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence	access:public
std::stack::empty	./stl_stack.h	/^      empty() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:bool	access:public	signature:() const
std::stack::pop	./stl_stack.h	/^      pop()$/;"	kind:function	language:C++	class:std::stack	typeref:typename:void	access:public	signature:()
std::stack::push	./stl_stack.h	/^      push(const value_type& __x)$/;"	kind:function	language:C++	class:std::stack	typeref:typename:void	access:public	signature:(const value_type & __x)
std::stack::reference	./stl_stack.h	/^      typedef typename _Sequence::reference                 reference;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::reference	access:public
std::stack::size	./stl_stack.h	/^      size() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:size_type	access:public	signature:() const
std::stack::size_type	./stl_stack.h	/^      typedef typename _Sequence::size_type                 size_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::size_type	access:public
std::stack::stack	./stl_stack.h	/^      stack(const _Sequence& __c = _Sequence())$/;"	kind:function	language:C++	class:std::stack	access:public	signature:(const _Sequence & __c=_Sequence ())
std::stack::top	./stl_stack.h	/^      top() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:const_reference	access:public	signature:() const
std::stack::top	./stl_stack.h	/^      top()$/;"	kind:function	language:C++	class:std::stack	typeref:typename:reference	access:public	signature:()
std::stack::value_type	./stl_stack.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::value_type	access:public
std::streamoff	./postypes.h	/^  typedef int64_t       streamoff;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:int64_t
std::streampos	./postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:fpos<mbstate_t>
std::streamsize	./postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:ptrdiff_t
std::string	./stringfwd.h	/^  typedef basic_string<char>    string;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:basic_string<char>
std::swap	./basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::swap	./stl_algobase.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp & __a,_Tp & __b)
std::swap	./stl_deque.h	/^    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(deque<_Tp,_Alloc> & __x,deque<_Tp,_Alloc> & __y)
std::swap	./stl_list.h	/^    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(list<_Tp,_Alloc> & __x,list<_Tp,_Alloc> & __y)
std::swap	./stl_map.h	/^    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(map<_Key,_Tp,_Compare,_Alloc> & __x,map<_Key,_Tp,_Compare,_Alloc> & __y)
std::swap	./stl_multimap.h	/^    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(multimap<_Key,_Tp,_Compare,_Alloc> & __x,multimap<_Key,_Tp,_Compare,_Alloc> & __y)
std::swap	./stl_multiset.h	/^    swap(multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(multiset<_Key,_Compare,_Alloc> & __x,multiset<_Key,_Compare,_Alloc> & __y)
std::swap	./stl_set.h	/^    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(set<_Key,_Compare,_Alloc> & __x,set<_Key,_Compare,_Alloc> & __y)
std::swap	./stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
std::swap	./stl_vector.h	/^    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(vector<_Tp,_Alloc> & __x,vector<_Tp,_Alloc> & __y)
std::swap_ranges	./stl_algo.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
std::time_base	./locale_facets.h	/^  class time_base$/;"	kind:class	language:C++	namespace:std
std::time_base::dateorder	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enum	language:C++	class:std::time_base	access:public
std::time_base::dmy	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
std::time_base::mdy	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
std::time_base::no_order	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
std::time_base::ydm	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
std::time_base::ymd	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
std::time_get	./locale_facets.h	/^    class time_get : public locale::facet, public time_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,time_base
std::time_get::_M_extract_name	./locale_facets.h	/^      _M_extract_name(iter_type __beg, iter_type __end, int& __member,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,int & __member,const _CharT ** __names,size_t __indexlen,ios_base & __io,ios_base::iostate & __err) const
std::time_get::_M_extract_num	./locale_facets.h	/^      _M_extract_num(iter_type __beg, iter_type __end, int& __member,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,int & __member,int __min,int __max,size_t __len,ios_base & __io,ios_base::iostate & __err) const
std::time_get::_M_extract_via_format	./locale_facets.h	/^      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm,const _CharT * __format) const
std::time_get::__string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	__string_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:basic_string<_CharT>	access:public
std::time_get::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:_CharT	access:public
std::time_get::date_order	./locale_facets.h	/^      date_order()  const$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:dateorder	access:public	signature:() const
std::time_get::do_date_order	./locale_facets.h	/^      do_date_order() const;$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:dateorder	access:protected	signature:() const
std::time_get::do_get_date	./locale_facets.h	/^      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::do_get_monthname	./locale_facets.h	/^      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base &,ios_base::iostate & __err,tm * __tm) const
std::time_get::do_get_time	./locale_facets.h	/^      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::do_get_weekday	./locale_facets.h	/^      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base &,ios_base::iostate & __err,tm * __tm) const
std::time_get::do_get_year	./locale_facets.h	/^      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:prototype	language:C++	class:std::time_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::get_date	./locale_facets.h	/^      get_date(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::get_monthname	./locale_facets.h	/^      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::get_time	./locale_facets.h	/^      get_time(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::get_weekday	./locale_facets.h	/^      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::get_year	./locale_facets.h	/^      get_year(iter_type __beg, iter_type __end, ios_base& __io,$/;"	kind:function	language:C++	class:std::time_get	typeref:typename:iter_type	access:public	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,tm * __tm) const
std::time_get::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::time_get	typeref:typename:locale::id	access:public
std::time_get::iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_get	typeref:typename:_InIter	access:public
std::time_get::time_get	./locale_facets.h	/^      time_get(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_get	access:public	signature:(size_t __refs=0)
std::time_get::~time_get	./locale_facets.h	/^      ~time_get() { }$/;"	kind:function	language:C++	class:std::time_get	access:protected	signature:()
std::time_get<_CharT, _InIter>::id	./locale_facets.h	/^    locale::id time_get<_CharT, _InIter>::id;$/;"	kind:member	language:C++	class:std::time_get<_CharT, _InIter>	typeref:typename:locale::id
std::time_get_byname	./locale_facets.h	/^    class time_get_byname : public time_get<_CharT, _InIter>$/;"	kind:class	language:C++	namespace:std	inherits:time_get<_CharT,_InIter>
std::time_get_byname::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_get_byname	typeref:typename:_CharT	access:public
std::time_get_byname::iter_type	./locale_facets.h	/^      typedef _InIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_get_byname	typeref:typename:_InIter	access:public
std::time_get_byname::time_get_byname	./locale_facets.h	/^      time_get_byname(const char*, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_get_byname	access:public	signature:(const char *,size_t __refs=0)
std::time_get_byname::~time_get_byname	./locale_facets.h	/^      ~time_get_byname() { }$/;"	kind:function	language:C++	class:std::time_get_byname	access:protected	signature:()
std::time_put	./locale_facets.h	/^    class time_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
std::time_put::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_put	typeref:typename:_CharT	access:public
std::time_put::do_put	./locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	kind:prototype	language:C++	class:std::time_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,char __format,char __mod) const
std::time_put::id	./locale_facets.h	/^      static locale::id			id;$/;"	kind:member	language:C++	class:std::time_put	typeref:typename:locale::id	access:public
std::time_put::iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_put	typeref:typename:_OutIter	access:public
std::time_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,$/;"	kind:prototype	language:C++	class:std::time_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,const _CharT * __beg,const _CharT * __end) const
std::time_put::put	./locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	kind:function	language:C++	class:std::time_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const tm * __tm,char __format,char __mod=0) const
std::time_put::time_put	./locale_facets.h	/^      time_put(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_put	access:public	signature:(size_t __refs=0)
std::time_put::~time_put	./locale_facets.h	/^      ~time_put()$/;"	kind:function	language:C++	class:std::time_put	access:protected	signature:()
std::time_put<_CharT, _OutIter>::id	./locale_facets.h	/^    locale::id time_put<_CharT, _OutIter>::id;$/;"	kind:member	language:C++	class:std::time_put<_CharT, _OutIter>	typeref:typename:locale::id
std::time_put_byname	./locale_facets.h	/^    class time_put_byname : public time_put<_CharT, _OutIter>$/;"	kind:class	language:C++	namespace:std	inherits:time_put<_CharT,_OutIter>
std::time_put_byname::char_type	./locale_facets.h	/^      typedef _CharT			char_type;$/;"	kind:typedef	language:C++	class:std::time_put_byname	typeref:typename:_CharT	access:public
std::time_put_byname::iter_type	./locale_facets.h	/^      typedef _OutIter			iter_type;$/;"	kind:typedef	language:C++	class:std::time_put_byname	typeref:typename:_OutIter	access:public
std::time_put_byname::time_put_byname	./locale_facets.h	/^      time_put_byname(const char*, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_put_byname	access:public	signature:(const char *,size_t __refs=0)
std::time_put_byname::~time_put_byname	./locale_facets.h	/^      ~time_put_byname() { }$/;"	kind:function	language:C++	class:std::time_put_byname	access:protected	signature:()
std::tolower	./locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::tolower	./localefwd.h	/^    tolower(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::toupper	./locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::toupper	./localefwd.h	/^    toupper(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::transform	./stl_algo.h	/^    transform(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_UnaryOperation __unary_op)
std::transform	./stl_algo.h	/^    transform(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_OutputIterator __result,_BinaryOperation __binary_op)
std::unary_function	./stl_function.h	/^    struct unary_function$/;"	kind:struct	language:C++	namespace:std
std::unary_function::argument_type	./stl_function.h	/^      typedef _Arg argument_type;   \/\/\/< @c argument_type is the type of the$/;"	kind:typedef	language:C++	struct:std::unary_function	typeref:typename:_Arg	access:public
std::unary_function::result_type	./stl_function.h	/^      typedef _Result result_type;  \/\/\/< @c result_type is the return type$/;"	kind:typedef	language:C++	struct:std::unary_function	typeref:typename:_Result	access:public
std::unary_negate	./stl_function.h	/^    class unary_negate$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
std::unary_negate::_M_pred	./stl_function.h	/^      _Predicate _M_pred;$/;"	kind:member	language:C++	class:std::unary_negate	typeref:typename:_Predicate	access:protected
std::unary_negate::operator ()	./stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	kind:function	language:C++	class:std::unary_negate	typeref:typename:bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
std::unary_negate::unary_negate	./stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	kind:function	language:C++	class:std::unary_negate	access:public	signature:(const _Predicate & __x)
std::uninitialized_copy	./stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::uninitialized_copy	./stl_uninitialized.h	/^  uninitialized_copy(const char* __first, const char* __last, char* __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:char *	signature:(const char * __first,const char * __last,char * __result)
std::uninitialized_copy	./stl_uninitialized.h	/^  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:wchar_t *	signature:(const wchar_t * __first,const wchar_t * __last,wchar_t * __result)
std::uninitialized_fill	./stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
std::uninitialized_fill_n	./stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
std::unique	./stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::unique	./stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_BinaryPredicate __binary_pred)
std::unique_copy	./stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
std::unique_copy	./stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred)
std::unitbuf	./ios_base.h	/^  unitbuf(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::upper_bound	./stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::upper_bound	./stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::uppercase	./ios_base.h	/^  uppercase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::use_facet	./locale_facets.h	/^    use_facet<ctype<char> >(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const ctype<char> &	signature:(const locale & __loc)
std::use_facet	./locale_facets.h	/^    use_facet<ctype<wchar_t> >(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const ctype<wchar_t> &	signature:(const locale & __loc)
std::use_facet	./localefwd.h	/^    use_facet(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Facet &	signature:(const locale & __loc)
std::vector	./stl_bvector.h	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Bvector_base<_Alloc>
std::vector	./stl_vector.h	/^    class vector : protected _Vector_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Vector_base<_Tp,_Alloc>
std::vector::_Alloc_value_type	./stl_vector.h	/^      typedef typename _Alloc::value_type                _Alloc_value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc::value_type	access:private
std::vector::_Base	./stl_bvector.h	/^    typedef _Bvector_base<_Alloc>			 _Base;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bvector_base<_Alloc>	access:private
std::vector::_Base	./stl_vector.h	/^      typedef _Vector_base<_Tp, _Alloc>			 _Base;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Vector_base<_Tp,_Alloc>	access:private
std::vector::_M_allocate_and_copy	./stl_vector.h	/^        _M_allocate_and_copy(size_type __n,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:pointer	access:protected	signature:(size_type __n,_ForwardIterator __first,_ForwardIterator __last)
std::vector::_M_assign_aux	./stl_bvector.h	/^      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_assign_aux	./stl_bvector.h	/^      _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_M_assign_aux	./stl_vector.h	/^        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_assign_aux	./stl_vector.h	/^        _M_assign_aux(_InputIterator __first, _InputIterator __last,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_M_assign_dispatch	./stl_bvector.h	/^      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_assign_dispatch	./stl_bvector.h	/^      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
std::vector::_M_assign_dispatch	./stl_vector.h	/^        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_assign_dispatch	./stl_vector.h	/^        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __val,__true_type)
std::vector::_M_copy_aligned	./stl_bvector.h	/^    _M_copy_aligned(const_iterator __first, const_iterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:protected	signature:(const_iterator __first,const_iterator __last,iterator __result)
std::vector::_M_erase_at_end	./stl_bvector.h	/^    _M_erase_at_end(iterator __pos)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos)
std::vector::_M_erase_at_end	./stl_vector.h	/^      _M_erase_at_end(pointer __pos)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(pointer __pos)
std::vector::_M_fill_assign	./stl_bvector.h	/^    _M_fill_assign(size_t __n, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_t __n,bool __x)
std::vector::_M_fill_assign	./stl_vector.h	/^      _M_fill_assign(size_type __n, const value_type& __val);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n,const value_type & __val)
std::vector::_M_fill_insert	./stl_bvector.h	/^    _M_fill_insert(iterator __position, size_type __n, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,size_type __n,bool __x)
std::vector::_M_fill_insert	./stl_vector.h	/^      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,size_type __n,const value_type & __x)
std::vector::_M_initialize	./stl_bvector.h	/^    _M_initialize(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n)
std::vector::_M_initialize_dispatch	./stl_bvector.h	/^      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_initialize_dispatch	./stl_bvector.h	/^      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __x,__true_type)
std::vector::_M_initialize_dispatch	./stl_vector.h	/^        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_initialize_dispatch	./stl_vector.h	/^        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_Integer __n,_Integer __value,__true_type)
std::vector::_M_initialize_range	./stl_bvector.h	/^      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_initialize_range	./stl_bvector.h	/^      _M_initialize_range(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_M_insert_aux	./stl_bvector.h	/^    _M_insert_aux(iterator __position, bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,bool __x)
std::vector::_M_insert_aux	./stl_vector.h	/^      _M_insert_aux(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,const value_type & __x)
std::vector::_M_insert_dispatch	./stl_bvector.h	/^      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __x,__true_type)
std::vector::_M_insert_dispatch	./stl_bvector.h	/^      _M_insert_dispatch(iterator __pos,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_insert_dispatch	./stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,__false_type)
std::vector::_M_insert_dispatch	./stl_vector.h	/^        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_Integer __n,_Integer __val,__true_type)
std::vector::_M_insert_range	./stl_bvector.h	/^      _M_insert_range(iterator __pos, _InputIterator __first, $/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_M_insert_range	./stl_bvector.h	/^      _M_insert_range(iterator __position, _ForwardIterator __first, $/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __position,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_range_check	./stl_bvector.h	/^    _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n) const
std::vector::_M_range_check	./stl_vector.h	/^      _M_range_check(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(size_type __n) const
std::vector::_M_range_initialize	./stl_vector.h	/^        _M_range_initialize(_ForwardIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_range_initialize	./stl_vector.h	/^        _M_range_initialize(_InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_M_range_insert	./stl_vector.h	/^        _M_range_insert(iterator __pos, _ForwardIterator __first,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_ForwardIterator __first,_ForwardIterator __last,std::forward_iterator_tag)
std::vector::_M_range_insert	./stl_vector.h	/^        _M_range_insert(iterator __pos, _InputIterator __first,$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:protected	signature:(iterator __pos,_InputIterator __first,_InputIterator __last,std::input_iterator_tag)
std::vector::_Tp_alloc_type	./stl_vector.h	/^      typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Base::_Tp_alloc_type	access:private
std::vector::allocator_type	./stl_bvector.h	/^    typedef _Alloc                        		 allocator_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc	access:public
std::vector::allocator_type	./stl_vector.h	/^      typedef _Alloc                        		 allocator_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Alloc	access:public
std::vector::assign	./stl_bvector.h	/^      assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::vector::assign	./stl_bvector.h	/^    assign(size_type __n, const bool& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n,const bool & __x)
std::vector::assign	./stl_vector.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::vector::assign	./stl_vector.h	/^      assign(size_type __n, const value_type& __val)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n,const value_type & __val)
std::vector::at	./stl_bvector.h	/^    at(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::vector::at	./stl_bvector.h	/^    at(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
std::vector::at	./stl_vector.h	/^      at(size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::vector::at	./stl_vector.h	/^      at(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
std::vector::back	./stl_bvector.h	/^    back() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
std::vector::back	./stl_bvector.h	/^    back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
std::vector::back	./stl_vector.h	/^      back() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
std::vector::back	./stl_vector.h	/^      back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
std::vector::begin	./stl_bvector.h	/^    begin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
std::vector::begin	./stl_bvector.h	/^    begin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
std::vector::begin	./stl_vector.h	/^      begin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
std::vector::begin	./stl_vector.h	/^      begin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
std::vector::capacity	./stl_bvector.h	/^    capacity() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::capacity	./stl_vector.h	/^      capacity() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::clear	./stl_bvector.h	/^    clear()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::clear	./stl_vector.h	/^      clear()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::const_iterator	./stl_bvector.h	/^    typedef _Bit_const_iterator                          const_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_const_iterator	access:public
std::vector::const_iterator	./stl_vector.h	/^      const_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,vector_type>	access:public
std::vector::const_pointer	./stl_bvector.h	/^    typedef const bool*                                  const_pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:const bool *	access:public
std::vector::const_pointer	./stl_vector.h	/^      typedef typename _Tp_alloc_type::const_pointer     const_pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::const_pointer	access:public
std::vector::const_reference	./stl_bvector.h	/^    typedef bool                                         const_reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:bool	access:public
std::vector::const_reference	./stl_vector.h	/^      typedef typename _Tp_alloc_type::const_reference   const_reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::const_reference	access:public
std::vector::const_reverse_iterator	./stl_bvector.h	/^    typedef std::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::vector::const_reverse_iterator	./stl_vector.h	/^      typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::vector::data	./stl_bvector.h	/^    data() { }$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::data	./stl_vector.h	/^      data() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_pointer	access:public	signature:() const
std::vector::data	./stl_vector.h	/^      data()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:pointer	access:public	signature:()
std::vector::difference_type	./stl_bvector.h	/^    typedef ptrdiff_t                                    difference_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:ptrdiff_t	access:public
std::vector::difference_type	./stl_vector.h	/^      typedef ptrdiff_t					 difference_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:ptrdiff_t	access:public
std::vector::empty	./stl_bvector.h	/^    empty() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:bool	access:public	signature:() const
std::vector::empty	./stl_vector.h	/^      empty() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:bool	access:public	signature:() const
std::vector::end	./stl_bvector.h	/^    end() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
std::vector::end	./stl_bvector.h	/^    end()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
std::vector::end	./stl_vector.h	/^      end() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_iterator	access:public	signature:() const
std::vector::end	./stl_vector.h	/^      end()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:()
std::vector::erase	./stl_bvector.h	/^    erase(iterator __first, iterator __last)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::vector::erase	./stl_bvector.h	/^    erase(iterator __position)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position)
std::vector::erase	./stl_vector.h	/^      erase(iterator __first, iterator __last);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::vector::erase	./stl_vector.h	/^      erase(iterator __position);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position)
std::vector::flip	./stl_bvector.h	/^    flip()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::front	./stl_bvector.h	/^    front() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
std::vector::front	./stl_bvector.h	/^    front()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
std::vector::front	./stl_vector.h	/^      front() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:() const
std::vector::front	./stl_vector.h	/^      front()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:()
std::vector::get_allocator	./stl_bvector.h	/^    allocator_type get_allocator() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:allocator_type	access:public	signature:() const
std::vector::insert	./stl_bvector.h	/^      insert(iterator __position,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
std::vector::insert	./stl_bvector.h	/^    insert(iterator __position, const bool& __x = bool())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position,const bool & __x=bool ())
std::vector::insert	./stl_bvector.h	/^    insert(iterator __position, size_type __n, const bool& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const bool & __x)
std::vector::insert	./stl_vector.h	/^        insert(iterator __position, _InputIterator __first,$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,_InputIterator __first,_InputIterator __last)
std::vector::insert	./stl_vector.h	/^      insert(iterator __position, const value_type& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:iterator	access:public	signature:(iterator __position,const value_type & __x)
std::vector::insert	./stl_vector.h	/^      insert(iterator __position, size_type __n, const value_type& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(iterator __position,size_type __n,const value_type & __x)
std::vector::iterator	./stl_bvector.h	/^    typedef _Bit_iterator                                iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_iterator	access:public
std::vector::iterator	./stl_vector.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, vector_type> iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:__gnu_cxx::__normal_iterator<pointer,vector_type>	access:public
std::vector::max_size	./stl_bvector.h	/^    max_size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::max_size	./stl_vector.h	/^      max_size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::operator =	./stl_bvector.h	/^    operator=(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:vector &	access:public	signature:(const vector & __x)
std::vector::operator =	./stl_vector.h	/^      operator=(const vector& __x);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:vector &	access:public	signature:(const vector & __x)
std::vector::operator []	./stl_bvector.h	/^    operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::vector::operator []	./stl_bvector.h	/^    operator[](size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
std::vector::operator []	./stl_vector.h	/^      operator[](size_type __n) const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::vector::operator []	./stl_vector.h	/^      operator[](size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reference	access:public	signature:(size_type __n)
std::vector::pointer	./stl_bvector.h	/^    typedef _Bit_reference*                              pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_reference *	access:public
std::vector::pointer	./stl_vector.h	/^      typedef typename _Tp_alloc_type::pointer           pointer;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::pointer	access:public
std::vector::pop_back	./stl_bvector.h	/^    pop_back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::pop_back	./stl_vector.h	/^      pop_back()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:()
std::vector::push_back	./stl_bvector.h	/^    push_back(bool __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(bool __x)
std::vector::push_back	./stl_vector.h	/^      push_back(const value_type& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(const value_type & __x)
std::vector::rbegin	./stl_bvector.h	/^    rbegin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::vector::rbegin	./stl_bvector.h	/^    rbegin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
std::vector::rbegin	./stl_vector.h	/^      rbegin() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::vector::rbegin	./stl_vector.h	/^      rbegin()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
std::vector::reference	./stl_bvector.h	/^    typedef _Bit_reference                               reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Bit_reference	access:public
std::vector::reference	./stl_vector.h	/^      typedef typename _Tp_alloc_type::reference         reference;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp_alloc_type::reference	access:public
std::vector::rend	./stl_bvector.h	/^    rend() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::vector::rend	./stl_bvector.h	/^    rend()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
std::vector::rend	./stl_vector.h	/^      rend() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::vector::rend	./stl_vector.h	/^      rend()$/;"	kind:function	language:C++	class:std::vector	typeref:typename:reverse_iterator	access:public	signature:()
std::vector::reserve	./stl_bvector.h	/^    reserve(size_type __n)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n)
std::vector::reserve	./stl_vector.h	/^      reserve(size_type __n);$/;"	kind:prototype	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __n)
std::vector::resize	./stl_bvector.h	/^    resize(size_type __new_size, bool __x = bool())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __new_size,bool __x=bool ())
std::vector::resize	./stl_vector.h	/^      resize(size_type __new_size, value_type __x = value_type())$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(size_type __new_size,value_type __x=value_type ())
std::vector::reverse_iterator	./stl_bvector.h	/^    typedef std::reverse_iterator<iterator>              reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<iterator>	access:public
std::vector::reverse_iterator	./stl_vector.h	/^      typedef std::reverse_iterator<iterator>		 reverse_iterator;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:std::reverse_iterator<iterator>	access:public
std::vector::size	./stl_bvector.h	/^    size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::size	./stl_vector.h	/^      size() const$/;"	kind:function	language:C++	class:std::vector	typeref:typename:size_type	access:public	signature:() const
std::vector::size_type	./stl_bvector.h	/^    typedef size_t                                       size_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:size_t	access:public
std::vector::size_type	./stl_vector.h	/^      typedef size_t					 size_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:size_t	access:public
std::vector::swap	./stl_bvector.h	/^    swap(reference __x, reference __y)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(reference __x,reference __y)
std::vector::swap	./stl_bvector.h	/^    swap(vector<bool, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(vector<bool,_Alloc> & __x)
std::vector::swap	./stl_vector.h	/^      swap(vector& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(vector & __x)
std::vector::value_type	./stl_bvector.h	/^    typedef bool                                         value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:bool	access:public
std::vector::value_type	./stl_vector.h	/^      typedef _Tp					 value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp	access:public
std::vector::vector	./stl_bvector.h	/^      vector(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
std::vector::vector	./stl_bvector.h	/^    vector(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const allocator_type & __a=allocator_type ())
std::vector::vector	./stl_bvector.h	/^    vector(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const vector & __x)
std::vector::vector	./stl_bvector.h	/^    vector(size_type __n, const bool& __value = bool(), $/;"	kind:function	language:C++	class:std::vector	access:public	signature:(size_type __n,const bool & __value=bool (),const allocator_type & __a=allocator_type ())
std::vector::vector	./stl_vector.h	/^        vector(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
std::vector::vector	./stl_vector.h	/^      vector(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const allocator_type & __a=allocator_type ())
std::vector::vector	./stl_vector.h	/^      vector(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const vector & __x)
std::vector::vector	./stl_vector.h	/^      vector(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
std::vector::vector_type	./stl_vector.h	/^      typedef vector<_Tp, _Alloc>			 vector_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:vector<_Tp,_Alloc>	access:private
std::vector::~vector	./stl_bvector.h	/^    ~vector() { }$/;"	kind:function	language:C++	class:std::vector	access:public	signature:()
std::vector::~vector	./stl_vector.h	/^      ~vector()$/;"	kind:function	language:C++	class:std::vector	access:public	signature:()
std::wstreampos	./postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:fpos<mbstate_t>
std::wstring	./stringfwd.h	/^  typedef basic_string<wchar_t> wstring;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:basic_string<wchar_t>
streambuf_type	./streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	./streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	./streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:__is_iterator_type::streambuf_type
streambuf_type	./streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	kind:typedef	language:C++	function:std::find	typeref:typename:__is_iterator_type::streambuf_type
streamoff	./ios_base.h	/^    typedef std::streamoff streamoff;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:std::streamoff	access:public
streamoff	./postypes.h	/^  typedef int64_t       streamoff;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:int64_t
streampos	./ios_base.h	/^    typedef std::streampos streampos;$/;"	kind:typedef	language:C++	class:std::ios_base	typeref:typename:std::streampos	access:public
streampos	./postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:fpos<mbstate_t>
streamsize	./postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:ptrdiff_t
stride	./gslice.h	/^    valarray<size_t> stride() const;$/;"	kind:prototype	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	access:public	signature:() const
stride	./gslice.h	/^  gslice::stride () const$/;"	kind:function	language:C++	class:std::gslice	typeref:typename:valarray<size_t>	signature:() const
stride	./slice_array.h	/^    size_t stride() const;$/;"	kind:prototype	language:C++	class:std::slice	typeref:typename:size_t	access:public	signature:() const
stride	./slice_array.h	/^  slice::stride() const$/;"	kind:function	language:C++	class:std::slice	typeref:typename:size_t	signature:() const
string	./stringfwd.h	/^  typedef basic_string<char>    string;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:basic_string<char>
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::messages	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::messages_byname	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::money_get	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::money_put	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::moneypunct	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::moneypunct_byname	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	kind:typedef	language:C++	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
string_type	./locale_facets.h	/^      typedef basic_string<_CharT> string_type;$/;"	kind:typedef	language:C++	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
substr	./basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	kind:function	language:C++	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
sum	./valarray_after.h	/^      value_type sum() const;$/;"	kind:prototype	language:C++	class:std::_Expr	typeref:typename:value_type	access:public	signature:() const
sum	./valarray_after.h	/^    _Expr<_Clos, _Tp>::sum() const$/;"	kind:function	language:C++	class:std::_Expr	typeref:typename:_Tp	signature:() const
swap	./basic_string.h	/^      swap(basic_string& __s);$/;"	kind:prototype	language:C++	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
swap	./basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
swap	./stl_algobase.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Tp & __a,_Tp & __b)
swap	./stl_bvector.h	/^    swap(reference __x, reference __y)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(reference __x,reference __y)
swap	./stl_bvector.h	/^    swap(vector<bool, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(vector<bool,_Alloc> & __x)
swap	./stl_deque.h	/^      swap(deque& __x)$/;"	kind:function	language:C++	class:std::deque	typeref:typename:void	access:public	signature:(deque & __x)
swap	./stl_deque.h	/^    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(deque<_Tp,_Alloc> & __x,deque<_Tp,_Alloc> & __y)
swap	./stl_list.h	/^      swap(list& __x)$/;"	kind:function	language:C++	class:std::list	typeref:typename:void	access:public	signature:(list & __x)
swap	./stl_list.h	/^    swap(_List_node_base& __x, _List_node_base& __y);$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base & __x,_List_node_base & __y)
swap	./stl_list.h	/^    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(list<_Tp,_Alloc> & __x,list<_Tp,_Alloc> & __y)
swap	./stl_map.h	/^      swap(map& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:void	access:public	signature:(map & __x)
swap	./stl_map.h	/^    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(map<_Key,_Tp,_Compare,_Alloc> & __x,map<_Key,_Tp,_Compare,_Alloc> & __y)
swap	./stl_multimap.h	/^      swap(multimap& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:void	access:public	signature:(multimap & __x)
swap	./stl_multimap.h	/^    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(multimap<_Key,_Tp,_Compare,_Alloc> & __x,multimap<_Key,_Tp,_Compare,_Alloc> & __y)
swap	./stl_multiset.h	/^      swap(multiset<_Key, _Compare, _Alloc>& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:void	access:public	signature:(multiset<_Key,_Compare,_Alloc> & __x)
swap	./stl_multiset.h	/^    swap(multiset<_Key, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(multiset<_Key,_Compare,_Alloc> & __x,multiset<_Key,_Compare,_Alloc> & __y)
swap	./stl_set.h	/^      swap(set<_Key,_Compare,_Alloc>& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:void	access:public	signature:(set<_Key,_Compare,_Alloc> & __x)
swap	./stl_set.h	/^    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(set<_Key,_Compare,_Alloc> & __x,set<_Key,_Compare,_Alloc> & __y)
swap	./stl_tree.h	/^      swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:void	access:public	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __t)
swap	./stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:void	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __t)
swap	./stl_tree.h	/^    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __x,_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc> & __y)
swap	./stl_vector.h	/^      swap(vector& __x)$/;"	kind:function	language:C++	class:std::vector	typeref:typename:void	access:public	signature:(vector & __x)
swap	./stl_vector.h	/^    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(vector<_Tp,_Alloc> & __x,vector<_Tp,_Alloc> & __y)
swap_ranges	./stl_algo.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
symbol	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
sync_with_stdio	./ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
table	./locale_facets.h	/^      table() const throw()$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const mask *	access:protected	signature:() const
table_size	./locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	kind:member	language:C++	class:std::ctype	typeref:typename:const size_t	access:public
thousands_sep	./locale_facets.h	/^      thousands_sep() const$/;"	kind:function	language:C++	class:std::moneypunct	typeref:typename:char_type	access:public	signature:() const
thousands_sep	./locale_facets.h	/^      thousands_sep() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
tie	./basic_ios.h	/^      tie() const$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
tie	./basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	kind:function	language:C++	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
time	./locale_classes.h	/^    static const category time		= 1L << 3;$/;"	kind:member	language:C++	class:std::locale	typeref:typename:const category	access:public
time_base	./locale_facets.h	/^  class time_base$/;"	kind:class	language:C++	namespace:std
time_get	./locale_facets.h	/^      time_get(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_get	access:public	signature:(size_t __refs=0)
time_get	./locale_facets.h	/^    class time_get : public locale::facet, public time_base$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet,time_base
time_get_byname	./locale_facets.h	/^      time_get_byname(const char*, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_get_byname	access:public	signature:(const char *,size_t __refs=0)
time_get_byname	./locale_facets.h	/^    class time_get_byname : public time_get<_CharT, _InIter>$/;"	kind:class	language:C++	namespace:std	inherits:time_get<_CharT,_InIter>
time_put	./locale_facets.h	/^      time_put(size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_put	access:public	signature:(size_t __refs=0)
time_put	./locale_facets.h	/^    class time_put : public locale::facet$/;"	kind:class	language:C++	namespace:std	inherits:locale::facet
time_put_byname	./locale_facets.h	/^      time_put_byname(const char*, size_t __refs = 0)$/;"	kind:function	language:C++	class:std::time_put_byname	access:public	signature:(const char *,size_t __refs=0)
time_put_byname	./locale_facets.h	/^    class time_put_byname : public time_put<_CharT, _OutIter>$/;"	kind:class	language:C++	namespace:std	inherits:time_put<_CharT,_OutIter>
to_char_type	./char_traits.h	/^      to_char_type(const int_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
to_int_type	./char_traits.h	/^      to_int_type(const char_type& __c)$/;"	kind:function	language:C++	struct:char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
tolower	./locale_facets.h	/^      tolower(char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	./locale_facets.h	/^      tolower(char_type __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	./locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	./locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	./locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
tolower	./localefwd.h	/^    tolower(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
top	./stl_queue.h	/^      top() const$/;"	kind:function	language:C++	class:std::priority_queue	typeref:typename:const_reference	access:public	signature:() const
top	./stl_stack.h	/^      top() const$/;"	kind:function	language:C++	class:std::stack	typeref:typename:const_reference	access:public	signature:() const
top	./stl_stack.h	/^      top()$/;"	kind:function	language:C++	class:std::stack	typeref:typename:reference	access:public	signature:()
toupper	./locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	./locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	./locale_facets.h	/^      toupper(char_type __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	./locale_facets.h	/^      toupper(char_type __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	./locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
toupper	./localefwd.h	/^    toupper(_CharT, const locale&);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
traits_type	./basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	kind:typedef	language:C++	class:std::basic_ios	typeref:typename:_Traits	access:public
traits_type	./basic_string.h	/^      typedef _Traits					    traits_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Traits	access:public
traits_type	./stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	kind:typedef	language:C++	class:std::istream_iterator	typeref:typename:_Traits	access:public
traits_type	./stream_iterator.h	/^      typedef _Traits                        traits_type;$/;"	kind:typedef	language:C++	class:std::ostream_iterator	typeref:typename:_Traits	access:public
traits_type	./streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	kind:typedef	language:C++	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	./streambuf_iterator.h	/^      typedef _Traits                          traits_type;$/;"	kind:typedef	language:C++	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	./streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type     traits_type;$/;"	kind:typedef	language:C++	function:std::__copy_aux	typeref:typename:__is_iterator_type::traits_type
traits_type	./streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type     traits_type;$/;"	kind:typedef	language:C++	function:std::find	typeref:typename:__is_iterator_type::traits_type
transfer	./stl_list.h	/^    transfer(_List_node_base * const __first,$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:(_List_node_base * const __first,_List_node_base * const __last)
transform	./locale_facets.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	kind:function	language:C++	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
transform	./stl_algo.h	/^    transform(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_UnaryOperation __unary_op)
transform	./stl_algo.h	/^    transform(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_OutputIterator __result,_BinaryOperation __binary_op)
truename	./locale_facets.h	/^      truename() const$/;"	kind:function	language:C++	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
trunc	./ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const openmode	access:public
try	./exception_defines.h	/^# define try /;"	kind:macro	language:C++
unary_function	./stl_function.h	/^    struct unary_function$/;"	kind:struct	language:C++	namespace:std
unary_negate	./stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) {}$/;"	kind:function	language:C++	class:std::unary_negate	access:public	signature:(const _Predicate & __x)
unary_negate	./stl_function.h	/^    class unary_negate$/;"	kind:class	language:C++	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
unhook	./stl_list.h	/^    unhook();$/;"	kind:prototype	language:C++	struct:std::_List_node_base	typeref:typename:void	access:public	signature:()
uninitialized_copy	./stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
uninitialized_copy	./stl_uninitialized.h	/^  uninitialized_copy(const char* __first, const char* __last, char* __result)$/;"	kind:function	language:C++	namespace:std	typeref:typename:char *	signature:(const char * __first,const char * __last,char * __result)
uninitialized_copy	./stl_uninitialized.h	/^  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:wchar_t *	signature:(const wchar_t * __first,const wchar_t * __last,wchar_t * __result)
uninitialized_fill	./stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
uninitialized_fill_n	./stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	kind:function	language:C++	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
unique	./stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last)$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last)
unique	./stl_algo.h	/^    unique(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_BinaryPredicate __binary_pred)
unique	./stl_list.h	/^        unique(_BinaryPredicate);$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:(_BinaryPredicate)
unique	./stl_list.h	/^      unique();$/;"	kind:prototype	language:C++	class:std::list	typeref:typename:void	access:public	signature:()
unique_copy	./stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result)
unique_copy	./stl_algo.h	/^    unique_copy(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_OutputIterator	signature:(_InputIterator __first,_InputIterator __last,_OutputIterator __result,_BinaryPredicate __binary_pred)
unitbuf	./ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
unitbuf	./ios_base.h	/^  unitbuf(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
unsetf	./ios_base.h	/^    unsetf(fmtflags __mask) { _M_flags &= ~__mask; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
unshift	./codecvt.h	/^      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	typeref:typename:result	access:public	signature:(state_type & __state,extern_type * __to,extern_type * __to_end,extern_type * & __to_next) const
upper_bound	./stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
upper_bound	./stl_algo.h	/^    upper_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	kind:function	language:C++	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
upper_bound	./stl_map.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::map	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
upper_bound	./stl_map.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::map	typeref:typename:iterator	access:public	signature:(const key_type & __x)
upper_bound	./stl_multimap.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
upper_bound	./stl_multimap.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:iterator	access:public	signature:(const key_type & __x)
upper_bound	./stl_multiset.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
upper_bound	./stl_multiset.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:iterator	access:public	signature:(const key_type & __x)
upper_bound	./stl_set.h	/^      upper_bound(const key_type& __x) const$/;"	kind:function	language:C++	class:std::set	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
upper_bound	./stl_set.h	/^      upper_bound(const key_type& __x)$/;"	kind:function	language:C++	class:std::set	typeref:typename:iterator	access:public	signature:(const key_type & __x)
upper_bound	./stl_tree.h	/^      upper_bound(const key_type& __x) const;$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:const_iterator	access:public	signature:(const key_type & __x) const
upper_bound	./stl_tree.h	/^      upper_bound(const key_type& __x);$/;"	kind:prototype	language:C++	class:std::_Rb_tree	typeref:typename:iterator	access:public	signature:(const key_type & __x)
upper_bound	./stl_tree.h	/^    upper_bound(const _Key& __k) const$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::const_iterator	signature:(const _Key & __k) const
upper_bound	./stl_tree.h	/^    upper_bound(const _Key& __k)$/;"	kind:function	language:C++	class:std::_Rb_tree	typeref:typename:_Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::iterator	signature:(const _Key & __k)
uppercase	./ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	kind:member	language:C++	class:std::ios_base	typeref:typename:const fmtflags	access:public
uppercase	./ios_base.h	/^  uppercase(ios_base& __base)$/;"	kind:function	language:C++	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
use_facet	./locale_facets.h	/^    use_facet<ctype<char> >(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const ctype<char> &	signature:(const locale & __loc)
use_facet	./locale_facets.h	/^    use_facet<ctype<wchar_t> >(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const ctype<wchar_t> &	signature:(const locale & __loc)
use_facet	./localefwd.h	/^    use_facet(const locale& __loc);$/;"	kind:prototype	language:C++	namespace:std	typeref:typename:const _Facet &	signature:(const locale & __loc)
value	./locale_facets.h	/^    enum part { none, space, symbol, sign, value };$/;"	kind:enumerator	language:C++	enum:std::money_base::part	access:public
value	./stl_function.h	/^      typename _Operation::first_argument_type value;$/;"	kind:member	language:C++	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
value	./stl_function.h	/^      typename _Operation::second_argument_type value;$/;"	kind:member	language:C++	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
value_comp	./stl_map.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::map	typeref:typename:value_compare	access:public	signature:() const
value_comp	./stl_multimap.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::multimap	typeref:typename:value_compare	access:public	signature:() const
value_comp	./stl_multiset.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::multiset	typeref:typename:value_compare	access:public	signature:() const
value_comp	./stl_set.h	/^      value_comp() const$/;"	kind:function	language:C++	class:std::set	typeref:typename:value_compare	access:public	signature:() const
value_compare	./stl_map.h	/^	value_compare(_Compare __c)$/;"	kind:function	language:C++	class:std::map::value_compare	access:protected	signature:(_Compare __c)
value_compare	./stl_map.h	/^      class value_compare$/;"	kind:class	language:C++	class:std::map	inherits:std::binary_function<value_type,value_type,bool>	access:public
value_compare	./stl_multimap.h	/^	value_compare(_Compare __c)$/;"	kind:function	language:C++	class:std::multimap::value_compare	access:protected	signature:(_Compare __c)
value_compare	./stl_multimap.h	/^      class value_compare$/;"	kind:class	language:C++	class:std::multimap	inherits:std::binary_function<value_type,value_type,bool>	access:public
value_compare	./stl_multiset.h	/^      typedef _Compare value_compare;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Compare	access:public
value_compare	./stl_set.h	/^      typedef _Compare value_compare;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Compare	access:public
value_type	./allocator.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:_Tp	access:public
value_type	./allocator.h	/^      typedef void        value_type;$/;"	kind:typedef	language:C++	class:std::allocator	typeref:typename:void	access:public
value_type	./basic_string.h	/^      typedef typename _Traits::char_type		    value_type;$/;"	kind:typedef	language:C++	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
value_type	./gslice_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::gslice_array	typeref:typename:_Tp	access:public
value_type	./indirect_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::indirect_array	typeref:typename:_Tp	access:public
value_type	./mask_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::mask_array	typeref:typename:_Tp	access:public
value_type	./slice_array.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::slice_array	typeref:typename:_Tp	access:public
value_type	./stl_bvector.h	/^    typedef bool                                         value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:bool	access:public
value_type	./stl_deque.h	/^      typedef _Tp                                        value_type;$/;"	kind:typedef	language:C++	class:std::deque	typeref:typename:_Tp	access:public
value_type	./stl_deque.h	/^      typedef _Tp                             value_type;$/;"	kind:typedef	language:C++	struct:std::_Deque_iterator	typeref:typename:_Tp	access:public
value_type	./stl_iterator.h	/^      typedef typename iterator_traits<_Iterator>::value_type  value_type;$/;"	kind:typedef	language:C++	class:__normal_iterator	typeref:typename:iterator_traits<_Iterator>::value_type	access:public
value_type	./stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Tp	access:public
value_type	./stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	struct:std::iterator	typeref:typename:_Tp	access:public
value_type	./stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	kind:typedef	language:C++	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	./stl_list.h	/^      typedef _Tp                                        value_type;$/;"	kind:typedef	language:C++	class:std::list	typeref:typename:_Tp	access:public
value_type	./stl_list.h	/^      typedef _Tp                                value_type;$/;"	kind:typedef	language:C++	struct:std::_List_const_iterator	typeref:typename:_Tp	access:public
value_type	./stl_list.h	/^      typedef _Tp                                value_type;$/;"	kind:typedef	language:C++	struct:std::_List_iterator	typeref:typename:_Tp	access:public
value_type	./stl_map.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	kind:typedef	language:C++	class:std::map	typeref:typename:std::pair<const _Key,_Tp>	access:public
value_type	./stl_multimap.h	/^      typedef std::pair<const _Key, _Tp>                    value_type;$/;"	kind:typedef	language:C++	class:std::multimap	typeref:typename:std::pair<const _Key,_Tp>	access:public
value_type	./stl_multiset.h	/^      typedef _Key     value_type;$/;"	kind:typedef	language:C++	class:std::multiset	typeref:typename:_Key	access:public
value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::priority_queue	typeref:typename:_Sequence::value_type	access:public
value_type	./stl_queue.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::queue	typeref:typename:_Sequence::value_type	access:public
value_type	./stl_set.h	/^      typedef _Key     value_type;$/;"	kind:typedef	language:C++	class:std::set	typeref:typename:_Key	access:public
value_type	./stl_stack.h	/^      typedef typename _Sequence::value_type                value_type;$/;"	kind:typedef	language:C++	class:std::stack	typeref:typename:_Sequence::value_type	access:public
value_type	./stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	kind:typedef	language:C++	class:std::_Temporary_buffer	typeref:typename:_Tp	access:public
value_type	./stl_tree.h	/^      typedef _Tp        value_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_const_iterator	typeref:typename:_Tp	access:public
value_type	./stl_tree.h	/^      typedef _Tp  value_type;$/;"	kind:typedef	language:C++	struct:std::_Rb_tree_iterator	typeref:typename:_Tp	access:public
value_type	./stl_tree.h	/^      typedef _Val value_type;$/;"	kind:typedef	language:C++	class:std::_Rb_tree	typeref:typename:_Val	access:public
value_type	./stl_vector.h	/^      typedef _Tp					 value_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:_Tp	access:public
value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_Expr	typeref:typename:_Tp	access:public
value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_GBase	typeref:typename:_Tp	access:public
value_type	./valarray_after.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_Tp	access:public
value_type	./valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_GClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_after.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_IClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_GBase	typeref:typename:_Dom::value_type	access:public
value_type	./valarray_after.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_IBase	typeref:typename:_Dom::value_type	access:public
value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	class:std::_SBase	typeref:typename:_Tp	access:public
value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_Tp	access:public
value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_Tp	access:public
value_type	./valarray_before.h	/^      typedef _Tp value_type;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_Tp	access:public
value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_BinClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_RefFunClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_SClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_UnClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Base::value_type value_type;$/;"	kind:typedef	language:C++	struct:std::_ValFunClos	typeref:typename:_Base::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_FunBase	typeref:typename:_Dom::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename _Dom::value_type value_type;$/;"	kind:typedef	language:C++	class:std::_SBase	typeref:typename:_Dom::value_type	access:public
value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase1	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_BinBase2	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
value_type	./valarray_before.h	/^      typedef typename __fun<_Oper, _Vt>::result_type value_type;$/;"	kind:typedef	language:C++	class:std::_UnBase	typeref:typename:__fun<_Oper,_Vt>::result_type	access:public
vector	./stl_bvector.h	/^      vector(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
vector	./stl_bvector.h	/^    vector(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const allocator_type & __a=allocator_type ())
vector	./stl_bvector.h	/^    vector(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const vector & __x)
vector	./stl_bvector.h	/^    vector(size_type __n, const bool& __value = bool(), $/;"	kind:function	language:C++	class:std::vector	access:public	signature:(size_type __n,const bool & __value=bool (),const allocator_type & __a=allocator_type ())
vector	./stl_bvector.h	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Bvector_base<_Alloc>
vector	./stl_vector.h	/^        vector(_InputIterator __first, _InputIterator __last,$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(_InputIterator __first,_InputIterator __last,const allocator_type & __a=allocator_type ())
vector	./stl_vector.h	/^      vector(const allocator_type& __a = allocator_type())$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const allocator_type & __a=allocator_type ())
vector	./stl_vector.h	/^      vector(const vector& __x)$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(const vector & __x)
vector	./stl_vector.h	/^      vector(size_type __n, const value_type& __value = value_type(),$/;"	kind:function	language:C++	class:std::vector	access:public	signature:(size_type __n,const value_type & __value=value_type (),const allocator_type & __a=allocator_type ())
vector	./stl_vector.h	/^    class vector : protected _Vector_base<_Tp, _Alloc>$/;"	kind:class	language:C++	namespace:std	inherits:_Vector_base<_Tp,_Alloc>
vector_type	./stl_vector.h	/^      typedef vector<_Tp, _Alloc>			 vector_type;$/;"	kind:typedef	language:C++	class:std::vector	typeref:typename:vector<_Tp,_Alloc>	access:private
what	./ios_base.h	/^      what() const throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
widen	./basic_ios.h	/^      widen(char __c) const;$/;"	kind:prototype	language:C++	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
widen	./locale_facets.h	/^      widen(char __c) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
widen	./locale_facets.h	/^      widen(char __c) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
widen	./locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
widen	./locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	kind:function	language:C++	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
width	./ios_base.h	/^    width() const { return _M_width; }$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
width	./ios_base.h	/^    width(streamsize __wide)$/;"	kind:function	language:C++	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
wstreampos	./postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:fpos<mbstate_t>
wstring	./stringfwd.h	/^  typedef basic_string<wchar_t> wstring;$/;"	kind:typedef	language:C++	namespace:std	typeref:typename:basic_string<wchar_t>
xalloc	./ios_base.h	/^    xalloc() throw();$/;"	kind:prototype	language:C++	class:std::ios_base	typeref:typename:int	access:public	signature:()
ydm	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
ymd	./locale_facets.h	/^    enum dateorder { no_order, dmy, mdy, ymd, ydm };$/;"	kind:enumerator	language:C++	enum:std::time_base::dateorder	access:public
~Init	./ios_base.h	/^      ~Init();$/;"	kind:prototype	language:C++	class:std::ios_base::Init	access:public	signature:()
~_Bvector_base	./stl_bvector.h	/^      ~_Bvector_base()$/;"	kind:function	language:C++	struct:std::_Bvector_base	access:public	signature:()
~_Deque_base	./stl_deque.h	/^      ~_Deque_base();$/;"	kind:prototype	language:C++	class:std::_Deque_base	access:public	signature:()
~_Deque_base	./stl_deque.h	/^    ~_Deque_base()$/;"	kind:function	language:C++	class:std::_Deque_base	signature:()
~_Impl	./locale_classes.h	/^   ~_Impl() throw();$/;"	kind:prototype	language:C++	class:std::locale::_Impl	access:private	signature:()
~_List_base	./stl_list.h	/^      ~_List_base()$/;"	kind:function	language:C++	class:std::_List_base	access:public	signature:()
~_Rb_tree	./stl_tree.h	/^      ~_Rb_tree()$/;"	kind:function	language:C++	class:std::_Rb_tree	access:public	signature:()
~_Temporary_buffer	./stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	kind:function	language:C++	class:std::_Temporary_buffer	access:public	signature:()
~_Vector_base	./stl_vector.h	/^      ~_Vector_base()$/;"	kind:function	language:C++	struct:std::_Vector_base	access:public	signature:()
~__codecvt_abstract_base	./codecvt.h	/^      ~__codecvt_abstract_base() { }$/;"	kind:function	language:C++	class:std::__codecvt_abstract_base	access:protected	signature:()
~__ctype_abstract_base	./locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	kind:function	language:C++	class:std::__ctype_abstract_base	access:protected	signature:()
~__moneypunct_cache	./locale_facets.h	/^      ~__moneypunct_cache();$/;"	kind:prototype	language:C++	struct:std::__moneypunct_cache	access:public	signature:()
~__moneypunct_cache	./locale_facets.h	/^    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()$/;"	kind:function	language:C++	class:std::__moneypunct_cache	signature:()
~__numpunct_cache	./locale_facets.h	/^      ~__numpunct_cache();$/;"	kind:prototype	language:C++	struct:std::__numpunct_cache	access:public	signature:()
~__numpunct_cache	./locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	kind:function	language:C++	class:std::__numpunct_cache	signature:()
~__timepunct	./locale_facets.h	/^      ~__timepunct();$/;"	kind:prototype	language:C++	class:std::__timepunct	access:protected	signature:()
~__timepunct_cache	./locale_facets.h	/^      ~__timepunct_cache();$/;"	kind:prototype	language:C++	struct:std::__timepunct_cache	access:public	signature:()
~__timepunct_cache	./locale_facets.h	/^    __timepunct_cache<_CharT>::~__timepunct_cache()$/;"	kind:function	language:C++	class:std::__timepunct_cache	signature:()
~allocator	./allocator.h	/^      ~allocator() throw() { }$/;"	kind:function	language:C++	class:std::allocator	access:public	signature:()
~basic_ios	./basic_ios.h	/^      ~basic_ios() { }$/;"	kind:function	language:C++	class:std::basic_ios	access:public	signature:()
~basic_string	./basic_string.h	/^      ~basic_string()$/;"	kind:function	language:C++	class:std::basic_string	access:public	signature:()
~codecvt	./codecvt.h	/^      ~codecvt() { }$/;"	kind:function	language:C++	class:std::codecvt	access:protected	signature:()
~codecvt	./codecvt.h	/^      ~codecvt();$/;"	kind:prototype	language:C++	class:std::codecvt	access:protected	signature:()
~codecvt_byname	./codecvt.h	/^      ~codecvt_byname() { }$/;"	kind:function	language:C++	class:std::codecvt_byname	access:protected	signature:()
~collate	./locale_facets.h	/^      ~collate()$/;"	kind:function	language:C++	class:std::collate	access:protected	signature:()
~collate_byname	./locale_facets.h	/^      ~collate_byname() { }$/;"	kind:function	language:C++	class:std::collate_byname	access:protected	signature:()
~ctype	./locale_facets.h	/^      ~ctype();$/;"	kind:prototype	language:C++	class:std::ctype	access:protected	signature:()
~ctype_byname	./locale_facets.h	/^      ~ctype_byname() { };$/;"	kind:function	language:C++	class:std::ctype_byname	access:protected	signature:()
~deque	./stl_deque.h	/^      ~deque()$/;"	kind:function	language:C++	class:std::deque	access:public	signature:()
~facet	./locale_classes.h	/^    ~facet();$/;"	kind:prototype	language:C++	class:std::locale::facet	access:protected	signature:()
~failure	./ios_base.h	/^      ~failure() throw();$/;"	kind:prototype	language:C++	class:std::ios_base::failure	access:public	signature:()
~gslice	./gslice.h	/^    ~gslice();$/;"	kind:prototype	language:C++	class:std::gslice	access:public	signature:()
~gslice	./gslice.h	/^  gslice::~gslice()$/;"	kind:function	language:C++	class:std::gslice	signature:()
~ios_base	./ios_base.h	/^    virtual ~ios_base();$/;"	kind:prototype	language:C++	class:std::ios_base	access:public	signature:()
~locale	./locale_classes.h	/^    ~locale() throw();$/;"	kind:prototype	language:C++	class:std::locale	access:public	signature:()
~messages	./locale_facets.h	/^      ~messages();$/;"	kind:prototype	language:C++	class:std::messages	access:protected	signature:()
~messages_byname	./locale_facets.h	/^      ~messages_byname()$/;"	kind:function	language:C++	class:std::messages_byname	access:protected	signature:()
~money_get	./locale_facets.h	/^      ~money_get() { }$/;"	kind:function	language:C++	class:std::money_get	access:protected	signature:()
~money_put	./locale_facets.h	/^      ~money_put() { }$/;"	kind:function	language:C++	class:std::money_put	access:protected	signature:()
~moneypunct	./locale_facets.h	/^      ~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	access:protected	signature:()
~moneypunct	./locale_facets.h	/^    moneypunct<char, false>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
~moneypunct	./locale_facets.h	/^    moneypunct<char, true>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
~moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, false>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
~moneypunct	./locale_facets.h	/^    moneypunct<wchar_t, true>::~moneypunct();$/;"	kind:prototype	language:C++	class:std::moneypunct	signature:()
~moneypunct_byname	./locale_facets.h	/^      ~moneypunct_byname() { }$/;"	kind:function	language:C++	class:std::moneypunct_byname	access:protected	signature:()
~num_get	./locale_facets.h	/^      virtual ~num_get() { }$/;"	kind:function	language:C++	class:std::num_get	access:protected	signature:()
~num_put	./locale_facets.h	/^      ~num_put() { };$/;"	kind:function	language:C++	class:std::num_put	access:protected	signature:()
~numpunct	./locale_facets.h	/^      ~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	access:protected	signature:()
~numpunct	./locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	signature:()
~numpunct	./locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	kind:prototype	language:C++	class:std::numpunct	signature:()
~numpunct_byname	./locale_facets.h	/^      ~numpunct_byname() { }$/;"	kind:function	language:C++	class:std::numpunct_byname	access:protected	signature:()
~time_get	./locale_facets.h	/^      ~time_get() { }$/;"	kind:function	language:C++	class:std::time_get	access:protected	signature:()
~time_get_byname	./locale_facets.h	/^      ~time_get_byname() { }$/;"	kind:function	language:C++	class:std::time_get_byname	access:protected	signature:()
~time_put	./locale_facets.h	/^      ~time_put()$/;"	kind:function	language:C++	class:std::time_put	access:protected	signature:()
~time_put_byname	./locale_facets.h	/^      ~time_put_byname() { }$/;"	kind:function	language:C++	class:std::time_put_byname	access:protected	signature:()
~vector	./stl_bvector.h	/^    ~vector() { }$/;"	kind:function	language:C++	class:std::vector	access:public	signature:()
~vector	./stl_vector.h	/^      ~vector()$/;"	kind:function	language:C++	class:std::vector	access:public	signature:()
